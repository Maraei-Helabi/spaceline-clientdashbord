/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateProductCategoryRequest,
  ErrorResult,
  HttpValidationProblemDetails,
  PaginationResponseOfProductCategoryDto,
  ProductCategoryDto,
  SearchProductCategoryRequest,
  UpdateProductCategoryRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search ProductCategories using available filters.
 */
export const productCategoriesSearch = (
    searchProductCategoryRequest: BodyType<SearchProductCategoryRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfProductCategoryDto>(
      {url: `/api/v1/productcategories/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchProductCategoryRequest, signal
    },
      options);
    }
  


export const getProductCategoriesSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productCategoriesSearch>>, TError,{data: BodyType<SearchProductCategoryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof productCategoriesSearch>>, TError,{data: BodyType<SearchProductCategoryRequest>}, TContext> => {

const mutationKey = ['productCategoriesSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productCategoriesSearch>>, {data: BodyType<SearchProductCategoryRequest>}> = (props) => {
          const {data} = props ?? {};

          return  productCategoriesSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProductCategoriesSearchMutationResult = NonNullable<Awaited<ReturnType<typeof productCategoriesSearch>>>
    export type ProductCategoriesSearchMutationBody = BodyType<SearchProductCategoryRequest>
    export type ProductCategoriesSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search ProductCategories using available filters.
 */
export const useProductCategoriesSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productCategoriesSearch>>, TError,{data: BodyType<SearchProductCategoryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof productCategoriesSearch>>,
        TError,
        {data: BodyType<SearchProductCategoryRequest>},
        TContext
      > => {

      const mutationOptions = getProductCategoriesSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get ProductCategory details.
 */
export const productCategoriesGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ProductCategoryDto>(
      {url: `/api/v1/productcategories/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getProductCategoriesGetQueryKey = (id?: number,) => {
    return [`/api/v1/productcategories/${id}`] as const;
    }

    
export const getProductCategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof productCategoriesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof productCategoriesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProductCategoriesGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof productCategoriesGet>>> = ({ signal }) => productCategoriesGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof productCategoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProductCategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof productCategoriesGet>>>
export type ProductCategoriesGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useProductCategoriesGet<TData = Awaited<ReturnType<typeof productCategoriesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof productCategoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof productCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof productCategoriesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProductCategoriesGet<TData = Awaited<ReturnType<typeof productCategoriesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof productCategoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof productCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof productCategoriesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProductCategoriesGet<TData = Awaited<ReturnType<typeof productCategoriesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof productCategoriesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get ProductCategory details.
 */

export function useProductCategoriesGet<TData = Awaited<ReturnType<typeof productCategoriesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof productCategoriesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProductCategoriesGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a ProductCategory.
 */
export const productCategoriesUpdate = (
    id: number,
    updateProductCategoryRequest: BodyType<UpdateProductCategoryRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/productcategories/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateProductCategoryRequest
    },
      options);
    }
  


export const getProductCategoriesUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productCategoriesUpdate>>, TError,{id: number;data: BodyType<UpdateProductCategoryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof productCategoriesUpdate>>, TError,{id: number;data: BodyType<UpdateProductCategoryRequest>}, TContext> => {

const mutationKey = ['productCategoriesUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productCategoriesUpdate>>, {id: number;data: BodyType<UpdateProductCategoryRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  productCategoriesUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProductCategoriesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof productCategoriesUpdate>>>
    export type ProductCategoriesUpdateMutationBody = BodyType<UpdateProductCategoryRequest>
    export type ProductCategoriesUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a ProductCategory.
 */
export const useProductCategoriesUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productCategoriesUpdate>>, TError,{id: number;data: BodyType<UpdateProductCategoryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof productCategoriesUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateProductCategoryRequest>},
        TContext
      > => {

      const mutationOptions = getProductCategoriesUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a ProductCategory.
 */
export const productCategoriesDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/productcategories/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getProductCategoriesDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productCategoriesDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof productCategoriesDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['productCategoriesDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productCategoriesDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  productCategoriesDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProductCategoriesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof productCategoriesDelete>>>
    
    export type ProductCategoriesDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a ProductCategory.
 */
export const useProductCategoriesDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productCategoriesDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof productCategoriesDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getProductCategoriesDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Create a new ProductCategory.
 */
export const productCategoriesCreate = (
    createProductCategoryRequest: BodyType<CreateProductCategoryRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/productcategories`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createProductCategoryRequest, signal
    },
      options);
    }
  


export const getProductCategoriesCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productCategoriesCreate>>, TError,{data: BodyType<CreateProductCategoryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof productCategoriesCreate>>, TError,{data: BodyType<CreateProductCategoryRequest>}, TContext> => {

const mutationKey = ['productCategoriesCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productCategoriesCreate>>, {data: BodyType<CreateProductCategoryRequest>}> = (props) => {
          const {data} = props ?? {};

          return  productCategoriesCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProductCategoriesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof productCategoriesCreate>>>
    export type ProductCategoriesCreateMutationBody = BodyType<CreateProductCategoryRequest>
    export type ProductCategoriesCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new ProductCategory.
 */
export const useProductCategoriesCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productCategoriesCreate>>, TError,{data: BodyType<CreateProductCategoryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof productCategoriesCreate>>,
        TError,
        {data: BodyType<CreateProductCategoryRequest>},
        TContext
      > => {

      const mutationOptions = getProductCategoriesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    