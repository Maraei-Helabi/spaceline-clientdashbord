/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApiResponseOfBoolean,
  ApiResponseOfGetSubscriptoinDetailsResponse,
  ApiResponseOfServiceLineDataUsageForBillingCyclesPaginated,
  ApiResponseOfSubscriptionDto,
  CreateSubscriptionRequest,
  DeactivateSubscriptionRequest,
  ErrorResult,
  ExportSubscriptionRequest,
  GetBillingCycleRequest,
  HttpValidationProblemDetails,
  PaginationResponseOfSubscriptionDto,
  ResumeSubscriptionRequest,
  SearchSubscriptionRequest,
  SetPublicIpRequest,
  SubscriptionDto,
  SubscriptionsGetDapperParams,
  UpdateSubscriptionNicknameRequest,
  UpdateSubscriptionRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search Subscription using available filters.
 */
export const subscriptionsSearch = (
    searchSubscriptionRequest: BodyType<SearchSubscriptionRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfSubscriptionDto>(
      {url: `/api/v1/subscriptions/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchSubscriptionRequest, signal
    },
      options);
    }
  


export const getSubscriptionsSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsSearch>>, TError,{data: BodyType<SearchSubscriptionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionsSearch>>, TError,{data: BodyType<SearchSubscriptionRequest>}, TContext> => {

const mutationKey = ['subscriptionsSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionsSearch>>, {data: BodyType<SearchSubscriptionRequest>}> = (props) => {
          const {data} = props ?? {};

          return  subscriptionsSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionsSearchMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionsSearch>>>
    export type SubscriptionsSearchMutationBody = BodyType<SearchSubscriptionRequest>
    export type SubscriptionsSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search Subscription using available filters.
 */
export const useSubscriptionsSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsSearch>>, TError,{data: BodyType<SearchSubscriptionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionsSearch>>,
        TError,
        {data: BodyType<SearchSubscriptionRequest>},
        TContext
      > => {

      const mutationOptions = getSubscriptionsSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Subscription details.
 */
export const subscriptionsGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseOfSubscriptionDto>(
      {url: `/api/v1/subscriptions/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getSubscriptionsGetQueryKey = (id?: number,) => {
    return [`/api/v1/subscriptions/${id}`] as const;
    }

    
export const getSubscriptionsGetQueryOptions = <TData = Awaited<ReturnType<typeof subscriptionsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSubscriptionsGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof subscriptionsGet>>> = ({ signal }) => subscriptionsGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof subscriptionsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SubscriptionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof subscriptionsGet>>>
export type SubscriptionsGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useSubscriptionsGet<TData = Awaited<ReturnType<typeof subscriptionsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof subscriptionsGet>>,
          TError,
          Awaited<ReturnType<typeof subscriptionsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSubscriptionsGet<TData = Awaited<ReturnType<typeof subscriptionsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof subscriptionsGet>>,
          TError,
          Awaited<ReturnType<typeof subscriptionsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSubscriptionsGet<TData = Awaited<ReturnType<typeof subscriptionsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Subscription details.
 */

export function useSubscriptionsGet<TData = Awaited<ReturnType<typeof subscriptionsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSubscriptionsGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a Subscription.
 */
export const subscriptionsUpdate = (
    id: number,
    updateSubscriptionRequest: BodyType<UpdateSubscriptionRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/subscriptions/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateSubscriptionRequest
    },
      options);
    }
  


export const getSubscriptionsUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsUpdate>>, TError,{id: number;data: BodyType<UpdateSubscriptionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionsUpdate>>, TError,{id: number;data: BodyType<UpdateSubscriptionRequest>}, TContext> => {

const mutationKey = ['subscriptionsUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionsUpdate>>, {id: number;data: BodyType<UpdateSubscriptionRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  subscriptionsUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionsUpdate>>>
    export type SubscriptionsUpdateMutationBody = BodyType<UpdateSubscriptionRequest>
    export type SubscriptionsUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a Subscription.
 */
export const useSubscriptionsUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsUpdate>>, TError,{id: number;data: BodyType<UpdateSubscriptionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionsUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateSubscriptionRequest>},
        TContext
      > => {

      const mutationOptions = getSubscriptionsUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a Subscription.
 */
export const subscriptionsDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/subscriptions/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getSubscriptionsDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionsDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['subscriptionsDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionsDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  subscriptionsDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionsDelete>>>
    
    export type SubscriptionsDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a Subscription.
 */
export const useSubscriptionsDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionsDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getSubscriptionsDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Subscription via dapper.
 */
export const subscriptionsGetDapper = (
    params?: SubscriptionsGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SubscriptionDto>(
      {url: `/api/v1/subscriptions/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSubscriptionsGetDapperQueryKey = (params?: SubscriptionsGetDapperParams,) => {
    return [`/api/v1/subscriptions/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getSubscriptionsGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof subscriptionsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: SubscriptionsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSubscriptionsGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof subscriptionsGetDapper>>> = ({ signal }) => subscriptionsGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof subscriptionsGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SubscriptionsGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof subscriptionsGetDapper>>>
export type SubscriptionsGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useSubscriptionsGetDapper<TData = Awaited<ReturnType<typeof subscriptionsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  SubscriptionsGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionsGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof subscriptionsGetDapper>>,
          TError,
          Awaited<ReturnType<typeof subscriptionsGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSubscriptionsGetDapper<TData = Awaited<ReturnType<typeof subscriptionsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: SubscriptionsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionsGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof subscriptionsGetDapper>>,
          TError,
          Awaited<ReturnType<typeof subscriptionsGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSubscriptionsGetDapper<TData = Awaited<ReturnType<typeof subscriptionsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: SubscriptionsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Subscription via dapper.
 */

export function useSubscriptionsGetDapper<TData = Awaited<ReturnType<typeof subscriptionsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: SubscriptionsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSubscriptionsGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get subscription details from Starlink API.
 */
export const subscriptionsGetStarlinkSubscriptionDetails = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseOfGetSubscriptoinDetailsResponse>(
      {url: `/api/v1/subscriptions/starlink-subscription-details/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getSubscriptionsGetStarlinkSubscriptionDetailsQueryKey = (id?: number,) => {
    return [`/api/v1/subscriptions/starlink-subscription-details/${id}`] as const;
    }

    
export const getSubscriptionsGetStarlinkSubscriptionDetailsQueryOptions = <TData = Awaited<ReturnType<typeof subscriptionsGetStarlinkSubscriptionDetails>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionsGetStarlinkSubscriptionDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSubscriptionsGetStarlinkSubscriptionDetailsQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof subscriptionsGetStarlinkSubscriptionDetails>>> = ({ signal }) => subscriptionsGetStarlinkSubscriptionDetails(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof subscriptionsGetStarlinkSubscriptionDetails>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SubscriptionsGetStarlinkSubscriptionDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof subscriptionsGetStarlinkSubscriptionDetails>>>
export type SubscriptionsGetStarlinkSubscriptionDetailsQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useSubscriptionsGetStarlinkSubscriptionDetails<TData = Awaited<ReturnType<typeof subscriptionsGetStarlinkSubscriptionDetails>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionsGetStarlinkSubscriptionDetails>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof subscriptionsGetStarlinkSubscriptionDetails>>,
          TError,
          Awaited<ReturnType<typeof subscriptionsGetStarlinkSubscriptionDetails>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSubscriptionsGetStarlinkSubscriptionDetails<TData = Awaited<ReturnType<typeof subscriptionsGetStarlinkSubscriptionDetails>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionsGetStarlinkSubscriptionDetails>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof subscriptionsGetStarlinkSubscriptionDetails>>,
          TError,
          Awaited<ReturnType<typeof subscriptionsGetStarlinkSubscriptionDetails>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSubscriptionsGetStarlinkSubscriptionDetails<TData = Awaited<ReturnType<typeof subscriptionsGetStarlinkSubscriptionDetails>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionsGetStarlinkSubscriptionDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get subscription details from Starlink API.
 */

export function useSubscriptionsGetStarlinkSubscriptionDetails<TData = Awaited<ReturnType<typeof subscriptionsGetStarlinkSubscriptionDetails>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionsGetStarlinkSubscriptionDetails>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSubscriptionsGetStarlinkSubscriptionDetailsQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new Subscription.
 */
export const subscriptionsCreate = (
    createSubscriptionRequest: BodyType<CreateSubscriptionRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/subscriptions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createSubscriptionRequest, signal
    },
      options);
    }
  


export const getSubscriptionsCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsCreate>>, TError,{data: BodyType<CreateSubscriptionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionsCreate>>, TError,{data: BodyType<CreateSubscriptionRequest>}, TContext> => {

const mutationKey = ['subscriptionsCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionsCreate>>, {data: BodyType<CreateSubscriptionRequest>}> = (props) => {
          const {data} = props ?? {};

          return  subscriptionsCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionsCreate>>>
    export type SubscriptionsCreateMutationBody = BodyType<CreateSubscriptionRequest>
    export type SubscriptionsCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new Subscription.
 */
export const useSubscriptionsCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsCreate>>, TError,{data: BodyType<CreateSubscriptionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionsCreate>>,
        TError,
        {data: BodyType<CreateSubscriptionRequest>},
        TContext
      > => {

      const mutationOptions = getSubscriptionsCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a Subscription.
 */
export const subscriptionsExport = (
    exportSubscriptionRequest: BodyType<ExportSubscriptionRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/subscriptions/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportSubscriptionRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getSubscriptionsExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsExport>>, TError,{data: BodyType<ExportSubscriptionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionsExport>>, TError,{data: BodyType<ExportSubscriptionRequest>}, TContext> => {

const mutationKey = ['subscriptionsExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionsExport>>, {data: BodyType<ExportSubscriptionRequest>}> = (props) => {
          const {data} = props ?? {};

          return  subscriptionsExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionsExportMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionsExport>>>
    export type SubscriptionsExportMutationBody = BodyType<ExportSubscriptionRequest>
    export type SubscriptionsExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a Subscription.
 */
export const useSubscriptionsExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsExport>>, TError,{data: BodyType<ExportSubscriptionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionsExport>>,
        TError,
        {data: BodyType<ExportSubscriptionRequest>},
        TContext
      > => {

      const mutationOptions = getSubscriptionsExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Deactivate a Subscription.
 */
export const subscriptionsDeactivate = (
    deactivateSubscriptionRequest: BodyType<DeactivateSubscriptionRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<boolean>(
      {url: `/api/v1/subscriptions/deactivate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: deactivateSubscriptionRequest, signal
    },
      options);
    }
  


export const getSubscriptionsDeactivateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsDeactivate>>, TError,{data: BodyType<DeactivateSubscriptionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionsDeactivate>>, TError,{data: BodyType<DeactivateSubscriptionRequest>}, TContext> => {

const mutationKey = ['subscriptionsDeactivate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionsDeactivate>>, {data: BodyType<DeactivateSubscriptionRequest>}> = (props) => {
          const {data} = props ?? {};

          return  subscriptionsDeactivate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionsDeactivateMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionsDeactivate>>>
    export type SubscriptionsDeactivateMutationBody = BodyType<DeactivateSubscriptionRequest>
    export type SubscriptionsDeactivateMutationError = ErrorType<unknown>

    /**
 * @summary Deactivate a Subscription.
 */
export const useSubscriptionsDeactivate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsDeactivate>>, TError,{data: BodyType<DeactivateSubscriptionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionsDeactivate>>,
        TError,
        {data: BodyType<DeactivateSubscriptionRequest>},
        TContext
      > => {

      const mutationOptions = getSubscriptionsDeactivateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary AutoDeactivateExpiredSubscription
 */
export const subscriptionsAutoDeactivateExpiredSubscription = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<boolean>(
      {url: `/api/v1/subscriptions/autodeactivateexpiredsubscription`, method: 'POST', signal
    },
      options);
    }
  


export const getSubscriptionsAutoDeactivateExpiredSubscriptionMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsAutoDeactivateExpiredSubscription>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionsAutoDeactivateExpiredSubscription>>, TError,void, TContext> => {

const mutationKey = ['subscriptionsAutoDeactivateExpiredSubscription'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionsAutoDeactivateExpiredSubscription>>, void> = () => {
          

          return  subscriptionsAutoDeactivateExpiredSubscription(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionsAutoDeactivateExpiredSubscriptionMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionsAutoDeactivateExpiredSubscription>>>
    
    export type SubscriptionsAutoDeactivateExpiredSubscriptionMutationError = ErrorType<unknown>

    /**
 * @summary AutoDeactivateExpiredSubscription
 */
export const useSubscriptionsAutoDeactivateExpiredSubscription = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsAutoDeactivateExpiredSubscription>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionsAutoDeactivateExpiredSubscription>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getSubscriptionsAutoDeactivateExpiredSubscriptionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Resume a Subscription.
 */
export const subscriptionsResume = (
    resumeSubscriptionRequest: BodyType<ResumeSubscriptionRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<boolean>(
      {url: `/api/v1/subscriptions/resume`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: resumeSubscriptionRequest, signal
    },
      options);
    }
  


export const getSubscriptionsResumeMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsResume>>, TError,{data: BodyType<ResumeSubscriptionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionsResume>>, TError,{data: BodyType<ResumeSubscriptionRequest>}, TContext> => {

const mutationKey = ['subscriptionsResume'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionsResume>>, {data: BodyType<ResumeSubscriptionRequest>}> = (props) => {
          const {data} = props ?? {};

          return  subscriptionsResume(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionsResumeMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionsResume>>>
    export type SubscriptionsResumeMutationBody = BodyType<ResumeSubscriptionRequest>
    export type SubscriptionsResumeMutationError = ErrorType<unknown>

    /**
 * @summary Resume a Subscription.
 */
export const useSubscriptionsResume = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsResume>>, TError,{data: BodyType<ResumeSubscriptionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionsResume>>,
        TError,
        {data: BodyType<ResumeSubscriptionRequest>},
        TContext
      > => {

      const mutationOptions = getSubscriptionsResumeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Update the nickname of a subscription in Starlink.
 */
export const subscriptionsUpdateNickname = (
    updateSubscriptionNicknameRequest: BodyType<UpdateSubscriptionNicknameRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<ApiResponseOfBoolean>(
      {url: `/api/v1/subscriptions/update-nickname`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateSubscriptionNicknameRequest
    },
      options);
    }
  


export const getSubscriptionsUpdateNicknameMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsUpdateNickname>>, TError,{data: BodyType<UpdateSubscriptionNicknameRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionsUpdateNickname>>, TError,{data: BodyType<UpdateSubscriptionNicknameRequest>}, TContext> => {

const mutationKey = ['subscriptionsUpdateNickname'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionsUpdateNickname>>, {data: BodyType<UpdateSubscriptionNicknameRequest>}> = (props) => {
          const {data} = props ?? {};

          return  subscriptionsUpdateNickname(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionsUpdateNicknameMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionsUpdateNickname>>>
    export type SubscriptionsUpdateNicknameMutationBody = BodyType<UpdateSubscriptionNicknameRequest>
    export type SubscriptionsUpdateNicknameMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update the nickname of a subscription in Starlink.
 */
export const useSubscriptionsUpdateNickname = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsUpdateNickname>>, TError,{data: BodyType<UpdateSubscriptionNicknameRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionsUpdateNickname>>,
        TError,
        {data: BodyType<UpdateSubscriptionNicknameRequest>},
        TContext
      > => {

      const mutationOptions = getSubscriptionsUpdateNicknameMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get billing cycle data with filters.
 */
export const subscriptionsGetBillingCycle = (
    getBillingCycleRequest: BodyType<GetBillingCycleRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseOfServiceLineDataUsageForBillingCyclesPaginated>(
      {url: `/api/v1/subscriptions/billing-cycle`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: getBillingCycleRequest, signal
    },
      options);
    }
  


export const getSubscriptionsGetBillingCycleMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsGetBillingCycle>>, TError,{data: BodyType<GetBillingCycleRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionsGetBillingCycle>>, TError,{data: BodyType<GetBillingCycleRequest>}, TContext> => {

const mutationKey = ['subscriptionsGetBillingCycle'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionsGetBillingCycle>>, {data: BodyType<GetBillingCycleRequest>}> = (props) => {
          const {data} = props ?? {};

          return  subscriptionsGetBillingCycle(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionsGetBillingCycleMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionsGetBillingCycle>>>
    export type SubscriptionsGetBillingCycleMutationBody = BodyType<GetBillingCycleRequest>
    export type SubscriptionsGetBillingCycleMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Get billing cycle data with filters.
 */
export const useSubscriptionsGetBillingCycle = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsGetBillingCycle>>, TError,{data: BodyType<GetBillingCycleRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionsGetBillingCycle>>,
        TError,
        {data: BodyType<GetBillingCycleRequest>},
        TContext
      > => {

      const mutationOptions = getSubscriptionsGetBillingCycleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Set Public IP for a Subscription.
 */
export const subscriptionsSetPublicIp = (
    setPublicIpRequest: BodyType<SetPublicIpRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseOfBoolean>(
      {url: `/api/v1/subscriptions/set-public-ip`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: setPublicIpRequest, signal
    },
      options);
    }
  


export const getSubscriptionsSetPublicIpMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsSetPublicIp>>, TError,{data: BodyType<SetPublicIpRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionsSetPublicIp>>, TError,{data: BodyType<SetPublicIpRequest>}, TContext> => {

const mutationKey = ['subscriptionsSetPublicIp'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionsSetPublicIp>>, {data: BodyType<SetPublicIpRequest>}> = (props) => {
          const {data} = props ?? {};

          return  subscriptionsSetPublicIp(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionsSetPublicIpMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionsSetPublicIp>>>
    export type SubscriptionsSetPublicIpMutationBody = BodyType<SetPublicIpRequest>
    export type SubscriptionsSetPublicIpMutationError = ErrorType<unknown>

    /**
 * @summary Set Public IP for a Subscription.
 */
export const useSubscriptionsSetPublicIp = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionsSetPublicIp>>, TError,{data: BodyType<SetPublicIpRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionsSetPublicIp>>,
        TError,
        {data: BodyType<SetPublicIpRequest>},
        TContext
      > => {

      const mutationOptions = getSubscriptionsSetPublicIpMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    