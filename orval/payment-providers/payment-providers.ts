/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ChangeApiKeyResponse,
  CreatePaymentProviderRequest,
  ErrorResult,
  ExportPaymentProviderRequest,
  HttpValidationProblemDetails,
  PaginationResponseOfPaymentProviderDto,
  PaymentProviderDto,
  PaymentProvidersChangeApiKeyParams,
  PaymentProvidersGetDapperParams,
  SearchPaymentProviderRequest,
  UpdatePaymentProviderRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search PaymentProvider using available filters.
 */
export const paymentProvidersSearch = (
    searchPaymentProviderRequest: BodyType<SearchPaymentProviderRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfPaymentProviderDto>(
      {url: `/api/v1/paymentproviders/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchPaymentProviderRequest, signal
    },
      options);
    }
  


export const getPaymentProvidersSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentProvidersSearch>>, TError,{data: BodyType<SearchPaymentProviderRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof paymentProvidersSearch>>, TError,{data: BodyType<SearchPaymentProviderRequest>}, TContext> => {

const mutationKey = ['paymentProvidersSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof paymentProvidersSearch>>, {data: BodyType<SearchPaymentProviderRequest>}> = (props) => {
          const {data} = props ?? {};

          return  paymentProvidersSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PaymentProvidersSearchMutationResult = NonNullable<Awaited<ReturnType<typeof paymentProvidersSearch>>>
    export type PaymentProvidersSearchMutationBody = BodyType<SearchPaymentProviderRequest>
    export type PaymentProvidersSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search PaymentProvider using available filters.
 */
export const usePaymentProvidersSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentProvidersSearch>>, TError,{data: BodyType<SearchPaymentProviderRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof paymentProvidersSearch>>,
        TError,
        {data: BodyType<SearchPaymentProviderRequest>},
        TContext
      > => {

      const mutationOptions = getPaymentProvidersSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary change PaymentProvider apikey.
 */
export const paymentProvidersChangeApiKey = (
    params?: PaymentProvidersChangeApiKeyParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ChangeApiKeyResponse>(
      {url: `/api/v1/paymentproviders/change`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getPaymentProvidersChangeApiKeyQueryKey = (params?: PaymentProvidersChangeApiKeyParams,) => {
    return [`/api/v1/paymentproviders/change`, ...(params ? [params]: [])] as const;
    }

    
export const getPaymentProvidersChangeApiKeyQueryOptions = <TData = Awaited<ReturnType<typeof paymentProvidersChangeApiKey>>, TError = ErrorType<unknown>>(params?: PaymentProvidersChangeApiKeyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentProvidersChangeApiKey>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPaymentProvidersChangeApiKeyQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof paymentProvidersChangeApiKey>>> = ({ signal }) => paymentProvidersChangeApiKey(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof paymentProvidersChangeApiKey>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PaymentProvidersChangeApiKeyQueryResult = NonNullable<Awaited<ReturnType<typeof paymentProvidersChangeApiKey>>>
export type PaymentProvidersChangeApiKeyQueryError = ErrorType<unknown>


export function usePaymentProvidersChangeApiKey<TData = Awaited<ReturnType<typeof paymentProvidersChangeApiKey>>, TError = ErrorType<unknown>>(
 params: undefined |  PaymentProvidersChangeApiKeyParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentProvidersChangeApiKey>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentProvidersChangeApiKey>>,
          TError,
          Awaited<ReturnType<typeof paymentProvidersChangeApiKey>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePaymentProvidersChangeApiKey<TData = Awaited<ReturnType<typeof paymentProvidersChangeApiKey>>, TError = ErrorType<unknown>>(
 params?: PaymentProvidersChangeApiKeyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentProvidersChangeApiKey>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentProvidersChangeApiKey>>,
          TError,
          Awaited<ReturnType<typeof paymentProvidersChangeApiKey>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePaymentProvidersChangeApiKey<TData = Awaited<ReturnType<typeof paymentProvidersChangeApiKey>>, TError = ErrorType<unknown>>(
 params?: PaymentProvidersChangeApiKeyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentProvidersChangeApiKey>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary change PaymentProvider apikey.
 */

export function usePaymentProvidersChangeApiKey<TData = Awaited<ReturnType<typeof paymentProvidersChangeApiKey>>, TError = ErrorType<unknown>>(
 params?: PaymentProvidersChangeApiKeyParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentProvidersChangeApiKey>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPaymentProvidersChangeApiKeyQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get PaymentProviders details.
 */
export const paymentProvidersGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaymentProviderDto>(
      {url: `/api/v1/paymentproviders/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getPaymentProvidersGetQueryKey = (id?: number,) => {
    return [`/api/v1/paymentproviders/${id}`] as const;
    }

    
export const getPaymentProvidersGetQueryOptions = <TData = Awaited<ReturnType<typeof paymentProvidersGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentProvidersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPaymentProvidersGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof paymentProvidersGet>>> = ({ signal }) => paymentProvidersGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof paymentProvidersGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PaymentProvidersGetQueryResult = NonNullable<Awaited<ReturnType<typeof paymentProvidersGet>>>
export type PaymentProvidersGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function usePaymentProvidersGet<TData = Awaited<ReturnType<typeof paymentProvidersGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentProvidersGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentProvidersGet>>,
          TError,
          Awaited<ReturnType<typeof paymentProvidersGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePaymentProvidersGet<TData = Awaited<ReturnType<typeof paymentProvidersGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentProvidersGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentProvidersGet>>,
          TError,
          Awaited<ReturnType<typeof paymentProvidersGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePaymentProvidersGet<TData = Awaited<ReturnType<typeof paymentProvidersGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentProvidersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get PaymentProviders details.
 */

export function usePaymentProvidersGet<TData = Awaited<ReturnType<typeof paymentProvidersGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentProvidersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPaymentProvidersGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a PaymentProvider.
 */
export const paymentProvidersUpdate = (
    id: number,
    updatePaymentProviderRequest: BodyType<UpdatePaymentProviderRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/paymentproviders/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updatePaymentProviderRequest
    },
      options);
    }
  


export const getPaymentProvidersUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentProvidersUpdate>>, TError,{id: number;data: BodyType<UpdatePaymentProviderRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof paymentProvidersUpdate>>, TError,{id: number;data: BodyType<UpdatePaymentProviderRequest>}, TContext> => {

const mutationKey = ['paymentProvidersUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof paymentProvidersUpdate>>, {id: number;data: BodyType<UpdatePaymentProviderRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  paymentProvidersUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PaymentProvidersUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof paymentProvidersUpdate>>>
    export type PaymentProvidersUpdateMutationBody = BodyType<UpdatePaymentProviderRequest>
    export type PaymentProvidersUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a PaymentProvider.
 */
export const usePaymentProvidersUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentProvidersUpdate>>, TError,{id: number;data: BodyType<UpdatePaymentProviderRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof paymentProvidersUpdate>>,
        TError,
        {id: number;data: BodyType<UpdatePaymentProviderRequest>},
        TContext
      > => {

      const mutationOptions = getPaymentProvidersUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a PaymentProvider.
 */
export const paymentProvidersDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/paymentproviders/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getPaymentProvidersDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentProvidersDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof paymentProvidersDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['paymentProvidersDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof paymentProvidersDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  paymentProvidersDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PaymentProvidersDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof paymentProvidersDelete>>>
    
    export type PaymentProvidersDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a PaymentProvider.
 */
export const usePaymentProvidersDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentProvidersDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof paymentProvidersDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPaymentProvidersDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get PaymentProvider via dapper.
 */
export const paymentProvidersGetDapper = (
    params?: PaymentProvidersGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaymentProviderDto>(
      {url: `/api/v1/paymentproviders/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getPaymentProvidersGetDapperQueryKey = (params?: PaymentProvidersGetDapperParams,) => {
    return [`/api/v1/paymentproviders/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getPaymentProvidersGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof paymentProvidersGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: PaymentProvidersGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentProvidersGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPaymentProvidersGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof paymentProvidersGetDapper>>> = ({ signal }) => paymentProvidersGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof paymentProvidersGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PaymentProvidersGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof paymentProvidersGetDapper>>>
export type PaymentProvidersGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function usePaymentProvidersGetDapper<TData = Awaited<ReturnType<typeof paymentProvidersGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  PaymentProvidersGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentProvidersGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentProvidersGetDapper>>,
          TError,
          Awaited<ReturnType<typeof paymentProvidersGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePaymentProvidersGetDapper<TData = Awaited<ReturnType<typeof paymentProvidersGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: PaymentProvidersGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentProvidersGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentProvidersGetDapper>>,
          TError,
          Awaited<ReturnType<typeof paymentProvidersGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePaymentProvidersGetDapper<TData = Awaited<ReturnType<typeof paymentProvidersGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: PaymentProvidersGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentProvidersGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get PaymentProvider via dapper.
 */

export function usePaymentProvidersGetDapper<TData = Awaited<ReturnType<typeof paymentProvidersGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: PaymentProvidersGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentProvidersGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPaymentProvidersGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new PaymentProvider.
 */
export const paymentProvidersCreate = (
    createPaymentProviderRequest: BodyType<CreatePaymentProviderRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ChangeApiKeyResponse>(
      {url: `/api/v1/paymentproviders`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createPaymentProviderRequest, signal
    },
      options);
    }
  


export const getPaymentProvidersCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentProvidersCreate>>, TError,{data: BodyType<CreatePaymentProviderRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof paymentProvidersCreate>>, TError,{data: BodyType<CreatePaymentProviderRequest>}, TContext> => {

const mutationKey = ['paymentProvidersCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof paymentProvidersCreate>>, {data: BodyType<CreatePaymentProviderRequest>}> = (props) => {
          const {data} = props ?? {};

          return  paymentProvidersCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PaymentProvidersCreateMutationResult = NonNullable<Awaited<ReturnType<typeof paymentProvidersCreate>>>
    export type PaymentProvidersCreateMutationBody = BodyType<CreatePaymentProviderRequest>
    export type PaymentProvidersCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new PaymentProvider.
 */
export const usePaymentProvidersCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentProvidersCreate>>, TError,{data: BodyType<CreatePaymentProviderRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof paymentProvidersCreate>>,
        TError,
        {data: BodyType<CreatePaymentProviderRequest>},
        TContext
      > => {

      const mutationOptions = getPaymentProvidersCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a PaymentProvider.
 */
export const paymentProvidersExport = (
    exportPaymentProviderRequest: BodyType<ExportPaymentProviderRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/paymentproviders/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportPaymentProviderRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getPaymentProvidersExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentProvidersExport>>, TError,{data: BodyType<ExportPaymentProviderRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof paymentProvidersExport>>, TError,{data: BodyType<ExportPaymentProviderRequest>}, TContext> => {

const mutationKey = ['paymentProvidersExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof paymentProvidersExport>>, {data: BodyType<ExportPaymentProviderRequest>}> = (props) => {
          const {data} = props ?? {};

          return  paymentProvidersExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PaymentProvidersExportMutationResult = NonNullable<Awaited<ReturnType<typeof paymentProvidersExport>>>
    export type PaymentProvidersExportMutationBody = BodyType<ExportPaymentProviderRequest>
    export type PaymentProvidersExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a PaymentProvider.
 */
export const usePaymentProvidersExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentProvidersExport>>, TError,{data: BodyType<ExportPaymentProviderRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof paymentProvidersExport>>,
        TError,
        {data: BodyType<ExportPaymentProviderRequest>},
        TContext
      > => {

      const mutationOptions = getPaymentProvidersExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    