/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  ErrorResult,
  HttpValidationProblemDetails,
  OtpLoginRequest,
  RefreshTokenRequest,
  TokenRequest,
  TokenResponse
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Request an access token using credentials.
 */
export const tokensGetToken = (
    tokenRequest: BodyType<TokenRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TokenResponse>(
      {url: `/api/tokens`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tokenRequest, signal
    },
      options);
    }
  


export const getTokensGetTokenMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tokensGetToken>>, TError,{data: BodyType<TokenRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof tokensGetToken>>, TError,{data: BodyType<TokenRequest>}, TContext> => {

const mutationKey = ['tokensGetToken'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tokensGetToken>>, {data: BodyType<TokenRequest>}> = (props) => {
          const {data} = props ?? {};

          return  tokensGetToken(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TokensGetTokenMutationResult = NonNullable<Awaited<ReturnType<typeof tokensGetToken>>>
    export type TokensGetTokenMutationBody = BodyType<TokenRequest>
    export type TokensGetTokenMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Request an access token using credentials.
 */
export const useTokensGetToken = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tokensGetToken>>, TError,{data: BodyType<TokenRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof tokensGetToken>>,
        TError,
        {data: BodyType<TokenRequest>},
        TContext
      > => {

      const mutationOptions = getTokensGetTokenMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Request an OTP for customer login.
 */
export const tokensRequestOtpForCustomer = (
    phoneNumber: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/tokens/request-otp-customer/${phoneNumber}`, method: 'POST',
        responseType: 'blob', signal
    },
      options);
    }
  


export const getTokensRequestOtpForCustomerMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tokensRequestOtpForCustomer>>, TError,{phoneNumber: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof tokensRequestOtpForCustomer>>, TError,{phoneNumber: string}, TContext> => {

const mutationKey = ['tokensRequestOtpForCustomer'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tokensRequestOtpForCustomer>>, {phoneNumber: string}> = (props) => {
          const {phoneNumber} = props ?? {};

          return  tokensRequestOtpForCustomer(phoneNumber,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TokensRequestOtpForCustomerMutationResult = NonNullable<Awaited<ReturnType<typeof tokensRequestOtpForCustomer>>>
    
    export type TokensRequestOtpForCustomerMutationError = ErrorType<unknown>

    /**
 * @summary Request an OTP for customer login.
 */
export const useTokensRequestOtpForCustomer = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tokensRequestOtpForCustomer>>, TError,{phoneNumber: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof tokensRequestOtpForCustomer>>,
        TError,
        {phoneNumber: string},
        TContext
      > => {

      const mutationOptions = getTokensRequestOtpForCustomerMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Login customer using phone number and OTP.
 */
export const tokensLoginWithOtpForCustomer = (
    otpLoginRequest: BodyType<OtpLoginRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TokenResponse>(
      {url: `/api/tokens/login-otp-customer`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: otpLoginRequest, signal
    },
      options);
    }
  


export const getTokensLoginWithOtpForCustomerMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tokensLoginWithOtpForCustomer>>, TError,{data: BodyType<OtpLoginRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof tokensLoginWithOtpForCustomer>>, TError,{data: BodyType<OtpLoginRequest>}, TContext> => {

const mutationKey = ['tokensLoginWithOtpForCustomer'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tokensLoginWithOtpForCustomer>>, {data: BodyType<OtpLoginRequest>}> = (props) => {
          const {data} = props ?? {};

          return  tokensLoginWithOtpForCustomer(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TokensLoginWithOtpForCustomerMutationResult = NonNullable<Awaited<ReturnType<typeof tokensLoginWithOtpForCustomer>>>
    export type TokensLoginWithOtpForCustomerMutationBody = BodyType<OtpLoginRequest>
    export type TokensLoginWithOtpForCustomerMutationError = ErrorType<unknown>

    /**
 * @summary Login customer using phone number and OTP.
 */
export const useTokensLoginWithOtpForCustomer = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tokensLoginWithOtpForCustomer>>, TError,{data: BodyType<OtpLoginRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof tokensLoginWithOtpForCustomer>>,
        TError,
        {data: BodyType<OtpLoginRequest>},
        TContext
      > => {

      const mutationOptions = getTokensLoginWithOtpForCustomerMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Request an access token using a refresh token.
 */
export const tokensRefresh = (
    refreshTokenRequest: BodyType<RefreshTokenRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TokenResponse>(
      {url: `/api/tokens/refresh`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: refreshTokenRequest, signal
    },
      options);
    }
  


export const getTokensRefreshMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tokensRefresh>>, TError,{data: BodyType<RefreshTokenRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof tokensRefresh>>, TError,{data: BodyType<RefreshTokenRequest>}, TContext> => {

const mutationKey = ['tokensRefresh'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tokensRefresh>>, {data: BodyType<RefreshTokenRequest>}> = (props) => {
          const {data} = props ?? {};

          return  tokensRefresh(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TokensRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof tokensRefresh>>>
    export type TokensRefreshMutationBody = BodyType<RefreshTokenRequest>
    export type TokensRefreshMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Request an access token using a refresh token.
 */
export const useTokensRefresh = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tokensRefresh>>, TError,{data: BodyType<RefreshTokenRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof tokensRefresh>>,
        TError,
        {data: BodyType<RefreshTokenRequest>},
        TContext
      > => {

      const mutationOptions = getTokensRefreshMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    