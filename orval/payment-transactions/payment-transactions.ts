/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreatePaymentTransactionRequest,
  ErrorResult,
  HttpValidationProblemDetails,
  PaginationResponseOfPaymentTransactionDto,
  PaymentTransactionDto,
  PaymentTransactionsGetDapperParams,
  SearchPaymentTransactionRequest,
  UpdatePaymentTransactionRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search PaymentTransaction using available filters.
 */
export const paymentTransactionsSearch = (
    searchPaymentTransactionRequest: BodyType<SearchPaymentTransactionRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfPaymentTransactionDto>(
      {url: `/api/v1/paymenttransactions/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchPaymentTransactionRequest, signal
    },
      options);
    }
  


export const getPaymentTransactionsSearchMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentTransactionsSearch>>, TError,{data: BodyType<SearchPaymentTransactionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof paymentTransactionsSearch>>, TError,{data: BodyType<SearchPaymentTransactionRequest>}, TContext> => {

const mutationKey = ['paymentTransactionsSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof paymentTransactionsSearch>>, {data: BodyType<SearchPaymentTransactionRequest>}> = (props) => {
          const {data} = props ?? {};

          return  paymentTransactionsSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PaymentTransactionsSearchMutationResult = NonNullable<Awaited<ReturnType<typeof paymentTransactionsSearch>>>
    export type PaymentTransactionsSearchMutationBody = BodyType<SearchPaymentTransactionRequest>
    export type PaymentTransactionsSearchMutationError = ErrorType<unknown>

    /**
 * @summary Search PaymentTransaction using available filters.
 */
export const usePaymentTransactionsSearch = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentTransactionsSearch>>, TError,{data: BodyType<SearchPaymentTransactionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof paymentTransactionsSearch>>,
        TError,
        {data: BodyType<SearchPaymentTransactionRequest>},
        TContext
      > => {

      const mutationOptions = getPaymentTransactionsSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get PaymentTransaction details.
 */
export const paymentTransactionsGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaymentTransactionDto>(
      {url: `/api/v1/paymenttransactions/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getPaymentTransactionsGetQueryKey = (id?: number,) => {
    return [`/api/v1/paymenttransactions/${id}`] as const;
    }

    
export const getPaymentTransactionsGetQueryOptions = <TData = Awaited<ReturnType<typeof paymentTransactionsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentTransactionsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPaymentTransactionsGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof paymentTransactionsGet>>> = ({ signal }) => paymentTransactionsGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof paymentTransactionsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PaymentTransactionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof paymentTransactionsGet>>>
export type PaymentTransactionsGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function usePaymentTransactionsGet<TData = Awaited<ReturnType<typeof paymentTransactionsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentTransactionsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentTransactionsGet>>,
          TError,
          Awaited<ReturnType<typeof paymentTransactionsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePaymentTransactionsGet<TData = Awaited<ReturnType<typeof paymentTransactionsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentTransactionsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentTransactionsGet>>,
          TError,
          Awaited<ReturnType<typeof paymentTransactionsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePaymentTransactionsGet<TData = Awaited<ReturnType<typeof paymentTransactionsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentTransactionsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get PaymentTransaction details.
 */

export function usePaymentTransactionsGet<TData = Awaited<ReturnType<typeof paymentTransactionsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentTransactionsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPaymentTransactionsGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a PaymentTransaction.
 */
export const paymentTransactionsUpdate = (
    id: number,
    updatePaymentTransactionRequest: BodyType<UpdatePaymentTransactionRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/paymenttransactions/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updatePaymentTransactionRequest
    },
      options);
    }
  


export const getPaymentTransactionsUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentTransactionsUpdate>>, TError,{id: number;data: BodyType<UpdatePaymentTransactionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof paymentTransactionsUpdate>>, TError,{id: number;data: BodyType<UpdatePaymentTransactionRequest>}, TContext> => {

const mutationKey = ['paymentTransactionsUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof paymentTransactionsUpdate>>, {id: number;data: BodyType<UpdatePaymentTransactionRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  paymentTransactionsUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PaymentTransactionsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof paymentTransactionsUpdate>>>
    export type PaymentTransactionsUpdateMutationBody = BodyType<UpdatePaymentTransactionRequest>
    export type PaymentTransactionsUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a PaymentTransaction.
 */
export const usePaymentTransactionsUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentTransactionsUpdate>>, TError,{id: number;data: BodyType<UpdatePaymentTransactionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof paymentTransactionsUpdate>>,
        TError,
        {id: number;data: BodyType<UpdatePaymentTransactionRequest>},
        TContext
      > => {

      const mutationOptions = getPaymentTransactionsUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a PaymentTransaction.
 */
export const paymentTransactionsDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/paymenttransactions/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getPaymentTransactionsDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentTransactionsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof paymentTransactionsDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['paymentTransactionsDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof paymentTransactionsDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  paymentTransactionsDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PaymentTransactionsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof paymentTransactionsDelete>>>
    
    export type PaymentTransactionsDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a PaymentTransaction.
 */
export const usePaymentTransactionsDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentTransactionsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof paymentTransactionsDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getPaymentTransactionsDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get PaymentTransaction via dapper.
 */
export const paymentTransactionsGetDapper = (
    params?: PaymentTransactionsGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaymentTransactionDto>(
      {url: `/api/v1/paymenttransactions/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getPaymentTransactionsGetDapperQueryKey = (params?: PaymentTransactionsGetDapperParams,) => {
    return [`/api/v1/paymenttransactions/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getPaymentTransactionsGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof paymentTransactionsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: PaymentTransactionsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentTransactionsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPaymentTransactionsGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof paymentTransactionsGetDapper>>> = ({ signal }) => paymentTransactionsGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof paymentTransactionsGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PaymentTransactionsGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof paymentTransactionsGetDapper>>>
export type PaymentTransactionsGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function usePaymentTransactionsGetDapper<TData = Awaited<ReturnType<typeof paymentTransactionsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  PaymentTransactionsGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentTransactionsGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentTransactionsGetDapper>>,
          TError,
          Awaited<ReturnType<typeof paymentTransactionsGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePaymentTransactionsGetDapper<TData = Awaited<ReturnType<typeof paymentTransactionsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: PaymentTransactionsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentTransactionsGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentTransactionsGetDapper>>,
          TError,
          Awaited<ReturnType<typeof paymentTransactionsGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePaymentTransactionsGetDapper<TData = Awaited<ReturnType<typeof paymentTransactionsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: PaymentTransactionsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentTransactionsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get PaymentTransaction via dapper.
 */

export function usePaymentTransactionsGetDapper<TData = Awaited<ReturnType<typeof paymentTransactionsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: PaymentTransactionsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentTransactionsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPaymentTransactionsGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new PaymentTransaction.
 */
export const paymentTransactionsCreate = (
    createPaymentTransactionRequest: BodyType<CreatePaymentTransactionRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/paymenttransactions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createPaymentTransactionRequest, signal
    },
      options);
    }
  


export const getPaymentTransactionsCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentTransactionsCreate>>, TError,{data: BodyType<CreatePaymentTransactionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof paymentTransactionsCreate>>, TError,{data: BodyType<CreatePaymentTransactionRequest>}, TContext> => {

const mutationKey = ['paymentTransactionsCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof paymentTransactionsCreate>>, {data: BodyType<CreatePaymentTransactionRequest>}> = (props) => {
          const {data} = props ?? {};

          return  paymentTransactionsCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PaymentTransactionsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof paymentTransactionsCreate>>>
    export type PaymentTransactionsCreateMutationBody = BodyType<CreatePaymentTransactionRequest>
    export type PaymentTransactionsCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new PaymentTransaction.
 */
export const usePaymentTransactionsCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentTransactionsCreate>>, TError,{data: BodyType<CreatePaymentTransactionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof paymentTransactionsCreate>>,
        TError,
        {data: BodyType<CreatePaymentTransactionRequest>},
        TContext
      > => {

      const mutationOptions = getPaymentTransactionsCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a PaymentTransaction.
 */
export const paymentTransactionsExport = (
    searchPaymentTransactionRequest: BodyType<SearchPaymentTransactionRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/paymenttransactions/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchPaymentTransactionRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getPaymentTransactionsExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentTransactionsExport>>, TError,{data: BodyType<SearchPaymentTransactionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof paymentTransactionsExport>>, TError,{data: BodyType<SearchPaymentTransactionRequest>}, TContext> => {

const mutationKey = ['paymentTransactionsExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof paymentTransactionsExport>>, {data: BodyType<SearchPaymentTransactionRequest>}> = (props) => {
          const {data} = props ?? {};

          return  paymentTransactionsExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PaymentTransactionsExportMutationResult = NonNullable<Awaited<ReturnType<typeof paymentTransactionsExport>>>
    export type PaymentTransactionsExportMutationBody = BodyType<SearchPaymentTransactionRequest>
    export type PaymentTransactionsExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a PaymentTransaction.
 */
export const usePaymentTransactionsExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentTransactionsExport>>, TError,{data: BodyType<SearchPaymentTransactionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof paymentTransactionsExport>>,
        TError,
        {data: BodyType<SearchPaymentTransactionRequest>},
        TContext
      > => {

      const mutationOptions = getPaymentTransactionsExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    