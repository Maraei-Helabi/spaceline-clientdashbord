/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  ErrorResult,
  HttpValidationProblemDetails,
  PaginationResponseOfStockDto,
  SearchStockRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search Stock using available filters.
 */
export const stocksSearch = (
    searchStockRequest: BodyType<SearchStockRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfStockDto>(
      {url: `/api/v1/stocks/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchStockRequest, signal
    },
      options);
    }
  


export const getStocksSearchMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stocksSearch>>, TError,{data: BodyType<SearchStockRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof stocksSearch>>, TError,{data: BodyType<SearchStockRequest>}, TContext> => {

const mutationKey = ['stocksSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stocksSearch>>, {data: BodyType<SearchStockRequest>}> = (props) => {
          const {data} = props ?? {};

          return  stocksSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type StocksSearchMutationResult = NonNullable<Awaited<ReturnType<typeof stocksSearch>>>
    export type StocksSearchMutationBody = BodyType<SearchStockRequest>
    export type StocksSearchMutationError = ErrorType<unknown>

    /**
 * @summary Search Stock using available filters.
 */
export const useStocksSearch = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stocksSearch>>, TError,{data: BodyType<SearchStockRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof stocksSearch>>,
        TError,
        {data: BodyType<SearchStockRequest>},
        TContext
      > => {

      const mutationOptions = getStocksSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a Stock.
 */
export const stocksDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/stocks/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getStocksDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stocksDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof stocksDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['stocksDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stocksDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  stocksDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type StocksDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof stocksDelete>>>
    
    export type StocksDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a Stock.
 */
export const useStocksDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stocksDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof stocksDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getStocksDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a Stock.
 */
export const stocksExport = (
    searchStockRequest: BodyType<SearchStockRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/stocks/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchStockRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getStocksExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stocksExport>>, TError,{data: BodyType<SearchStockRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof stocksExport>>, TError,{data: BodyType<SearchStockRequest>}, TContext> => {

const mutationKey = ['stocksExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof stocksExport>>, {data: BodyType<SearchStockRequest>}> = (props) => {
          const {data} = props ?? {};

          return  stocksExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type StocksExportMutationResult = NonNullable<Awaited<ReturnType<typeof stocksExport>>>
    export type StocksExportMutationBody = BodyType<SearchStockRequest>
    export type StocksExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a Stock.
 */
export const useStocksExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof stocksExport>>, TError,{data: BodyType<SearchStockRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof stocksExport>>,
        TError,
        {data: BodyType<SearchStockRequest>},
        TContext
      > => {

      const mutationOptions = getStocksExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    