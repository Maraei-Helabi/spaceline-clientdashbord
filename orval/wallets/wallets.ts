/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateWalletRequest,
  ErrorResult,
  ExportWalletRequest,
  HttpValidationProblemDetails,
  PaginationResponseOfWalletDto,
  SearchWalletRequest,
  UpdateWalletRequest,
  WalletDto,
  WalletsGetDapperParams
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search Wallet using available filters.
 */
export const walletsSearch = (
    searchWalletRequest: BodyType<SearchWalletRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfWalletDto>(
      {url: `/api/v1/wallets/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchWalletRequest, signal
    },
      options);
    }
  


export const getWalletsSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof walletsSearch>>, TError,{data: BodyType<SearchWalletRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof walletsSearch>>, TError,{data: BodyType<SearchWalletRequest>}, TContext> => {

const mutationKey = ['walletsSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof walletsSearch>>, {data: BodyType<SearchWalletRequest>}> = (props) => {
          const {data} = props ?? {};

          return  walletsSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type WalletsSearchMutationResult = NonNullable<Awaited<ReturnType<typeof walletsSearch>>>
    export type WalletsSearchMutationBody = BodyType<SearchWalletRequest>
    export type WalletsSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search Wallet using available filters.
 */
export const useWalletsSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof walletsSearch>>, TError,{data: BodyType<SearchWalletRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof walletsSearch>>,
        TError,
        {data: BodyType<SearchWalletRequest>},
        TContext
      > => {

      const mutationOptions = getWalletsSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Wallet details.
 */
export const walletsGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<WalletDto>(
      {url: `/api/v1/wallets/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getWalletsGetQueryKey = (id?: number,) => {
    return [`/api/v1/wallets/${id}`] as const;
    }

    
export const getWalletsGetQueryOptions = <TData = Awaited<ReturnType<typeof walletsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof walletsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getWalletsGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof walletsGet>>> = ({ signal }) => walletsGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof walletsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type WalletsGetQueryResult = NonNullable<Awaited<ReturnType<typeof walletsGet>>>
export type WalletsGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useWalletsGet<TData = Awaited<ReturnType<typeof walletsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof walletsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletsGet>>,
          TError,
          Awaited<ReturnType<typeof walletsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useWalletsGet<TData = Awaited<ReturnType<typeof walletsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof walletsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletsGet>>,
          TError,
          Awaited<ReturnType<typeof walletsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useWalletsGet<TData = Awaited<ReturnType<typeof walletsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof walletsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Wallet details.
 */

export function useWalletsGet<TData = Awaited<ReturnType<typeof walletsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof walletsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getWalletsGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a Wallet.
 */
export const walletsUpdate = (
    id: number,
    updateWalletRequest: BodyType<UpdateWalletRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/wallets/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateWalletRequest
    },
      options);
    }
  


export const getWalletsUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof walletsUpdate>>, TError,{id: number;data: BodyType<UpdateWalletRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof walletsUpdate>>, TError,{id: number;data: BodyType<UpdateWalletRequest>}, TContext> => {

const mutationKey = ['walletsUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof walletsUpdate>>, {id: number;data: BodyType<UpdateWalletRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  walletsUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type WalletsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof walletsUpdate>>>
    export type WalletsUpdateMutationBody = BodyType<UpdateWalletRequest>
    export type WalletsUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a Wallet.
 */
export const useWalletsUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof walletsUpdate>>, TError,{id: number;data: BodyType<UpdateWalletRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof walletsUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateWalletRequest>},
        TContext
      > => {

      const mutationOptions = getWalletsUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a Wallet.
 */
export const walletsDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/wallets/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getWalletsDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof walletsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof walletsDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['walletsDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof walletsDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  walletsDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type WalletsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof walletsDelete>>>
    
    export type WalletsDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a Wallet.
 */
export const useWalletsDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof walletsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof walletsDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getWalletsDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Wallet via dapper.
 */
export const walletsGetDapper = (
    params?: WalletsGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<WalletDto>(
      {url: `/api/v1/wallets/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getWalletsGetDapperQueryKey = (params?: WalletsGetDapperParams,) => {
    return [`/api/v1/wallets/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getWalletsGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof walletsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: WalletsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof walletsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getWalletsGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof walletsGetDapper>>> = ({ signal }) => walletsGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof walletsGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type WalletsGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof walletsGetDapper>>>
export type WalletsGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useWalletsGetDapper<TData = Awaited<ReturnType<typeof walletsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  WalletsGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof walletsGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletsGetDapper>>,
          TError,
          Awaited<ReturnType<typeof walletsGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useWalletsGetDapper<TData = Awaited<ReturnType<typeof walletsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: WalletsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof walletsGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletsGetDapper>>,
          TError,
          Awaited<ReturnType<typeof walletsGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useWalletsGetDapper<TData = Awaited<ReturnType<typeof walletsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: WalletsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof walletsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Wallet via dapper.
 */

export function useWalletsGetDapper<TData = Awaited<ReturnType<typeof walletsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: WalletsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof walletsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getWalletsGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new Wallet.
 */
export const walletsCreate = (
    createWalletRequest: BodyType<CreateWalletRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/wallets`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createWalletRequest, signal
    },
      options);
    }
  


export const getWalletsCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof walletsCreate>>, TError,{data: BodyType<CreateWalletRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof walletsCreate>>, TError,{data: BodyType<CreateWalletRequest>}, TContext> => {

const mutationKey = ['walletsCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof walletsCreate>>, {data: BodyType<CreateWalletRequest>}> = (props) => {
          const {data} = props ?? {};

          return  walletsCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type WalletsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof walletsCreate>>>
    export type WalletsCreateMutationBody = BodyType<CreateWalletRequest>
    export type WalletsCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new Wallet.
 */
export const useWalletsCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof walletsCreate>>, TError,{data: BodyType<CreateWalletRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof walletsCreate>>,
        TError,
        {data: BodyType<CreateWalletRequest>},
        TContext
      > => {

      const mutationOptions = getWalletsCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a Wallet.
 */
export const walletsExport = (
    exportWalletRequest: BodyType<ExportWalletRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/wallets/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportWalletRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getWalletsExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof walletsExport>>, TError,{data: BodyType<ExportWalletRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof walletsExport>>, TError,{data: BodyType<ExportWalletRequest>}, TContext> => {

const mutationKey = ['walletsExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof walletsExport>>, {data: BodyType<ExportWalletRequest>}> = (props) => {
          const {data} = props ?? {};

          return  walletsExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type WalletsExportMutationResult = NonNullable<Awaited<ReturnType<typeof walletsExport>>>
    export type WalletsExportMutationBody = BodyType<ExportWalletRequest>
    export type WalletsExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a Wallet.
 */
export const useWalletsExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof walletsExport>>, TError,{data: BodyType<ExportWalletRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof walletsExport>>,
        TError,
        {data: BodyType<ExportWalletRequest>},
        TContext
      > => {

      const mutationOptions = getWalletsExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    