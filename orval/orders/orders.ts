/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApiResponseOfObject,
  ApiResponseOfOrderResponse,
  ApiResponseOfUpdateOrderItemTerminalIdsResponse,
  ContractDto,
  CreateOrderRequest,
  ErrorResult,
  ExportOrderRequest,
  HttpValidationProblemDetails,
  OrderDto,
  OrdersGetDapperParams,
  OrdersGetOrderContractParams,
  PaginationResponseOfOrderDto,
  PaymentConfirmationRequest,
  SearchOrderRequest,
  UpdateOrderItemTerminalIdsRequest,
  UpdateOrderRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search Order using available filters.
 */
export const ordersSearch = (
    searchOrderRequest: BodyType<SearchOrderRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfOrderDto>(
      {url: `/api/v1/orders/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchOrderRequest, signal
    },
      options);
    }
  


export const getOrdersSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersSearch>>, TError,{data: BodyType<SearchOrderRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ordersSearch>>, TError,{data: BodyType<SearchOrderRequest>}, TContext> => {

const mutationKey = ['ordersSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersSearch>>, {data: BodyType<SearchOrderRequest>}> = (props) => {
          const {data} = props ?? {};

          return  ordersSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersSearchMutationResult = NonNullable<Awaited<ReturnType<typeof ordersSearch>>>
    export type OrdersSearchMutationBody = BodyType<SearchOrderRequest>
    export type OrdersSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search Order using available filters.
 */
export const useOrdersSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersSearch>>, TError,{data: BodyType<SearchOrderRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof ordersSearch>>,
        TError,
        {data: BodyType<SearchOrderRequest>},
        TContext
      > => {

      const mutationOptions = getOrdersSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Orders details.
 */
export const ordersGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OrderDto>(
      {url: `/api/v1/orders/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getOrdersGetQueryKey = (id?: number,) => {
    return [`/api/v1/orders/${id}`] as const;
    }

    
export const getOrdersGetQueryOptions = <TData = Awaited<ReturnType<typeof ordersGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrdersGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ordersGet>>> = ({ signal }) => ordersGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ordersGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type OrdersGetQueryResult = NonNullable<Awaited<ReturnType<typeof ordersGet>>>
export type OrdersGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useOrdersGet<TData = Awaited<ReturnType<typeof ordersGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ordersGet>>,
          TError,
          Awaited<ReturnType<typeof ordersGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOrdersGet<TData = Awaited<ReturnType<typeof ordersGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ordersGet>>,
          TError,
          Awaited<ReturnType<typeof ordersGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOrdersGet<TData = Awaited<ReturnType<typeof ordersGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Orders details.
 */

export function useOrdersGet<TData = Awaited<ReturnType<typeof ordersGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getOrdersGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a Order.
 */
export const ordersUpdate = (
    id: number,
    updateOrderRequest: BodyType<UpdateOrderRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/orders/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateOrderRequest
    },
      options);
    }
  


export const getOrdersUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersUpdate>>, TError,{id: number;data: BodyType<UpdateOrderRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ordersUpdate>>, TError,{id: number;data: BodyType<UpdateOrderRequest>}, TContext> => {

const mutationKey = ['ordersUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersUpdate>>, {id: number;data: BodyType<UpdateOrderRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  ordersUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof ordersUpdate>>>
    export type OrdersUpdateMutationBody = BodyType<UpdateOrderRequest>
    export type OrdersUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a Order.
 */
export const useOrdersUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersUpdate>>, TError,{id: number;data: BodyType<UpdateOrderRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof ordersUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateOrderRequest>},
        TContext
      > => {

      const mutationOptions = getOrdersUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a Order.
 */
export const ordersDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/orders/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getOrdersDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ordersDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['ordersDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  ordersDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof ordersDelete>>>
    
    export type OrdersDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a Order.
 */
export const useOrdersDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof ordersDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getOrdersDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Order via dapper.
 */
export const ordersGetDapper = (
    params?: OrdersGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OrderDto>(
      {url: `/api/v1/orders/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getOrdersGetDapperQueryKey = (params?: OrdersGetDapperParams,) => {
    return [`/api/v1/orders/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getOrdersGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof ordersGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: OrdersGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrdersGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ordersGetDapper>>> = ({ signal }) => ordersGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ordersGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type OrdersGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof ordersGetDapper>>>
export type OrdersGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useOrdersGetDapper<TData = Awaited<ReturnType<typeof ordersGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  OrdersGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ordersGetDapper>>,
          TError,
          Awaited<ReturnType<typeof ordersGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOrdersGetDapper<TData = Awaited<ReturnType<typeof ordersGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: OrdersGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ordersGetDapper>>,
          TError,
          Awaited<ReturnType<typeof ordersGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOrdersGetDapper<TData = Awaited<ReturnType<typeof ordersGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: OrdersGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Order via dapper.
 */

export function useOrdersGetDapper<TData = Awaited<ReturnType<typeof ordersGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: OrdersGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getOrdersGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Order Contract.
 */
export const ordersGetOrderContract = (
    params?: OrdersGetOrderContractParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OrderDto>(
      {url: `/api/v1/orders/getordercontract`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getOrdersGetOrderContractQueryKey = (params?: OrdersGetOrderContractParams,) => {
    return [`/api/v1/orders/getordercontract`, ...(params ? [params]: [])] as const;
    }

    
export const getOrdersGetOrderContractQueryOptions = <TData = Awaited<ReturnType<typeof ordersGetOrderContract>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: OrdersGetOrderContractParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersGetOrderContract>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrdersGetOrderContractQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ordersGetOrderContract>>> = ({ signal }) => ordersGetOrderContract(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ordersGetOrderContract>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type OrdersGetOrderContractQueryResult = NonNullable<Awaited<ReturnType<typeof ordersGetOrderContract>>>
export type OrdersGetOrderContractQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useOrdersGetOrderContract<TData = Awaited<ReturnType<typeof ordersGetOrderContract>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  OrdersGetOrderContractParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersGetOrderContract>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ordersGetOrderContract>>,
          TError,
          Awaited<ReturnType<typeof ordersGetOrderContract>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOrdersGetOrderContract<TData = Awaited<ReturnType<typeof ordersGetOrderContract>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: OrdersGetOrderContractParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersGetOrderContract>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ordersGetOrderContract>>,
          TError,
          Awaited<ReturnType<typeof ordersGetOrderContract>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOrdersGetOrderContract<TData = Awaited<ReturnType<typeof ordersGetOrderContract>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: OrdersGetOrderContractParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersGetOrderContract>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Order Contract.
 */

export function useOrdersGetOrderContract<TData = Awaited<ReturnType<typeof ordersGetOrderContract>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: OrdersGetOrderContractParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersGetOrderContract>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getOrdersGetOrderContractQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new Order.
 */
export const ordersCreate = (
    createOrderRequest: BodyType<CreateOrderRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseOfOrderResponse>(
      {url: `/api/v1/orders`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createOrderRequest, signal
    },
      options);
    }
  


export const getOrdersCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersCreate>>, TError,{data: BodyType<CreateOrderRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ordersCreate>>, TError,{data: BodyType<CreateOrderRequest>}, TContext> => {

const mutationKey = ['ordersCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersCreate>>, {data: BodyType<CreateOrderRequest>}> = (props) => {
          const {data} = props ?? {};

          return  ordersCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersCreateMutationResult = NonNullable<Awaited<ReturnType<typeof ordersCreate>>>
    export type OrdersCreateMutationBody = BodyType<CreateOrderRequest>
    export type OrdersCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new Order.
 */
export const useOrdersCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersCreate>>, TError,{data: BodyType<CreateOrderRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof ordersCreate>>,
        TError,
        {data: BodyType<CreateOrderRequest>},
        TContext
      > => {

      const mutationOptions = getOrdersCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Update Order Item Terminals
 */
export const ordersUpdateTerminals = (
    updateOrderItemTerminalIdsRequest: BodyType<UpdateOrderItemTerminalIdsRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<ApiResponseOfUpdateOrderItemTerminalIdsResponse>(
      {url: `/api/v1/orders/updateterminals`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateOrderItemTerminalIdsRequest
    },
      options);
    }
  


export const getOrdersUpdateTerminalsMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersUpdateTerminals>>, TError,{data: BodyType<UpdateOrderItemTerminalIdsRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ordersUpdateTerminals>>, TError,{data: BodyType<UpdateOrderItemTerminalIdsRequest>}, TContext> => {

const mutationKey = ['ordersUpdateTerminals'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersUpdateTerminals>>, {data: BodyType<UpdateOrderItemTerminalIdsRequest>}> = (props) => {
          const {data} = props ?? {};

          return  ordersUpdateTerminals(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersUpdateTerminalsMutationResult = NonNullable<Awaited<ReturnType<typeof ordersUpdateTerminals>>>
    export type OrdersUpdateTerminalsMutationBody = BodyType<UpdateOrderItemTerminalIdsRequest>
    export type OrdersUpdateTerminalsMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update Order Item Terminals
 */
export const useOrdersUpdateTerminals = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersUpdateTerminals>>, TError,{data: BodyType<UpdateOrderItemTerminalIdsRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof ordersUpdateTerminals>>,
        TError,
        {data: BodyType<UpdateOrderItemTerminalIdsRequest>},
        TContext
      > => {

      const mutationOptions = getOrdersUpdateTerminalsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Process cash payment for an Order.
 */
export const ordersCreateCashPayment = (
    paymentConfirmationRequest: BodyType<PaymentConfirmationRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseOfObject>(
      {url: `/api/v1/orders/cash-payment`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: paymentConfirmationRequest, signal
    },
      options);
    }
  


export const getOrdersCreateCashPaymentMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersCreateCashPayment>>, TError,{data: BodyType<PaymentConfirmationRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ordersCreateCashPayment>>, TError,{data: BodyType<PaymentConfirmationRequest>}, TContext> => {

const mutationKey = ['ordersCreateCashPayment'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersCreateCashPayment>>, {data: BodyType<PaymentConfirmationRequest>}> = (props) => {
          const {data} = props ?? {};

          return  ordersCreateCashPayment(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersCreateCashPaymentMutationResult = NonNullable<Awaited<ReturnType<typeof ordersCreateCashPayment>>>
    export type OrdersCreateCashPaymentMutationBody = BodyType<PaymentConfirmationRequest>
    export type OrdersCreateCashPaymentMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Process cash payment for an Order.
 */
export const useOrdersCreateCashPayment = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersCreateCashPayment>>, TError,{data: BodyType<PaymentConfirmationRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof ordersCreateCashPayment>>,
        TError,
        {data: BodyType<PaymentConfirmationRequest>},
        TContext
      > => {

      const mutationOptions = getOrdersCreateCashPaymentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Process transfer payment for an Order.
 */
export const ordersCreateTransferPayment = (
    paymentConfirmationRequest: BodyType<PaymentConfirmationRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseOfObject>(
      {url: `/api/v1/orders/transfer-payment`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: paymentConfirmationRequest, signal
    },
      options);
    }
  


export const getOrdersCreateTransferPaymentMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersCreateTransferPayment>>, TError,{data: BodyType<PaymentConfirmationRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ordersCreateTransferPayment>>, TError,{data: BodyType<PaymentConfirmationRequest>}, TContext> => {

const mutationKey = ['ordersCreateTransferPayment'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersCreateTransferPayment>>, {data: BodyType<PaymentConfirmationRequest>}> = (props) => {
          const {data} = props ?? {};

          return  ordersCreateTransferPayment(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersCreateTransferPaymentMutationResult = NonNullable<Awaited<ReturnType<typeof ordersCreateTransferPayment>>>
    export type OrdersCreateTransferPaymentMutationBody = BodyType<PaymentConfirmationRequest>
    export type OrdersCreateTransferPaymentMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Process transfer payment for an Order.
 */
export const useOrdersCreateTransferPayment = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersCreateTransferPayment>>, TError,{data: BodyType<PaymentConfirmationRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof ordersCreateTransferPayment>>,
        TError,
        {data: BodyType<PaymentConfirmationRequest>},
        TContext
      > => {

      const mutationOptions = getOrdersCreateTransferPaymentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a Order.
 */
export const ordersExport = (
    exportOrderRequest: BodyType<ExportOrderRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/orders/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportOrderRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getOrdersExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersExport>>, TError,{data: BodyType<ExportOrderRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ordersExport>>, TError,{data: BodyType<ExportOrderRequest>}, TContext> => {

const mutationKey = ['ordersExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersExport>>, {data: BodyType<ExportOrderRequest>}> = (props) => {
          const {data} = props ?? {};

          return  ordersExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersExportMutationResult = NonNullable<Awaited<ReturnType<typeof ordersExport>>>
    export type OrdersExportMutationBody = BodyType<ExportOrderRequest>
    export type OrdersExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a Order.
 */
export const useOrdersExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersExport>>, TError,{data: BodyType<ExportOrderRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof ordersExport>>,
        TError,
        {data: BodyType<ExportOrderRequest>},
        TContext
      > => {

      const mutationOptions = getOrdersExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get contract data for an order.
 */
export const ordersGetContract = (
    orderId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ContractDto>(
      {url: `/api/v1/orders/contract/${orderId}`, method: 'GET', signal
    },
      options);
    }
  

export const getOrdersGetContractQueryKey = (orderId?: number,) => {
    return [`/api/v1/orders/contract/${orderId}`] as const;
    }

    
export const getOrdersGetContractQueryOptions = <TData = Awaited<ReturnType<typeof ordersGetContract>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersGetContract>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrdersGetContractQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ordersGetContract>>> = ({ signal }) => ordersGetContract(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ordersGetContract>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type OrdersGetContractQueryResult = NonNullable<Awaited<ReturnType<typeof ordersGetContract>>>
export type OrdersGetContractQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useOrdersGetContract<TData = Awaited<ReturnType<typeof ordersGetContract>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 orderId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersGetContract>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ordersGetContract>>,
          TError,
          Awaited<ReturnType<typeof ordersGetContract>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOrdersGetContract<TData = Awaited<ReturnType<typeof ordersGetContract>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersGetContract>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ordersGetContract>>,
          TError,
          Awaited<ReturnType<typeof ordersGetContract>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOrdersGetContract<TData = Awaited<ReturnType<typeof ordersGetContract>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersGetContract>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get contract data for an order.
 */

export function useOrdersGetContract<TData = Awaited<ReturnType<typeof ordersGetContract>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 orderId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersGetContract>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getOrdersGetContractQueryOptions(orderId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



