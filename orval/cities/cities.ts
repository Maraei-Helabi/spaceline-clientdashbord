/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CitiesGetDapperParams,
  CityDto,
  CreateCityRequest,
  ErrorResult,
  ExportCityRequest,
  HttpValidationProblemDetails,
  PaginationResponseOfCityDto,
  SearchCityRequest,
  UpdateCityRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search City using available filters.
 */
export const citiesSearch = (
    searchCityRequest: BodyType<SearchCityRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfCityDto>(
      {url: `/api/v1/cities/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchCityRequest, signal
    },
      options);
    }
  


export const getCitiesSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof citiesSearch>>, TError,{data: BodyType<SearchCityRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof citiesSearch>>, TError,{data: BodyType<SearchCityRequest>}, TContext> => {

const mutationKey = ['citiesSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof citiesSearch>>, {data: BodyType<SearchCityRequest>}> = (props) => {
          const {data} = props ?? {};

          return  citiesSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CitiesSearchMutationResult = NonNullable<Awaited<ReturnType<typeof citiesSearch>>>
    export type CitiesSearchMutationBody = BodyType<SearchCityRequest>
    export type CitiesSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search City using available filters.
 */
export const useCitiesSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof citiesSearch>>, TError,{data: BodyType<SearchCityRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof citiesSearch>>,
        TError,
        {data: BodyType<SearchCityRequest>},
        TContext
      > => {

      const mutationOptions = getCitiesSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get City details.
 */
export const citiesGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CityDto>(
      {url: `/api/v1/cities/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getCitiesGetQueryKey = (id?: number,) => {
    return [`/api/v1/cities/${id}`] as const;
    }

    
export const getCitiesGetQueryOptions = <TData = Awaited<ReturnType<typeof citiesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof citiesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCitiesGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof citiesGet>>> = ({ signal }) => citiesGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof citiesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CitiesGetQueryResult = NonNullable<Awaited<ReturnType<typeof citiesGet>>>
export type CitiesGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useCitiesGet<TData = Awaited<ReturnType<typeof citiesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof citiesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof citiesGet>>,
          TError,
          Awaited<ReturnType<typeof citiesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCitiesGet<TData = Awaited<ReturnType<typeof citiesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof citiesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof citiesGet>>,
          TError,
          Awaited<ReturnType<typeof citiesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCitiesGet<TData = Awaited<ReturnType<typeof citiesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof citiesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get City details.
 */

export function useCitiesGet<TData = Awaited<ReturnType<typeof citiesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof citiesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCitiesGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a City.
 */
export const citiesUpdate = (
    id: number,
    updateCityRequest: BodyType<UpdateCityRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/cities/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCityRequest
    },
      options);
    }
  


export const getCitiesUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof citiesUpdate>>, TError,{id: number;data: BodyType<UpdateCityRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof citiesUpdate>>, TError,{id: number;data: BodyType<UpdateCityRequest>}, TContext> => {

const mutationKey = ['citiesUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof citiesUpdate>>, {id: number;data: BodyType<UpdateCityRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  citiesUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CitiesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof citiesUpdate>>>
    export type CitiesUpdateMutationBody = BodyType<UpdateCityRequest>
    export type CitiesUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a City.
 */
export const useCitiesUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof citiesUpdate>>, TError,{id: number;data: BodyType<UpdateCityRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof citiesUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateCityRequest>},
        TContext
      > => {

      const mutationOptions = getCitiesUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a City.
 */
export const citiesDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/cities/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getCitiesDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof citiesDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof citiesDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['citiesDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof citiesDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  citiesDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CitiesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof citiesDelete>>>
    
    export type CitiesDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a City.
 */
export const useCitiesDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof citiesDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof citiesDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getCitiesDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get City via dapper.
 */
export const citiesGetDapper = (
    params?: CitiesGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CityDto>(
      {url: `/api/v1/cities/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCitiesGetDapperQueryKey = (params?: CitiesGetDapperParams,) => {
    return [`/api/v1/cities/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getCitiesGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof citiesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: CitiesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof citiesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCitiesGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof citiesGetDapper>>> = ({ signal }) => citiesGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof citiesGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CitiesGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof citiesGetDapper>>>
export type CitiesGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useCitiesGetDapper<TData = Awaited<ReturnType<typeof citiesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  CitiesGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof citiesGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof citiesGetDapper>>,
          TError,
          Awaited<ReturnType<typeof citiesGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCitiesGetDapper<TData = Awaited<ReturnType<typeof citiesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: CitiesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof citiesGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof citiesGetDapper>>,
          TError,
          Awaited<ReturnType<typeof citiesGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCitiesGetDapper<TData = Awaited<ReturnType<typeof citiesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: CitiesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof citiesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get City via dapper.
 */

export function useCitiesGetDapper<TData = Awaited<ReturnType<typeof citiesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: CitiesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof citiesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCitiesGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new City.
 */
export const citiesCreate = (
    createCityRequest: BodyType<CreateCityRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/cities`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCityRequest, signal
    },
      options);
    }
  


export const getCitiesCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof citiesCreate>>, TError,{data: BodyType<CreateCityRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof citiesCreate>>, TError,{data: BodyType<CreateCityRequest>}, TContext> => {

const mutationKey = ['citiesCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof citiesCreate>>, {data: BodyType<CreateCityRequest>}> = (props) => {
          const {data} = props ?? {};

          return  citiesCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CitiesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof citiesCreate>>>
    export type CitiesCreateMutationBody = BodyType<CreateCityRequest>
    export type CitiesCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new City.
 */
export const useCitiesCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof citiesCreate>>, TError,{data: BodyType<CreateCityRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof citiesCreate>>,
        TError,
        {data: BodyType<CreateCityRequest>},
        TContext
      > => {

      const mutationOptions = getCitiesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a City.
 */
export const citiesExport = (
    exportCityRequest: BodyType<ExportCityRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/cities/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportCityRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getCitiesExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof citiesExport>>, TError,{data: BodyType<ExportCityRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof citiesExport>>, TError,{data: BodyType<ExportCityRequest>}, TContext> => {

const mutationKey = ['citiesExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof citiesExport>>, {data: BodyType<ExportCityRequest>}> = (props) => {
          const {data} = props ?? {};

          return  citiesExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CitiesExportMutationResult = NonNullable<Awaited<ReturnType<typeof citiesExport>>>
    export type CitiesExportMutationBody = BodyType<ExportCityRequest>
    export type CitiesExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a City.
 */
export const useCitiesExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof citiesExport>>, TError,{data: BodyType<ExportCityRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof citiesExport>>,
        TError,
        {data: BodyType<ExportCityRequest>},
        TContext
      > => {

      const mutationOptions = getCitiesExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    