/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateCustomerRequest,
  CustomerDto,
  CustomersGetDapperParams,
  ErrorResult,
  HttpValidationProblemDetails,
  PaginationResponseOfCustomerDto,
  SearchCustomerRequest,
  UpdateCustomerRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search Customers using available filters.
 */
export const customersSearch = (
    searchCustomerRequest: BodyType<SearchCustomerRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfCustomerDto>(
      {url: `/api/v1/customers/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchCustomerRequest, signal
    },
      options);
    }
  


export const getCustomersSearchMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customersSearch>>, TError,{data: BodyType<SearchCustomerRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof customersSearch>>, TError,{data: BodyType<SearchCustomerRequest>}, TContext> => {

const mutationKey = ['customersSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof customersSearch>>, {data: BodyType<SearchCustomerRequest>}> = (props) => {
          const {data} = props ?? {};

          return  customersSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CustomersSearchMutationResult = NonNullable<Awaited<ReturnType<typeof customersSearch>>>
    export type CustomersSearchMutationBody = BodyType<SearchCustomerRequest>
    export type CustomersSearchMutationError = ErrorType<unknown>

    /**
 * @summary Search Customers using available filters.
 */
export const useCustomersSearch = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customersSearch>>, TError,{data: BodyType<SearchCustomerRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof customersSearch>>,
        TError,
        {data: BodyType<SearchCustomerRequest>},
        TContext
      > => {

      const mutationOptions = getCustomersSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Customer details.
 */
export const customersGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CustomerDto>(
      {url: `/api/v1/customers/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getCustomersGetQueryKey = (id?: number,) => {
    return [`/api/v1/customers/${id}`] as const;
    }

    
export const getCustomersGetQueryOptions = <TData = Awaited<ReturnType<typeof customersGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomersGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof customersGet>>> = ({ signal }) => customersGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof customersGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CustomersGetQueryResult = NonNullable<Awaited<ReturnType<typeof customersGet>>>
export type CustomersGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useCustomersGet<TData = Awaited<ReturnType<typeof customersGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof customersGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof customersGet>>,
          TError,
          Awaited<ReturnType<typeof customersGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCustomersGet<TData = Awaited<ReturnType<typeof customersGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customersGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof customersGet>>,
          TError,
          Awaited<ReturnType<typeof customersGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCustomersGet<TData = Awaited<ReturnType<typeof customersGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Customer details.
 */

export function useCustomersGet<TData = Awaited<ReturnType<typeof customersGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCustomersGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a Customer.
 */
export const customersUpdate = (
    id: number,
    updateCustomerRequest: BodyType<UpdateCustomerRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/customers/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCustomerRequest
    },
      options);
    }
  


export const getCustomersUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customersUpdate>>, TError,{id: number;data: BodyType<UpdateCustomerRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof customersUpdate>>, TError,{id: number;data: BodyType<UpdateCustomerRequest>}, TContext> => {

const mutationKey = ['customersUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof customersUpdate>>, {id: number;data: BodyType<UpdateCustomerRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  customersUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CustomersUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof customersUpdate>>>
    export type CustomersUpdateMutationBody = BodyType<UpdateCustomerRequest>
    export type CustomersUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a Customer.
 */
export const useCustomersUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customersUpdate>>, TError,{id: number;data: BodyType<UpdateCustomerRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof customersUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateCustomerRequest>},
        TContext
      > => {

      const mutationOptions = getCustomersUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a Customer.
 */
export const customersDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/customers/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getCustomersDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customersDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof customersDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['customersDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof customersDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  customersDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CustomersDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof customersDelete>>>
    
    export type CustomersDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a Customer.
 */
export const useCustomersDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customersDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof customersDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getCustomersDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Customer details via dapper.
 */
export const customersGetDapper = (
    params?: CustomersGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CustomerDto>(
      {url: `/api/v1/customers/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCustomersGetDapperQueryKey = (params?: CustomersGetDapperParams,) => {
    return [`/api/v1/customers/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getCustomersGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof customersGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: CustomersGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customersGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomersGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof customersGetDapper>>> = ({ signal }) => customersGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof customersGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CustomersGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof customersGetDapper>>>
export type CustomersGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useCustomersGetDapper<TData = Awaited<ReturnType<typeof customersGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  CustomersGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof customersGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof customersGetDapper>>,
          TError,
          Awaited<ReturnType<typeof customersGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCustomersGetDapper<TData = Awaited<ReturnType<typeof customersGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: CustomersGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customersGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof customersGetDapper>>,
          TError,
          Awaited<ReturnType<typeof customersGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCustomersGetDapper<TData = Awaited<ReturnType<typeof customersGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: CustomersGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customersGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Customer details via dapper.
 */

export function useCustomersGetDapper<TData = Awaited<ReturnType<typeof customersGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: CustomersGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customersGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCustomersGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new Customer.
 */
export const customersCreate = (
    createCustomerRequest: BodyType<CreateCustomerRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/customers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCustomerRequest, signal
    },
      options);
    }
  


export const getCustomersCreateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customersCreate>>, TError,{data: BodyType<CreateCustomerRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof customersCreate>>, TError,{data: BodyType<CreateCustomerRequest>}, TContext> => {

const mutationKey = ['customersCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof customersCreate>>, {data: BodyType<CreateCustomerRequest>}> = (props) => {
          const {data} = props ?? {};

          return  customersCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CustomersCreateMutationResult = NonNullable<Awaited<ReturnType<typeof customersCreate>>>
    export type CustomersCreateMutationBody = BodyType<CreateCustomerRequest>
    export type CustomersCreateMutationError = ErrorType<unknown>

    /**
 * @summary Create a new Customer.
 */
export const useCustomersCreate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customersCreate>>, TError,{data: BodyType<CreateCustomerRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof customersCreate>>,
        TError,
        {data: BodyType<CreateCustomerRequest>},
        TContext
      > => {

      const mutationOptions = getCustomersCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a Customers.
 */
export const customersExport = (
    searchCustomerRequest: BodyType<SearchCustomerRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/customers/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchCustomerRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getCustomersExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customersExport>>, TError,{data: BodyType<SearchCustomerRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof customersExport>>, TError,{data: BodyType<SearchCustomerRequest>}, TContext> => {

const mutationKey = ['customersExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof customersExport>>, {data: BodyType<SearchCustomerRequest>}> = (props) => {
          const {data} = props ?? {};

          return  customersExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CustomersExportMutationResult = NonNullable<Awaited<ReturnType<typeof customersExport>>>
    export type CustomersExportMutationBody = BodyType<SearchCustomerRequest>
    export type CustomersExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a Customers.
 */
export const useCustomersExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customersExport>>, TError,{data: BodyType<SearchCustomerRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof customersExport>>,
        TError,
        {data: BodyType<SearchCustomerRequest>},
        TContext
      > => {

      const mutationOptions = getCustomersExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    