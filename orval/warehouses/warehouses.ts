/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BranchWarehouseDto,
  CreateBranchWarehouseRequest,
  ErrorResult,
  ExportBranchWarehouseRequest,
  HttpValidationProblemDetails,
  PaginationResponseOfBranchWarehouseDto,
  SearchBranchWarehouseRequest,
  UpdateBranchWarehouseRequest,
  WarehousesGetDapperParams
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search BranchWarehouses using available filters.
 */
export const warehousesSearch = (
    searchBranchWarehouseRequest: BodyType<SearchBranchWarehouseRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfBranchWarehouseDto>(
      {url: `/api/v1/warehouses/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchBranchWarehouseRequest, signal
    },
      options);
    }
  


export const getWarehousesSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof warehousesSearch>>, TError,{data: BodyType<SearchBranchWarehouseRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof warehousesSearch>>, TError,{data: BodyType<SearchBranchWarehouseRequest>}, TContext> => {

const mutationKey = ['warehousesSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof warehousesSearch>>, {data: BodyType<SearchBranchWarehouseRequest>}> = (props) => {
          const {data} = props ?? {};

          return  warehousesSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type WarehousesSearchMutationResult = NonNullable<Awaited<ReturnType<typeof warehousesSearch>>>
    export type WarehousesSearchMutationBody = BodyType<SearchBranchWarehouseRequest>
    export type WarehousesSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search BranchWarehouses using available filters.
 */
export const useWarehousesSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof warehousesSearch>>, TError,{data: BodyType<SearchBranchWarehouseRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof warehousesSearch>>,
        TError,
        {data: BodyType<SearchBranchWarehouseRequest>},
        TContext
      > => {

      const mutationOptions = getWarehousesSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get BranchWarehouse details.
 */
export const warehousesGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<BranchWarehouseDto>(
      {url: `/api/v1/warehouses/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getWarehousesGetQueryKey = (id?: number,) => {
    return [`/api/v1/warehouses/${id}`] as const;
    }

    
export const getWarehousesGetQueryOptions = <TData = Awaited<ReturnType<typeof warehousesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof warehousesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getWarehousesGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof warehousesGet>>> = ({ signal }) => warehousesGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof warehousesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type WarehousesGetQueryResult = NonNullable<Awaited<ReturnType<typeof warehousesGet>>>
export type WarehousesGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useWarehousesGet<TData = Awaited<ReturnType<typeof warehousesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof warehousesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof warehousesGet>>,
          TError,
          Awaited<ReturnType<typeof warehousesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useWarehousesGet<TData = Awaited<ReturnType<typeof warehousesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof warehousesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof warehousesGet>>,
          TError,
          Awaited<ReturnType<typeof warehousesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useWarehousesGet<TData = Awaited<ReturnType<typeof warehousesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof warehousesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get BranchWarehouse details.
 */

export function useWarehousesGet<TData = Awaited<ReturnType<typeof warehousesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof warehousesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getWarehousesGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a BranchWarehouse.
 */
export const warehousesUpdate = (
    id: number,
    updateBranchWarehouseRequest: BodyType<UpdateBranchWarehouseRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/warehouses/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateBranchWarehouseRequest
    },
      options);
    }
  


export const getWarehousesUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof warehousesUpdate>>, TError,{id: number;data: BodyType<UpdateBranchWarehouseRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof warehousesUpdate>>, TError,{id: number;data: BodyType<UpdateBranchWarehouseRequest>}, TContext> => {

const mutationKey = ['warehousesUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof warehousesUpdate>>, {id: number;data: BodyType<UpdateBranchWarehouseRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  warehousesUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type WarehousesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof warehousesUpdate>>>
    export type WarehousesUpdateMutationBody = BodyType<UpdateBranchWarehouseRequest>
    export type WarehousesUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a BranchWarehouse.
 */
export const useWarehousesUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof warehousesUpdate>>, TError,{id: number;data: BodyType<UpdateBranchWarehouseRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof warehousesUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateBranchWarehouseRequest>},
        TContext
      > => {

      const mutationOptions = getWarehousesUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a BranchWarehouse.
 */
export const warehousesDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/warehouses/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getWarehousesDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof warehousesDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof warehousesDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['warehousesDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof warehousesDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  warehousesDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type WarehousesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof warehousesDelete>>>
    
    export type WarehousesDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a BranchWarehouse.
 */
export const useWarehousesDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof warehousesDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof warehousesDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getWarehousesDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get BranchWarehouse details via dapper.
 */
export const warehousesGetDapper = (
    params?: WarehousesGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<BranchWarehouseDto>(
      {url: `/api/v1/warehouses/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getWarehousesGetDapperQueryKey = (params?: WarehousesGetDapperParams,) => {
    return [`/api/v1/warehouses/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getWarehousesGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof warehousesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: WarehousesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof warehousesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getWarehousesGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof warehousesGetDapper>>> = ({ signal }) => warehousesGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof warehousesGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type WarehousesGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof warehousesGetDapper>>>
export type WarehousesGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useWarehousesGetDapper<TData = Awaited<ReturnType<typeof warehousesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  WarehousesGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof warehousesGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof warehousesGetDapper>>,
          TError,
          Awaited<ReturnType<typeof warehousesGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useWarehousesGetDapper<TData = Awaited<ReturnType<typeof warehousesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: WarehousesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof warehousesGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof warehousesGetDapper>>,
          TError,
          Awaited<ReturnType<typeof warehousesGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useWarehousesGetDapper<TData = Awaited<ReturnType<typeof warehousesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: WarehousesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof warehousesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get BranchWarehouse details via dapper.
 */

export function useWarehousesGetDapper<TData = Awaited<ReturnType<typeof warehousesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: WarehousesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof warehousesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getWarehousesGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new BranchWarehouse.
 */
export const warehousesCreate = (
    createBranchWarehouseRequest: BodyType<CreateBranchWarehouseRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/warehouses`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createBranchWarehouseRequest, signal
    },
      options);
    }
  


export const getWarehousesCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof warehousesCreate>>, TError,{data: BodyType<CreateBranchWarehouseRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof warehousesCreate>>, TError,{data: BodyType<CreateBranchWarehouseRequest>}, TContext> => {

const mutationKey = ['warehousesCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof warehousesCreate>>, {data: BodyType<CreateBranchWarehouseRequest>}> = (props) => {
          const {data} = props ?? {};

          return  warehousesCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type WarehousesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof warehousesCreate>>>
    export type WarehousesCreateMutationBody = BodyType<CreateBranchWarehouseRequest>
    export type WarehousesCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new BranchWarehouse.
 */
export const useWarehousesCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof warehousesCreate>>, TError,{data: BodyType<CreateBranchWarehouseRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof warehousesCreate>>,
        TError,
        {data: BodyType<CreateBranchWarehouseRequest>},
        TContext
      > => {

      const mutationOptions = getWarehousesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a BranchWarehouses.
 */
export const warehousesExport = (
    exportBranchWarehouseRequest: BodyType<ExportBranchWarehouseRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/warehouses/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportBranchWarehouseRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getWarehousesExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof warehousesExport>>, TError,{data: BodyType<ExportBranchWarehouseRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof warehousesExport>>, TError,{data: BodyType<ExportBranchWarehouseRequest>}, TContext> => {

const mutationKey = ['warehousesExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof warehousesExport>>, {data: BodyType<ExportBranchWarehouseRequest>}> = (props) => {
          const {data} = props ?? {};

          return  warehousesExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type WarehousesExportMutationResult = NonNullable<Awaited<ReturnType<typeof warehousesExport>>>
    export type WarehousesExportMutationBody = BodyType<ExportBranchWarehouseRequest>
    export type WarehousesExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a BranchWarehouses.
 */
export const useWarehousesExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof warehousesExport>>, TError,{data: BodyType<ExportBranchWarehouseRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof warehousesExport>>,
        TError,
        {data: BodyType<ExportBranchWarehouseRequest>},
        TContext
      > => {

      const mutationOptions = getWarehousesExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    