/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BranchDto,
  BranchesGetDapperParams,
  CreateBranchRequest,
  ErrorResult,
  ExportBranchRequest,
  HttpValidationProblemDetails,
  PaginationResponseOfBranchDto,
  SearchBranchRequest,
  UpdateBranchRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search Branches using available filters.
 */
export const branchesSearch = (
    searchBranchRequest: BodyType<SearchBranchRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfBranchDto>(
      {url: `/api/v1/branches/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchBranchRequest, signal
    },
      options);
    }
  


export const getBranchesSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof branchesSearch>>, TError,{data: BodyType<SearchBranchRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof branchesSearch>>, TError,{data: BodyType<SearchBranchRequest>}, TContext> => {

const mutationKey = ['branchesSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof branchesSearch>>, {data: BodyType<SearchBranchRequest>}> = (props) => {
          const {data} = props ?? {};

          return  branchesSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BranchesSearchMutationResult = NonNullable<Awaited<ReturnType<typeof branchesSearch>>>
    export type BranchesSearchMutationBody = BodyType<SearchBranchRequest>
    export type BranchesSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search Branches using available filters.
 */
export const useBranchesSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof branchesSearch>>, TError,{data: BodyType<SearchBranchRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof branchesSearch>>,
        TError,
        {data: BodyType<SearchBranchRequest>},
        TContext
      > => {

      const mutationOptions = getBranchesSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Branch details.
 */
export const branchesGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<BranchDto>(
      {url: `/api/v1/branches/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getBranchesGetQueryKey = (id?: number,) => {
    return [`/api/v1/branches/${id}`] as const;
    }

    
export const getBranchesGetQueryOptions = <TData = Awaited<ReturnType<typeof branchesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof branchesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBranchesGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof branchesGet>>> = ({ signal }) => branchesGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof branchesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type BranchesGetQueryResult = NonNullable<Awaited<ReturnType<typeof branchesGet>>>
export type BranchesGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useBranchesGet<TData = Awaited<ReturnType<typeof branchesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof branchesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof branchesGet>>,
          TError,
          Awaited<ReturnType<typeof branchesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBranchesGet<TData = Awaited<ReturnType<typeof branchesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof branchesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof branchesGet>>,
          TError,
          Awaited<ReturnType<typeof branchesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBranchesGet<TData = Awaited<ReturnType<typeof branchesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof branchesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Branch details.
 */

export function useBranchesGet<TData = Awaited<ReturnType<typeof branchesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof branchesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getBranchesGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a Branch.
 */
export const branchesUpdate = (
    id: number,
    updateBranchRequest: BodyType<UpdateBranchRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/branches/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateBranchRequest
    },
      options);
    }
  


export const getBranchesUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof branchesUpdate>>, TError,{id: number;data: BodyType<UpdateBranchRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof branchesUpdate>>, TError,{id: number;data: BodyType<UpdateBranchRequest>}, TContext> => {

const mutationKey = ['branchesUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof branchesUpdate>>, {id: number;data: BodyType<UpdateBranchRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  branchesUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BranchesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof branchesUpdate>>>
    export type BranchesUpdateMutationBody = BodyType<UpdateBranchRequest>
    export type BranchesUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a Branch.
 */
export const useBranchesUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof branchesUpdate>>, TError,{id: number;data: BodyType<UpdateBranchRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof branchesUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateBranchRequest>},
        TContext
      > => {

      const mutationOptions = getBranchesUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a Branch.
 */
export const branchesDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/branches/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getBranchesDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof branchesDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof branchesDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['branchesDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof branchesDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  branchesDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BranchesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof branchesDelete>>>
    
    export type BranchesDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a Branch.
 */
export const useBranchesDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof branchesDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof branchesDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getBranchesDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Branch details via dapper.
 */
export const branchesGetDapper = (
    params?: BranchesGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<BranchDto>(
      {url: `/api/v1/branches/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getBranchesGetDapperQueryKey = (params?: BranchesGetDapperParams,) => {
    return [`/api/v1/branches/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getBranchesGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof branchesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: BranchesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof branchesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBranchesGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof branchesGetDapper>>> = ({ signal }) => branchesGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof branchesGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type BranchesGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof branchesGetDapper>>>
export type BranchesGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useBranchesGetDapper<TData = Awaited<ReturnType<typeof branchesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  BranchesGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof branchesGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof branchesGetDapper>>,
          TError,
          Awaited<ReturnType<typeof branchesGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBranchesGetDapper<TData = Awaited<ReturnType<typeof branchesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: BranchesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof branchesGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof branchesGetDapper>>,
          TError,
          Awaited<ReturnType<typeof branchesGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBranchesGetDapper<TData = Awaited<ReturnType<typeof branchesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: BranchesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof branchesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Branch details via dapper.
 */

export function useBranchesGetDapper<TData = Awaited<ReturnType<typeof branchesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: BranchesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof branchesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getBranchesGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new Branch.
 */
export const branchesCreate = (
    createBranchRequest: BodyType<CreateBranchRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/branches`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createBranchRequest, signal
    },
      options);
    }
  


export const getBranchesCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof branchesCreate>>, TError,{data: BodyType<CreateBranchRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof branchesCreate>>, TError,{data: BodyType<CreateBranchRequest>}, TContext> => {

const mutationKey = ['branchesCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof branchesCreate>>, {data: BodyType<CreateBranchRequest>}> = (props) => {
          const {data} = props ?? {};

          return  branchesCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BranchesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof branchesCreate>>>
    export type BranchesCreateMutationBody = BodyType<CreateBranchRequest>
    export type BranchesCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new Branch.
 */
export const useBranchesCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof branchesCreate>>, TError,{data: BodyType<CreateBranchRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof branchesCreate>>,
        TError,
        {data: BodyType<CreateBranchRequest>},
        TContext
      > => {

      const mutationOptions = getBranchesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a Branches.
 */
export const branchesExport = (
    exportBranchRequest: BodyType<ExportBranchRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/branches/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportBranchRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getBranchesExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof branchesExport>>, TError,{data: BodyType<ExportBranchRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof branchesExport>>, TError,{data: BodyType<ExportBranchRequest>}, TContext> => {

const mutationKey = ['branchesExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof branchesExport>>, {data: BodyType<ExportBranchRequest>}> = (props) => {
          const {data} = props ?? {};

          return  branchesExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BranchesExportMutationResult = NonNullable<Awaited<ReturnType<typeof branchesExport>>>
    export type BranchesExportMutationBody = BodyType<ExportBranchRequest>
    export type BranchesExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a Branches.
 */
export const useBranchesExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof branchesExport>>, TError,{data: BodyType<ExportBranchRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof branchesExport>>,
        TError,
        {data: BodyType<ExportBranchRequest>},
        TContext
      > => {

      const mutationOptions = getBranchesExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    