/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CountriesGetDapperParams,
  CountryDto,
  CreateCountryRequest,
  ErrorResult,
  ExportCountryRequest,
  HttpValidationProblemDetails,
  PaginationResponseOfCountryDto,
  SearchCountryRequest,
  UpdateCountryRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search Country using available filters.
 */
export const countriesSearch = (
    searchCountryRequest: BodyType<SearchCountryRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfCountryDto>(
      {url: `/api/v1/countries/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchCountryRequest, signal
    },
      options);
    }
  


export const getCountriesSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof countriesSearch>>, TError,{data: BodyType<SearchCountryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof countriesSearch>>, TError,{data: BodyType<SearchCountryRequest>}, TContext> => {

const mutationKey = ['countriesSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof countriesSearch>>, {data: BodyType<SearchCountryRequest>}> = (props) => {
          const {data} = props ?? {};

          return  countriesSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CountriesSearchMutationResult = NonNullable<Awaited<ReturnType<typeof countriesSearch>>>
    export type CountriesSearchMutationBody = BodyType<SearchCountryRequest>
    export type CountriesSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search Country using available filters.
 */
export const useCountriesSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof countriesSearch>>, TError,{data: BodyType<SearchCountryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof countriesSearch>>,
        TError,
        {data: BodyType<SearchCountryRequest>},
        TContext
      > => {

      const mutationOptions = getCountriesSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Country details.
 */
export const countriesGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CountryDto>(
      {url: `/api/v1/countries/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getCountriesGetQueryKey = (id?: number,) => {
    return [`/api/v1/countries/${id}`] as const;
    }

    
export const getCountriesGetQueryOptions = <TData = Awaited<ReturnType<typeof countriesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countriesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountriesGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countriesGet>>> = ({ signal }) => countriesGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof countriesGet>>>
export type CountriesGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useCountriesGet<TData = Awaited<ReturnType<typeof countriesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countriesGet>>,
          TError,
          Awaited<ReturnType<typeof countriesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountriesGet<TData = Awaited<ReturnType<typeof countriesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countriesGet>>,
          TError,
          Awaited<ReturnType<typeof countriesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountriesGet<TData = Awaited<ReturnType<typeof countriesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countriesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Country details.
 */

export function useCountriesGet<TData = Awaited<ReturnType<typeof countriesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countriesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountriesGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a Country.
 */
export const countriesUpdate = (
    id: number,
    updateCountryRequest: BodyType<UpdateCountryRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/countries/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCountryRequest
    },
      options);
    }
  


export const getCountriesUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof countriesUpdate>>, TError,{id: number;data: BodyType<UpdateCountryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof countriesUpdate>>, TError,{id: number;data: BodyType<UpdateCountryRequest>}, TContext> => {

const mutationKey = ['countriesUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof countriesUpdate>>, {id: number;data: BodyType<UpdateCountryRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  countriesUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CountriesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof countriesUpdate>>>
    export type CountriesUpdateMutationBody = BodyType<UpdateCountryRequest>
    export type CountriesUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a Country.
 */
export const useCountriesUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof countriesUpdate>>, TError,{id: number;data: BodyType<UpdateCountryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof countriesUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateCountryRequest>},
        TContext
      > => {

      const mutationOptions = getCountriesUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a Country.
 */
export const countriesDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/countries/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getCountriesDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof countriesDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof countriesDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['countriesDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof countriesDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  countriesDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CountriesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof countriesDelete>>>
    
    export type CountriesDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a Country.
 */
export const useCountriesDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof countriesDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof countriesDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getCountriesDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Country via dapper.
 */
export const countriesGetDapper = (
    params?: CountriesGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CountryDto>(
      {url: `/api/v1/countries/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCountriesGetDapperQueryKey = (params?: CountriesGetDapperParams,) => {
    return [`/api/v1/countries/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getCountriesGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof countriesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: CountriesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countriesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCountriesGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof countriesGetDapper>>> = ({ signal }) => countriesGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof countriesGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CountriesGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof countriesGetDapper>>>
export type CountriesGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useCountriesGetDapper<TData = Awaited<ReturnType<typeof countriesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  CountriesGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof countriesGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof countriesGetDapper>>,
          TError,
          Awaited<ReturnType<typeof countriesGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountriesGetDapper<TData = Awaited<ReturnType<typeof countriesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: CountriesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countriesGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof countriesGetDapper>>,
          TError,
          Awaited<ReturnType<typeof countriesGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCountriesGetDapper<TData = Awaited<ReturnType<typeof countriesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: CountriesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countriesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Country via dapper.
 */

export function useCountriesGetDapper<TData = Awaited<ReturnType<typeof countriesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: CountriesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof countriesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCountriesGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new Country.
 */
export const countriesCreate = (
    createCountryRequest: BodyType<CreateCountryRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/countries`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCountryRequest, signal
    },
      options);
    }
  


export const getCountriesCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof countriesCreate>>, TError,{data: BodyType<CreateCountryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof countriesCreate>>, TError,{data: BodyType<CreateCountryRequest>}, TContext> => {

const mutationKey = ['countriesCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof countriesCreate>>, {data: BodyType<CreateCountryRequest>}> = (props) => {
          const {data} = props ?? {};

          return  countriesCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CountriesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof countriesCreate>>>
    export type CountriesCreateMutationBody = BodyType<CreateCountryRequest>
    export type CountriesCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new Country.
 */
export const useCountriesCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof countriesCreate>>, TError,{data: BodyType<CreateCountryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof countriesCreate>>,
        TError,
        {data: BodyType<CreateCountryRequest>},
        TContext
      > => {

      const mutationOptions = getCountriesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a Country.
 */
export const countriesExport = (
    exportCountryRequest: BodyType<ExportCountryRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/countries/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportCountryRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getCountriesExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof countriesExport>>, TError,{data: BodyType<ExportCountryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof countriesExport>>, TError,{data: BodyType<ExportCountryRequest>}, TContext> => {

const mutationKey = ['countriesExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof countriesExport>>, {data: BodyType<ExportCountryRequest>}> = (props) => {
          const {data} = props ?? {};

          return  countriesExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CountriesExportMutationResult = NonNullable<Awaited<ReturnType<typeof countriesExport>>>
    export type CountriesExportMutationBody = BodyType<ExportCountryRequest>
    export type CountriesExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a Country.
 */
export const useCountriesExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof countriesExport>>, TError,{data: BodyType<ExportCountryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof countriesExport>>,
        TError,
        {data: BodyType<ExportCountryRequest>},
        TContext
      > => {

      const mutationOptions = getCountriesExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    