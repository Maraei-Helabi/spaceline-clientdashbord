/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateSubscriptionBundleRequest,
  ErrorResult,
  ExportSubscriptionBundleRequest,
  HttpValidationProblemDetails,
  PaginationResponseOfSubscriptionBundleDto,
  SearchSubscriptionBundleRequest,
  SubscriptionBundleDto,
  SubscriptionBundlesGetDapperParams,
  UpdateSubscriptionBundleRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search SubscriptionBundle using available filters.
 */
export const subscriptionBundlesSearch = (
    searchSubscriptionBundleRequest: BodyType<SearchSubscriptionBundleRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfSubscriptionBundleDto>(
      {url: `/api/v1/subscriptionbundles/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchSubscriptionBundleRequest, signal
    },
      options);
    }
  


export const getSubscriptionBundlesSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionBundlesSearch>>, TError,{data: BodyType<SearchSubscriptionBundleRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionBundlesSearch>>, TError,{data: BodyType<SearchSubscriptionBundleRequest>}, TContext> => {

const mutationKey = ['subscriptionBundlesSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionBundlesSearch>>, {data: BodyType<SearchSubscriptionBundleRequest>}> = (props) => {
          const {data} = props ?? {};

          return  subscriptionBundlesSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionBundlesSearchMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionBundlesSearch>>>
    export type SubscriptionBundlesSearchMutationBody = BodyType<SearchSubscriptionBundleRequest>
    export type SubscriptionBundlesSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search SubscriptionBundle using available filters.
 */
export const useSubscriptionBundlesSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionBundlesSearch>>, TError,{data: BodyType<SearchSubscriptionBundleRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionBundlesSearch>>,
        TError,
        {data: BodyType<SearchSubscriptionBundleRequest>},
        TContext
      > => {

      const mutationOptions = getSubscriptionBundlesSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get SubscriptionBundle details.
 */
export const subscriptionBundlesGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SubscriptionBundleDto>(
      {url: `/api/v1/subscriptionbundles/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getSubscriptionBundlesGetQueryKey = (id?: number,) => {
    return [`/api/v1/subscriptionbundles/${id}`] as const;
    }

    
export const getSubscriptionBundlesGetQueryOptions = <TData = Awaited<ReturnType<typeof subscriptionBundlesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionBundlesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSubscriptionBundlesGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof subscriptionBundlesGet>>> = ({ signal }) => subscriptionBundlesGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof subscriptionBundlesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SubscriptionBundlesGetQueryResult = NonNullable<Awaited<ReturnType<typeof subscriptionBundlesGet>>>
export type SubscriptionBundlesGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useSubscriptionBundlesGet<TData = Awaited<ReturnType<typeof subscriptionBundlesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionBundlesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof subscriptionBundlesGet>>,
          TError,
          Awaited<ReturnType<typeof subscriptionBundlesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSubscriptionBundlesGet<TData = Awaited<ReturnType<typeof subscriptionBundlesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionBundlesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof subscriptionBundlesGet>>,
          TError,
          Awaited<ReturnType<typeof subscriptionBundlesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSubscriptionBundlesGet<TData = Awaited<ReturnType<typeof subscriptionBundlesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionBundlesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get SubscriptionBundle details.
 */

export function useSubscriptionBundlesGet<TData = Awaited<ReturnType<typeof subscriptionBundlesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionBundlesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSubscriptionBundlesGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a SubscriptionBundle.
 */
export const subscriptionBundlesUpdate = (
    id: number,
    updateSubscriptionBundleRequest: BodyType<UpdateSubscriptionBundleRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/subscriptionbundles/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateSubscriptionBundleRequest
    },
      options);
    }
  


export const getSubscriptionBundlesUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionBundlesUpdate>>, TError,{id: number;data: BodyType<UpdateSubscriptionBundleRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionBundlesUpdate>>, TError,{id: number;data: BodyType<UpdateSubscriptionBundleRequest>}, TContext> => {

const mutationKey = ['subscriptionBundlesUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionBundlesUpdate>>, {id: number;data: BodyType<UpdateSubscriptionBundleRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  subscriptionBundlesUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionBundlesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionBundlesUpdate>>>
    export type SubscriptionBundlesUpdateMutationBody = BodyType<UpdateSubscriptionBundleRequest>
    export type SubscriptionBundlesUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a SubscriptionBundle.
 */
export const useSubscriptionBundlesUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionBundlesUpdate>>, TError,{id: number;data: BodyType<UpdateSubscriptionBundleRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionBundlesUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateSubscriptionBundleRequest>},
        TContext
      > => {

      const mutationOptions = getSubscriptionBundlesUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a SubscriptionBundle.
 */
export const subscriptionBundlesDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/subscriptionbundles/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getSubscriptionBundlesDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionBundlesDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionBundlesDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['subscriptionBundlesDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionBundlesDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  subscriptionBundlesDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionBundlesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionBundlesDelete>>>
    
    export type SubscriptionBundlesDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a SubscriptionBundle.
 */
export const useSubscriptionBundlesDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionBundlesDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionBundlesDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getSubscriptionBundlesDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get SubscriptionBundle via dapper.
 */
export const subscriptionBundlesGetDapper = (
    params?: SubscriptionBundlesGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SubscriptionBundleDto>(
      {url: `/api/v1/subscriptionbundles/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSubscriptionBundlesGetDapperQueryKey = (params?: SubscriptionBundlesGetDapperParams,) => {
    return [`/api/v1/subscriptionbundles/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getSubscriptionBundlesGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof subscriptionBundlesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: SubscriptionBundlesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionBundlesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSubscriptionBundlesGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof subscriptionBundlesGetDapper>>> = ({ signal }) => subscriptionBundlesGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof subscriptionBundlesGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SubscriptionBundlesGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof subscriptionBundlesGetDapper>>>
export type SubscriptionBundlesGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useSubscriptionBundlesGetDapper<TData = Awaited<ReturnType<typeof subscriptionBundlesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  SubscriptionBundlesGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionBundlesGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof subscriptionBundlesGetDapper>>,
          TError,
          Awaited<ReturnType<typeof subscriptionBundlesGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSubscriptionBundlesGetDapper<TData = Awaited<ReturnType<typeof subscriptionBundlesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: SubscriptionBundlesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionBundlesGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof subscriptionBundlesGetDapper>>,
          TError,
          Awaited<ReturnType<typeof subscriptionBundlesGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSubscriptionBundlesGetDapper<TData = Awaited<ReturnType<typeof subscriptionBundlesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: SubscriptionBundlesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionBundlesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get SubscriptionBundle via dapper.
 */

export function useSubscriptionBundlesGetDapper<TData = Awaited<ReturnType<typeof subscriptionBundlesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: SubscriptionBundlesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionBundlesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSubscriptionBundlesGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new SubscriptionBundle.
 */
export const subscriptionBundlesCreate = (
    createSubscriptionBundleRequest: BodyType<CreateSubscriptionBundleRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/subscriptionbundles`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createSubscriptionBundleRequest, signal
    },
      options);
    }
  


export const getSubscriptionBundlesCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionBundlesCreate>>, TError,{data: BodyType<CreateSubscriptionBundleRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionBundlesCreate>>, TError,{data: BodyType<CreateSubscriptionBundleRequest>}, TContext> => {

const mutationKey = ['subscriptionBundlesCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionBundlesCreate>>, {data: BodyType<CreateSubscriptionBundleRequest>}> = (props) => {
          const {data} = props ?? {};

          return  subscriptionBundlesCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionBundlesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionBundlesCreate>>>
    export type SubscriptionBundlesCreateMutationBody = BodyType<CreateSubscriptionBundleRequest>
    export type SubscriptionBundlesCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new SubscriptionBundle.
 */
export const useSubscriptionBundlesCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionBundlesCreate>>, TError,{data: BodyType<CreateSubscriptionBundleRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionBundlesCreate>>,
        TError,
        {data: BodyType<CreateSubscriptionBundleRequest>},
        TContext
      > => {

      const mutationOptions = getSubscriptionBundlesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a SubscriptionBundle.
 */
export const subscriptionBundlesExport = (
    exportSubscriptionBundleRequest: BodyType<ExportSubscriptionBundleRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/subscriptionbundles/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportSubscriptionBundleRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getSubscriptionBundlesExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionBundlesExport>>, TError,{data: BodyType<ExportSubscriptionBundleRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionBundlesExport>>, TError,{data: BodyType<ExportSubscriptionBundleRequest>}, TContext> => {

const mutationKey = ['subscriptionBundlesExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionBundlesExport>>, {data: BodyType<ExportSubscriptionBundleRequest>}> = (props) => {
          const {data} = props ?? {};

          return  subscriptionBundlesExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionBundlesExportMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionBundlesExport>>>
    export type SubscriptionBundlesExportMutationBody = BodyType<ExportSubscriptionBundleRequest>
    export type SubscriptionBundlesExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a SubscriptionBundle.
 */
export const useSubscriptionBundlesExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionBundlesExport>>, TError,{data: BodyType<ExportSubscriptionBundleRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionBundlesExport>>,
        TError,
        {data: BodyType<ExportSubscriptionBundleRequest>},
        TContext
      > => {

      const mutationOptions = getSubscriptionBundlesExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    