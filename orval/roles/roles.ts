/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateOrUpdateRoleRequest,
  ErrorResult,
  HttpValidationProblemDetails,
  RoleDto,
  UpdateRolePermissionsRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Get a list of all roles.
 */
export const rolesGetList = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<RoleDto[]>(
      {url: `/api/roles`, method: 'GET', signal
    },
      options);
    }
  

export const getRolesGetListQueryKey = () => {
    return [`/api/roles`] as const;
    }

    
export const getRolesGetListQueryOptions = <TData = Awaited<ReturnType<typeof rolesGetList>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rolesGetList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRolesGetListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof rolesGetList>>> = ({ signal }) => rolesGetList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof rolesGetList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RolesGetListQueryResult = NonNullable<Awaited<ReturnType<typeof rolesGetList>>>
export type RolesGetListQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useRolesGetList<TData = Awaited<ReturnType<typeof rolesGetList>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof rolesGetList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rolesGetList>>,
          TError,
          Awaited<ReturnType<typeof rolesGetList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRolesGetList<TData = Awaited<ReturnType<typeof rolesGetList>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rolesGetList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rolesGetList>>,
          TError,
          Awaited<ReturnType<typeof rolesGetList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRolesGetList<TData = Awaited<ReturnType<typeof rolesGetList>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rolesGetList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a list of all roles.
 */

export function useRolesGetList<TData = Awaited<ReturnType<typeof rolesGetList>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rolesGetList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRolesGetListQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create or update a role.
 */
export const rolesRegisterRole = (
    createOrUpdateRoleRequest: BodyType<CreateOrUpdateRoleRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/roles`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createOrUpdateRoleRequest, signal
    },
      options);
    }
  


export const getRolesRegisterRoleMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof rolesRegisterRole>>, TError,{data: BodyType<CreateOrUpdateRoleRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof rolesRegisterRole>>, TError,{data: BodyType<CreateOrUpdateRoleRequest>}, TContext> => {

const mutationKey = ['rolesRegisterRole'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof rolesRegisterRole>>, {data: BodyType<CreateOrUpdateRoleRequest>}> = (props) => {
          const {data} = props ?? {};

          return  rolesRegisterRole(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RolesRegisterRoleMutationResult = NonNullable<Awaited<ReturnType<typeof rolesRegisterRole>>>
    export type RolesRegisterRoleMutationBody = BodyType<CreateOrUpdateRoleRequest>
    export type RolesRegisterRoleMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create or update a role.
 */
export const useRolesRegisterRole = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof rolesRegisterRole>>, TError,{data: BodyType<CreateOrUpdateRoleRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof rolesRegisterRole>>,
        TError,
        {data: BodyType<CreateOrUpdateRoleRequest>},
        TContext
      > => {

      const mutationOptions = getRolesRegisterRoleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get role details.
 */
export const rolesGetById = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<RoleDto>(
      {url: `/api/roles/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getRolesGetByIdQueryKey = (id?: string,) => {
    return [`/api/roles/${id}`] as const;
    }

    
export const getRolesGetByIdQueryOptions = <TData = Awaited<ReturnType<typeof rolesGetById>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rolesGetById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRolesGetByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof rolesGetById>>> = ({ signal }) => rolesGetById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof rolesGetById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RolesGetByIdQueryResult = NonNullable<Awaited<ReturnType<typeof rolesGetById>>>
export type RolesGetByIdQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useRolesGetById<TData = Awaited<ReturnType<typeof rolesGetById>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof rolesGetById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rolesGetById>>,
          TError,
          Awaited<ReturnType<typeof rolesGetById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRolesGetById<TData = Awaited<ReturnType<typeof rolesGetById>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rolesGetById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rolesGetById>>,
          TError,
          Awaited<ReturnType<typeof rolesGetById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRolesGetById<TData = Awaited<ReturnType<typeof rolesGetById>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rolesGetById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get role details.
 */

export function useRolesGetById<TData = Awaited<ReturnType<typeof rolesGetById>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rolesGetById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRolesGetByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete a role.
 */
export const rolesDelete = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<string>(
      {url: `/api/roles/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getRolesDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof rolesDelete>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof rolesDelete>>, TError,{id: string}, TContext> => {

const mutationKey = ['rolesDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof rolesDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  rolesDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RolesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof rolesDelete>>>
    
    export type RolesDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a role.
 */
export const useRolesDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof rolesDelete>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof rolesDelete>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getRolesDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get role details with its permissions.
 */
export const rolesGetByIdWithPermissions = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<RoleDto>(
      {url: `/api/roles/${id}/permissions`, method: 'GET', signal
    },
      options);
    }
  

export const getRolesGetByIdWithPermissionsQueryKey = (id?: string,) => {
    return [`/api/roles/${id}/permissions`] as const;
    }

    
export const getRolesGetByIdWithPermissionsQueryOptions = <TData = Awaited<ReturnType<typeof rolesGetByIdWithPermissions>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rolesGetByIdWithPermissions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRolesGetByIdWithPermissionsQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof rolesGetByIdWithPermissions>>> = ({ signal }) => rolesGetByIdWithPermissions(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof rolesGetByIdWithPermissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RolesGetByIdWithPermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof rolesGetByIdWithPermissions>>>
export type RolesGetByIdWithPermissionsQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useRolesGetByIdWithPermissions<TData = Awaited<ReturnType<typeof rolesGetByIdWithPermissions>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof rolesGetByIdWithPermissions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rolesGetByIdWithPermissions>>,
          TError,
          Awaited<ReturnType<typeof rolesGetByIdWithPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRolesGetByIdWithPermissions<TData = Awaited<ReturnType<typeof rolesGetByIdWithPermissions>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rolesGetByIdWithPermissions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rolesGetByIdWithPermissions>>,
          TError,
          Awaited<ReturnType<typeof rolesGetByIdWithPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRolesGetByIdWithPermissions<TData = Awaited<ReturnType<typeof rolesGetByIdWithPermissions>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rolesGetByIdWithPermissions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get role details with its permissions.
 */

export function useRolesGetByIdWithPermissions<TData = Awaited<ReturnType<typeof rolesGetByIdWithPermissions>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rolesGetByIdWithPermissions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRolesGetByIdWithPermissionsQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a role's permissions.
 */
export const rolesUpdatePermissions = (
    id: string,
    updateRolePermissionsRequest: BodyType<UpdateRolePermissionsRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<string>(
      {url: `/api/roles/${id}/permissions`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateRolePermissionsRequest
    },
      options);
    }
  


export const getRolesUpdatePermissionsMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof rolesUpdatePermissions>>, TError,{id: string;data: BodyType<UpdateRolePermissionsRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof rolesUpdatePermissions>>, TError,{id: string;data: BodyType<UpdateRolePermissionsRequest>}, TContext> => {

const mutationKey = ['rolesUpdatePermissions'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof rolesUpdatePermissions>>, {id: string;data: BodyType<UpdateRolePermissionsRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  rolesUpdatePermissions(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RolesUpdatePermissionsMutationResult = NonNullable<Awaited<ReturnType<typeof rolesUpdatePermissions>>>
    export type RolesUpdatePermissionsMutationBody = BodyType<UpdateRolePermissionsRequest>
    export type RolesUpdatePermissionsMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a role's permissions.
 */
export const useRolesUpdatePermissions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof rolesUpdatePermissions>>, TError,{id: string;data: BodyType<UpdateRolePermissionsRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof rolesUpdatePermissions>>,
        TError,
        {id: string;data: BodyType<UpdateRolePermissionsRequest>},
        TContext
      > => {

      const mutationOptions = getRolesUpdatePermissionsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary View a role's permissions.
 */
export const rolesViewPermissions = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/roles/permissions`, method: 'GET', signal
    },
      options);
    }
  

export const getRolesViewPermissionsQueryKey = () => {
    return [`/api/roles/permissions`] as const;
    }

    
export const getRolesViewPermissionsQueryOptions = <TData = Awaited<ReturnType<typeof rolesViewPermissions>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rolesViewPermissions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRolesViewPermissionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof rolesViewPermissions>>> = ({ signal }) => rolesViewPermissions(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof rolesViewPermissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RolesViewPermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof rolesViewPermissions>>>
export type RolesViewPermissionsQueryError = ErrorType<unknown>


export function useRolesViewPermissions<TData = Awaited<ReturnType<typeof rolesViewPermissions>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof rolesViewPermissions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof rolesViewPermissions>>,
          TError,
          Awaited<ReturnType<typeof rolesViewPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRolesViewPermissions<TData = Awaited<ReturnType<typeof rolesViewPermissions>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rolesViewPermissions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof rolesViewPermissions>>,
          TError,
          Awaited<ReturnType<typeof rolesViewPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRolesViewPermissions<TData = Awaited<ReturnType<typeof rolesViewPermissions>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rolesViewPermissions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary View a role's permissions.
 */

export function useRolesViewPermissions<TData = Awaited<ReturnType<typeof rolesViewPermissions>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rolesViewPermissions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRolesViewPermissionsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



