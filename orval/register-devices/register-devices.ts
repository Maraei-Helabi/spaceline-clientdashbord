/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApproveRegisterDeviceDto,
  ApproveRegisterDeviceRequest,
  ErrorResult,
  HttpValidationProblemDetails,
  RegisterDeviceDto,
  RegisterDevicesGetParams,
  RegistreDeviceRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Get Register Device details.
 */
export const registerDevicesGet = (
    params?: RegisterDevicesGetParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<RegisterDeviceDto>(
      {url: `/api/v1/registerdevices/verify`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getRegisterDevicesGetQueryKey = (params?: RegisterDevicesGetParams,) => {
    return [`/api/v1/registerdevices/verify`, ...(params ? [params]: [])] as const;
    }

    
export const getRegisterDevicesGetQueryOptions = <TData = Awaited<ReturnType<typeof registerDevicesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: RegisterDevicesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof registerDevicesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRegisterDevicesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof registerDevicesGet>>> = ({ signal }) => registerDevicesGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof registerDevicesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RegisterDevicesGetQueryResult = NonNullable<Awaited<ReturnType<typeof registerDevicesGet>>>
export type RegisterDevicesGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useRegisterDevicesGet<TData = Awaited<ReturnType<typeof registerDevicesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  RegisterDevicesGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof registerDevicesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof registerDevicesGet>>,
          TError,
          Awaited<ReturnType<typeof registerDevicesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRegisterDevicesGet<TData = Awaited<ReturnType<typeof registerDevicesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: RegisterDevicesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof registerDevicesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof registerDevicesGet>>,
          TError,
          Awaited<ReturnType<typeof registerDevicesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRegisterDevicesGet<TData = Awaited<ReturnType<typeof registerDevicesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: RegisterDevicesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof registerDevicesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Register Device details.
 */

export function useRegisterDevicesGet<TData = Awaited<ReturnType<typeof registerDevicesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: RegisterDevicesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof registerDevicesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRegisterDevicesGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new RegisterDevice.
 */
export const registerDevicesCreate = (
    registreDeviceRequest: BodyType<RegistreDeviceRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<null>(
      {url: `/api/v1/registerdevices`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registreDeviceRequest, signal
    },
      options);
    }
  


export const getRegisterDevicesCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerDevicesCreate>>, TError,{data: BodyType<RegistreDeviceRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof registerDevicesCreate>>, TError,{data: BodyType<RegistreDeviceRequest>}, TContext> => {

const mutationKey = ['registerDevicesCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerDevicesCreate>>, {data: BodyType<RegistreDeviceRequest>}> = (props) => {
          const {data} = props ?? {};

          return  registerDevicesCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterDevicesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof registerDevicesCreate>>>
    export type RegisterDevicesCreateMutationBody = BodyType<RegistreDeviceRequest>
    export type RegisterDevicesCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new RegisterDevice.
 */
export const useRegisterDevicesCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerDevicesCreate>>, TError,{data: BodyType<RegistreDeviceRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof registerDevicesCreate>>,
        TError,
        {data: BodyType<RegistreDeviceRequest>},
        TContext
      > => {

      const mutationOptions = getRegisterDevicesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Approve a RegisterDevice.
 */
export const registerDevicesApprove = (
    approveRegisterDeviceRequest: BodyType<ApproveRegisterDeviceRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApproveRegisterDeviceDto>(
      {url: `/api/v1/registerdevices/approve`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: approveRegisterDeviceRequest, signal
    },
      options);
    }
  


export const getRegisterDevicesApproveMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerDevicesApprove>>, TError,{data: BodyType<ApproveRegisterDeviceRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof registerDevicesApprove>>, TError,{data: BodyType<ApproveRegisterDeviceRequest>}, TContext> => {

const mutationKey = ['registerDevicesApprove'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerDevicesApprove>>, {data: BodyType<ApproveRegisterDeviceRequest>}> = (props) => {
          const {data} = props ?? {};

          return  registerDevicesApprove(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterDevicesApproveMutationResult = NonNullable<Awaited<ReturnType<typeof registerDevicesApprove>>>
    export type RegisterDevicesApproveMutationBody = BodyType<ApproveRegisterDeviceRequest>
    export type RegisterDevicesApproveMutationError = ErrorType<unknown>

    /**
 * @summary Approve a RegisterDevice.
 */
export const useRegisterDevicesApprove = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerDevicesApprove>>, TError,{data: BodyType<ApproveRegisterDeviceRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof registerDevicesApprove>>,
        TError,
        {data: BodyType<ApproveRegisterDeviceRequest>},
        TContext
      > => {

      const mutationOptions = getRegisterDevicesApproveMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    