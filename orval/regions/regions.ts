/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateRegionRequest,
  ErrorResult,
  ExportRegionRequest,
  HttpValidationProblemDetails,
  PaginationResponseOfRegionDto,
  RegionDto,
  RegionsGetDapperParams,
  SearchRegionRequest,
  UpdateRegionRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search Region using available filters.
 */
export const regionsSearch = (
    searchRegionRequest: BodyType<SearchRegionRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfRegionDto>(
      {url: `/api/v1/regions/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchRegionRequest, signal
    },
      options);
    }
  


export const getRegionsSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof regionsSearch>>, TError,{data: BodyType<SearchRegionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof regionsSearch>>, TError,{data: BodyType<SearchRegionRequest>}, TContext> => {

const mutationKey = ['regionsSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof regionsSearch>>, {data: BodyType<SearchRegionRequest>}> = (props) => {
          const {data} = props ?? {};

          return  regionsSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegionsSearchMutationResult = NonNullable<Awaited<ReturnType<typeof regionsSearch>>>
    export type RegionsSearchMutationBody = BodyType<SearchRegionRequest>
    export type RegionsSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search Region using available filters.
 */
export const useRegionsSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof regionsSearch>>, TError,{data: BodyType<SearchRegionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof regionsSearch>>,
        TError,
        {data: BodyType<SearchRegionRequest>},
        TContext
      > => {

      const mutationOptions = getRegionsSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Region details.
 */
export const regionsGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<RegionDto>(
      {url: `/api/v1/regions/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getRegionsGetQueryKey = (id?: number,) => {
    return [`/api/v1/regions/${id}`] as const;
    }

    
export const getRegionsGetQueryOptions = <TData = Awaited<ReturnType<typeof regionsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof regionsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRegionsGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof regionsGet>>> = ({ signal }) => regionsGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof regionsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RegionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof regionsGet>>>
export type RegionsGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useRegionsGet<TData = Awaited<ReturnType<typeof regionsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof regionsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof regionsGet>>,
          TError,
          Awaited<ReturnType<typeof regionsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRegionsGet<TData = Awaited<ReturnType<typeof regionsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof regionsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof regionsGet>>,
          TError,
          Awaited<ReturnType<typeof regionsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRegionsGet<TData = Awaited<ReturnType<typeof regionsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof regionsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Region details.
 */

export function useRegionsGet<TData = Awaited<ReturnType<typeof regionsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof regionsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRegionsGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a Region.
 */
export const regionsUpdate = (
    id: number,
    updateRegionRequest: BodyType<UpdateRegionRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/regions/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateRegionRequest
    },
      options);
    }
  


export const getRegionsUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof regionsUpdate>>, TError,{id: number;data: BodyType<UpdateRegionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof regionsUpdate>>, TError,{id: number;data: BodyType<UpdateRegionRequest>}, TContext> => {

const mutationKey = ['regionsUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof regionsUpdate>>, {id: number;data: BodyType<UpdateRegionRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  regionsUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegionsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof regionsUpdate>>>
    export type RegionsUpdateMutationBody = BodyType<UpdateRegionRequest>
    export type RegionsUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a Region.
 */
export const useRegionsUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof regionsUpdate>>, TError,{id: number;data: BodyType<UpdateRegionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof regionsUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateRegionRequest>},
        TContext
      > => {

      const mutationOptions = getRegionsUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a Region.
 */
export const regionsDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/regions/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getRegionsDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof regionsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof regionsDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['regionsDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof regionsDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  regionsDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegionsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof regionsDelete>>>
    
    export type RegionsDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a Region.
 */
export const useRegionsDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof regionsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof regionsDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getRegionsDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Region via dapper.
 */
export const regionsGetDapper = (
    params?: RegionsGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<RegionDto>(
      {url: `/api/v1/regions/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getRegionsGetDapperQueryKey = (params?: RegionsGetDapperParams,) => {
    return [`/api/v1/regions/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getRegionsGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof regionsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: RegionsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof regionsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRegionsGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof regionsGetDapper>>> = ({ signal }) => regionsGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof regionsGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RegionsGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof regionsGetDapper>>>
export type RegionsGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useRegionsGetDapper<TData = Awaited<ReturnType<typeof regionsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  RegionsGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof regionsGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof regionsGetDapper>>,
          TError,
          Awaited<ReturnType<typeof regionsGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRegionsGetDapper<TData = Awaited<ReturnType<typeof regionsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: RegionsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof regionsGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof regionsGetDapper>>,
          TError,
          Awaited<ReturnType<typeof regionsGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRegionsGetDapper<TData = Awaited<ReturnType<typeof regionsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: RegionsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof regionsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Region via dapper.
 */

export function useRegionsGetDapper<TData = Awaited<ReturnType<typeof regionsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: RegionsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof regionsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRegionsGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new Region.
 */
export const regionsCreate = (
    createRegionRequest: BodyType<CreateRegionRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/regions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createRegionRequest, signal
    },
      options);
    }
  


export const getRegionsCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof regionsCreate>>, TError,{data: BodyType<CreateRegionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof regionsCreate>>, TError,{data: BodyType<CreateRegionRequest>}, TContext> => {

const mutationKey = ['regionsCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof regionsCreate>>, {data: BodyType<CreateRegionRequest>}> = (props) => {
          const {data} = props ?? {};

          return  regionsCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegionsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof regionsCreate>>>
    export type RegionsCreateMutationBody = BodyType<CreateRegionRequest>
    export type RegionsCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new Region.
 */
export const useRegionsCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof regionsCreate>>, TError,{data: BodyType<CreateRegionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof regionsCreate>>,
        TError,
        {data: BodyType<CreateRegionRequest>},
        TContext
      > => {

      const mutationOptions = getRegionsCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a Region.
 */
export const regionsExport = (
    exportRegionRequest: BodyType<ExportRegionRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/regions/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportRegionRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getRegionsExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof regionsExport>>, TError,{data: BodyType<ExportRegionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof regionsExport>>, TError,{data: BodyType<ExportRegionRequest>}, TContext> => {

const mutationKey = ['regionsExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof regionsExport>>, {data: BodyType<ExportRegionRequest>}> = (props) => {
          const {data} = props ?? {};

          return  regionsExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegionsExportMutationResult = NonNullable<Awaited<ReturnType<typeof regionsExport>>>
    export type RegionsExportMutationBody = BodyType<ExportRegionRequest>
    export type RegionsExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a Region.
 */
export const useRegionsExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof regionsExport>>, TError,{data: BodyType<ExportRegionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof regionsExport>>,
        TError,
        {data: BodyType<ExportRegionRequest>},
        TContext
      > => {

      const mutationOptions = getRegionsExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    