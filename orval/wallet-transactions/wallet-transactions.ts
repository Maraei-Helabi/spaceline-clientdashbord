/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateWalletTransactionRequest,
  ErrorResult,
  ExportWalletTransactionRequest,
  HttpValidationProblemDetails,
  PaginationResponseOfWalletTransactionDto,
  SearchWalletTransactionRequest,
  UpdateWalletTransactionRequest,
  WalletTransactionDto,
  WalletTransactionsGetDapperParams
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search WalletTransaction using available filters.
 */
export const walletTransactionsSearch = (
    searchWalletTransactionRequest: BodyType<SearchWalletTransactionRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfWalletTransactionDto>(
      {url: `/api/v1/wallettransactions/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchWalletTransactionRequest, signal
    },
      options);
    }
  


export const getWalletTransactionsSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof walletTransactionsSearch>>, TError,{data: BodyType<SearchWalletTransactionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof walletTransactionsSearch>>, TError,{data: BodyType<SearchWalletTransactionRequest>}, TContext> => {

const mutationKey = ['walletTransactionsSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof walletTransactionsSearch>>, {data: BodyType<SearchWalletTransactionRequest>}> = (props) => {
          const {data} = props ?? {};

          return  walletTransactionsSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type WalletTransactionsSearchMutationResult = NonNullable<Awaited<ReturnType<typeof walletTransactionsSearch>>>
    export type WalletTransactionsSearchMutationBody = BodyType<SearchWalletTransactionRequest>
    export type WalletTransactionsSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search WalletTransaction using available filters.
 */
export const useWalletTransactionsSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof walletTransactionsSearch>>, TError,{data: BodyType<SearchWalletTransactionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof walletTransactionsSearch>>,
        TError,
        {data: BodyType<SearchWalletTransactionRequest>},
        TContext
      > => {

      const mutationOptions = getWalletTransactionsSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get WalletTransaction details.
 */
export const walletTransactionsGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<WalletTransactionDto>(
      {url: `/api/v1/wallettransactions/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getWalletTransactionsGetQueryKey = (id?: number,) => {
    return [`/api/v1/wallettransactions/${id}`] as const;
    }

    
export const getWalletTransactionsGetQueryOptions = <TData = Awaited<ReturnType<typeof walletTransactionsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof walletTransactionsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getWalletTransactionsGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof walletTransactionsGet>>> = ({ signal }) => walletTransactionsGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof walletTransactionsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type WalletTransactionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof walletTransactionsGet>>>
export type WalletTransactionsGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useWalletTransactionsGet<TData = Awaited<ReturnType<typeof walletTransactionsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof walletTransactionsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletTransactionsGet>>,
          TError,
          Awaited<ReturnType<typeof walletTransactionsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useWalletTransactionsGet<TData = Awaited<ReturnType<typeof walletTransactionsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof walletTransactionsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletTransactionsGet>>,
          TError,
          Awaited<ReturnType<typeof walletTransactionsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useWalletTransactionsGet<TData = Awaited<ReturnType<typeof walletTransactionsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof walletTransactionsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get WalletTransaction details.
 */

export function useWalletTransactionsGet<TData = Awaited<ReturnType<typeof walletTransactionsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof walletTransactionsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getWalletTransactionsGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a WalletTransaction.
 */
export const walletTransactionsUpdate = (
    id: number,
    updateWalletTransactionRequest: BodyType<UpdateWalletTransactionRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/wallettransactions/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateWalletTransactionRequest
    },
      options);
    }
  


export const getWalletTransactionsUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof walletTransactionsUpdate>>, TError,{id: number;data: BodyType<UpdateWalletTransactionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof walletTransactionsUpdate>>, TError,{id: number;data: BodyType<UpdateWalletTransactionRequest>}, TContext> => {

const mutationKey = ['walletTransactionsUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof walletTransactionsUpdate>>, {id: number;data: BodyType<UpdateWalletTransactionRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  walletTransactionsUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type WalletTransactionsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof walletTransactionsUpdate>>>
    export type WalletTransactionsUpdateMutationBody = BodyType<UpdateWalletTransactionRequest>
    export type WalletTransactionsUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a WalletTransaction.
 */
export const useWalletTransactionsUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof walletTransactionsUpdate>>, TError,{id: number;data: BodyType<UpdateWalletTransactionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof walletTransactionsUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateWalletTransactionRequest>},
        TContext
      > => {

      const mutationOptions = getWalletTransactionsUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a WalletTransaction.
 */
export const walletTransactionsDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/wallettransactions/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getWalletTransactionsDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof walletTransactionsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof walletTransactionsDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['walletTransactionsDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof walletTransactionsDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  walletTransactionsDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type WalletTransactionsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof walletTransactionsDelete>>>
    
    export type WalletTransactionsDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a WalletTransaction.
 */
export const useWalletTransactionsDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof walletTransactionsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof walletTransactionsDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getWalletTransactionsDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get WalletTransaction via dapper.
 */
export const walletTransactionsGetDapper = (
    params?: WalletTransactionsGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<WalletTransactionDto>(
      {url: `/api/v1/wallettransactions/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getWalletTransactionsGetDapperQueryKey = (params?: WalletTransactionsGetDapperParams,) => {
    return [`/api/v1/wallettransactions/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getWalletTransactionsGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof walletTransactionsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: WalletTransactionsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof walletTransactionsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getWalletTransactionsGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof walletTransactionsGetDapper>>> = ({ signal }) => walletTransactionsGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof walletTransactionsGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type WalletTransactionsGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof walletTransactionsGetDapper>>>
export type WalletTransactionsGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useWalletTransactionsGetDapper<TData = Awaited<ReturnType<typeof walletTransactionsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  WalletTransactionsGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof walletTransactionsGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletTransactionsGetDapper>>,
          TError,
          Awaited<ReturnType<typeof walletTransactionsGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useWalletTransactionsGetDapper<TData = Awaited<ReturnType<typeof walletTransactionsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: WalletTransactionsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof walletTransactionsGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletTransactionsGetDapper>>,
          TError,
          Awaited<ReturnType<typeof walletTransactionsGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useWalletTransactionsGetDapper<TData = Awaited<ReturnType<typeof walletTransactionsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: WalletTransactionsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof walletTransactionsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get WalletTransaction via dapper.
 */

export function useWalletTransactionsGetDapper<TData = Awaited<ReturnType<typeof walletTransactionsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: WalletTransactionsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof walletTransactionsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getWalletTransactionsGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new WalletTransaction.
 */
export const walletTransactionsCreate = (
    createWalletTransactionRequest: BodyType<CreateWalletTransactionRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/wallettransactions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createWalletTransactionRequest, signal
    },
      options);
    }
  


export const getWalletTransactionsCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof walletTransactionsCreate>>, TError,{data: BodyType<CreateWalletTransactionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof walletTransactionsCreate>>, TError,{data: BodyType<CreateWalletTransactionRequest>}, TContext> => {

const mutationKey = ['walletTransactionsCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof walletTransactionsCreate>>, {data: BodyType<CreateWalletTransactionRequest>}> = (props) => {
          const {data} = props ?? {};

          return  walletTransactionsCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type WalletTransactionsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof walletTransactionsCreate>>>
    export type WalletTransactionsCreateMutationBody = BodyType<CreateWalletTransactionRequest>
    export type WalletTransactionsCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new WalletTransaction.
 */
export const useWalletTransactionsCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof walletTransactionsCreate>>, TError,{data: BodyType<CreateWalletTransactionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof walletTransactionsCreate>>,
        TError,
        {data: BodyType<CreateWalletTransactionRequest>},
        TContext
      > => {

      const mutationOptions = getWalletTransactionsCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a WalletTransaction.
 */
export const walletTransactionsExport = (
    exportWalletTransactionRequest: BodyType<ExportWalletTransactionRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/wallettransactions/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportWalletTransactionRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getWalletTransactionsExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof walletTransactionsExport>>, TError,{data: BodyType<ExportWalletTransactionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof walletTransactionsExport>>, TError,{data: BodyType<ExportWalletTransactionRequest>}, TContext> => {

const mutationKey = ['walletTransactionsExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof walletTransactionsExport>>, {data: BodyType<ExportWalletTransactionRequest>}> = (props) => {
          const {data} = props ?? {};

          return  walletTransactionsExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type WalletTransactionsExportMutationResult = NonNullable<Awaited<ReturnType<typeof walletTransactionsExport>>>
    export type WalletTransactionsExportMutationBody = BodyType<ExportWalletTransactionRequest>
    export type WalletTransactionsExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a WalletTransaction.
 */
export const useWalletTransactionsExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof walletTransactionsExport>>, TError,{data: BodyType<ExportWalletTransactionRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof walletTransactionsExport>>,
        TError,
        {data: BodyType<ExportWalletTransactionRequest>},
        TContext
      > => {

      const mutationOptions = getWalletTransactionsExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    