/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BrandDto,
  CreateBrandRequest,
  ErrorResult,
  HttpValidationProblemDetails,
  PaginationResponseOfBrandDto,
  SearchBrandRequest,
  UpdateBrandRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search brands using available filters.
 */
export const brandsSearch = (
    searchBrandRequest: BodyType<SearchBrandRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfBrandDto>(
      {url: `/api/v1/brands/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchBrandRequest, signal
    },
      options);
    }
  


export const getBrandsSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof brandsSearch>>, TError,{data: BodyType<SearchBrandRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof brandsSearch>>, TError,{data: BodyType<SearchBrandRequest>}, TContext> => {

const mutationKey = ['brandsSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof brandsSearch>>, {data: BodyType<SearchBrandRequest>}> = (props) => {
          const {data} = props ?? {};

          return  brandsSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BrandsSearchMutationResult = NonNullable<Awaited<ReturnType<typeof brandsSearch>>>
    export type BrandsSearchMutationBody = BodyType<SearchBrandRequest>
    export type BrandsSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search brands using available filters.
 */
export const useBrandsSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof brandsSearch>>, TError,{data: BodyType<SearchBrandRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof brandsSearch>>,
        TError,
        {data: BodyType<SearchBrandRequest>},
        TContext
      > => {

      const mutationOptions = getBrandsSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get brand details.
 */
export const brandsGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<BrandDto>(
      {url: `/api/v1/brands/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getBrandsGetQueryKey = (id?: number,) => {
    return [`/api/v1/brands/${id}`] as const;
    }

    
export const getBrandsGetQueryOptions = <TData = Awaited<ReturnType<typeof brandsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof brandsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBrandsGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof brandsGet>>> = ({ signal }) => brandsGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof brandsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type BrandsGetQueryResult = NonNullable<Awaited<ReturnType<typeof brandsGet>>>
export type BrandsGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useBrandsGet<TData = Awaited<ReturnType<typeof brandsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof brandsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof brandsGet>>,
          TError,
          Awaited<ReturnType<typeof brandsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBrandsGet<TData = Awaited<ReturnType<typeof brandsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof brandsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof brandsGet>>,
          TError,
          Awaited<ReturnType<typeof brandsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBrandsGet<TData = Awaited<ReturnType<typeof brandsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof brandsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get brand details.
 */

export function useBrandsGet<TData = Awaited<ReturnType<typeof brandsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof brandsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getBrandsGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a brand.
 */
export const brandsUpdate = (
    id: number,
    updateBrandRequest: BodyType<UpdateBrandRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/brands/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateBrandRequest
    },
      options);
    }
  


export const getBrandsUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof brandsUpdate>>, TError,{id: number;data: BodyType<UpdateBrandRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof brandsUpdate>>, TError,{id: number;data: BodyType<UpdateBrandRequest>}, TContext> => {

const mutationKey = ['brandsUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof brandsUpdate>>, {id: number;data: BodyType<UpdateBrandRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  brandsUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BrandsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof brandsUpdate>>>
    export type BrandsUpdateMutationBody = BodyType<UpdateBrandRequest>
    export type BrandsUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a brand.
 */
export const useBrandsUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof brandsUpdate>>, TError,{id: number;data: BodyType<UpdateBrandRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof brandsUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateBrandRequest>},
        TContext
      > => {

      const mutationOptions = getBrandsUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a brand.
 */
export const brandsDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/brands/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getBrandsDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof brandsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof brandsDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['brandsDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof brandsDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  brandsDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BrandsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof brandsDelete>>>
    
    export type BrandsDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a brand.
 */
export const useBrandsDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof brandsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof brandsDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getBrandsDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Create a new brand.
 */
export const brandsCreate = (
    createBrandRequest: BodyType<CreateBrandRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/brands`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createBrandRequest, signal
    },
      options);
    }
  


export const getBrandsCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof brandsCreate>>, TError,{data: BodyType<CreateBrandRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof brandsCreate>>, TError,{data: BodyType<CreateBrandRequest>}, TContext> => {

const mutationKey = ['brandsCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof brandsCreate>>, {data: BodyType<CreateBrandRequest>}> = (props) => {
          const {data} = props ?? {};

          return  brandsCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BrandsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof brandsCreate>>>
    export type BrandsCreateMutationBody = BodyType<CreateBrandRequest>
    export type BrandsCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new brand.
 */
export const useBrandsCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof brandsCreate>>, TError,{data: BodyType<CreateBrandRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof brandsCreate>>,
        TError,
        {data: BodyType<CreateBrandRequest>},
        TContext
      > => {

      const mutationOptions = getBrandsCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    