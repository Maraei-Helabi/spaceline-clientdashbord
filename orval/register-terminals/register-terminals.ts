/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateRegisterTerminalRequest,
  ErrorResult,
  ExportRegisterTerminalRequest,
  HttpValidationProblemDetails,
  PaginationResponseOfRegisterTerminalsCustomerDto,
  RegisterTerminalsCustomerDto,
  SearchRegisterTerminalRequest,
  UpdateRegisterTerminalRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search RegisterTerminal using available filters.
 */
export const registerTerminalsSearch = (
    searchRegisterTerminalRequest: BodyType<SearchRegisterTerminalRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfRegisterTerminalsCustomerDto>(
      {url: `/api/v1/registerterminals/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchRegisterTerminalRequest, signal
    },
      options);
    }
  


export const getRegisterTerminalsSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerTerminalsSearch>>, TError,{data: BodyType<SearchRegisterTerminalRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof registerTerminalsSearch>>, TError,{data: BodyType<SearchRegisterTerminalRequest>}, TContext> => {

const mutationKey = ['registerTerminalsSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerTerminalsSearch>>, {data: BodyType<SearchRegisterTerminalRequest>}> = (props) => {
          const {data} = props ?? {};

          return  registerTerminalsSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterTerminalsSearchMutationResult = NonNullable<Awaited<ReturnType<typeof registerTerminalsSearch>>>
    export type RegisterTerminalsSearchMutationBody = BodyType<SearchRegisterTerminalRequest>
    export type RegisterTerminalsSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search RegisterTerminal using available filters.
 */
export const useRegisterTerminalsSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerTerminalsSearch>>, TError,{data: BodyType<SearchRegisterTerminalRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof registerTerminalsSearch>>,
        TError,
        {data: BodyType<SearchRegisterTerminalRequest>},
        TContext
      > => {

      const mutationOptions = getRegisterTerminalsSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get RegisterTerminal details.
 */
export const registerTerminalsGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<RegisterTerminalsCustomerDto>(
      {url: `/api/v1/registerterminals/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getRegisterTerminalsGetQueryKey = (id?: number,) => {
    return [`/api/v1/registerterminals/${id}`] as const;
    }

    
export const getRegisterTerminalsGetQueryOptions = <TData = Awaited<ReturnType<typeof registerTerminalsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof registerTerminalsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRegisterTerminalsGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof registerTerminalsGet>>> = ({ signal }) => registerTerminalsGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof registerTerminalsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RegisterTerminalsGetQueryResult = NonNullable<Awaited<ReturnType<typeof registerTerminalsGet>>>
export type RegisterTerminalsGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useRegisterTerminalsGet<TData = Awaited<ReturnType<typeof registerTerminalsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof registerTerminalsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof registerTerminalsGet>>,
          TError,
          Awaited<ReturnType<typeof registerTerminalsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRegisterTerminalsGet<TData = Awaited<ReturnType<typeof registerTerminalsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof registerTerminalsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof registerTerminalsGet>>,
          TError,
          Awaited<ReturnType<typeof registerTerminalsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRegisterTerminalsGet<TData = Awaited<ReturnType<typeof registerTerminalsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof registerTerminalsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get RegisterTerminal details.
 */

export function useRegisterTerminalsGet<TData = Awaited<ReturnType<typeof registerTerminalsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof registerTerminalsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRegisterTerminalsGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a RegisterTerminal.
 */
export const registerTerminalsUpdate = (
    id: number,
    updateRegisterTerminalRequest: BodyType<UpdateRegisterTerminalRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/registerterminals/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateRegisterTerminalRequest
    },
      options);
    }
  


export const getRegisterTerminalsUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerTerminalsUpdate>>, TError,{id: number;data: BodyType<UpdateRegisterTerminalRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof registerTerminalsUpdate>>, TError,{id: number;data: BodyType<UpdateRegisterTerminalRequest>}, TContext> => {

const mutationKey = ['registerTerminalsUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerTerminalsUpdate>>, {id: number;data: BodyType<UpdateRegisterTerminalRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  registerTerminalsUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterTerminalsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof registerTerminalsUpdate>>>
    export type RegisterTerminalsUpdateMutationBody = BodyType<UpdateRegisterTerminalRequest>
    export type RegisterTerminalsUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a RegisterTerminal.
 */
export const useRegisterTerminalsUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerTerminalsUpdate>>, TError,{id: number;data: BodyType<UpdateRegisterTerminalRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof registerTerminalsUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateRegisterTerminalRequest>},
        TContext
      > => {

      const mutationOptions = getRegisterTerminalsUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a RegisterTerminal.
 */
export const registerTerminalsDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/registerterminals/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getRegisterTerminalsDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerTerminalsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof registerTerminalsDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['registerTerminalsDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerTerminalsDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  registerTerminalsDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterTerminalsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof registerTerminalsDelete>>>
    
    export type RegisterTerminalsDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a RegisterTerminal.
 */
export const useRegisterTerminalsDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerTerminalsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof registerTerminalsDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getRegisterTerminalsDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Create a new RegisterTerminal.
 */
export const registerTerminalsCreate = (
    createRegisterTerminalRequest: BodyType<CreateRegisterTerminalRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string[]>(
      {url: `/api/v1/registerterminals`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createRegisterTerminalRequest, signal
    },
      options);
    }
  


export const getRegisterTerminalsCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerTerminalsCreate>>, TError,{data: BodyType<CreateRegisterTerminalRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof registerTerminalsCreate>>, TError,{data: BodyType<CreateRegisterTerminalRequest>}, TContext> => {

const mutationKey = ['registerTerminalsCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerTerminalsCreate>>, {data: BodyType<CreateRegisterTerminalRequest>}> = (props) => {
          const {data} = props ?? {};

          return  registerTerminalsCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterTerminalsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof registerTerminalsCreate>>>
    export type RegisterTerminalsCreateMutationBody = BodyType<CreateRegisterTerminalRequest>
    export type RegisterTerminalsCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new RegisterTerminal.
 */
export const useRegisterTerminalsCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerTerminalsCreate>>, TError,{data: BodyType<CreateRegisterTerminalRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof registerTerminalsCreate>>,
        TError,
        {data: BodyType<CreateRegisterTerminalRequest>},
        TContext
      > => {

      const mutationOptions = getRegisterTerminalsCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a RegisterTerminal.
 */
export const registerTerminalsExport = (
    exportRegisterTerminalRequest: BodyType<ExportRegisterTerminalRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/registerterminals/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportRegisterTerminalRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getRegisterTerminalsExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerTerminalsExport>>, TError,{data: BodyType<ExportRegisterTerminalRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof registerTerminalsExport>>, TError,{data: BodyType<ExportRegisterTerminalRequest>}, TContext> => {

const mutationKey = ['registerTerminalsExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerTerminalsExport>>, {data: BodyType<ExportRegisterTerminalRequest>}> = (props) => {
          const {data} = props ?? {};

          return  registerTerminalsExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterTerminalsExportMutationResult = NonNullable<Awaited<ReturnType<typeof registerTerminalsExport>>>
    export type RegisterTerminalsExportMutationBody = BodyType<ExportRegisterTerminalRequest>
    export type RegisterTerminalsExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a RegisterTerminal.
 */
export const useRegisterTerminalsExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerTerminalsExport>>, TError,{data: BodyType<ExportRegisterTerminalRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof registerTerminalsExport>>,
        TError,
        {data: BodyType<ExportRegisterTerminalRequest>},
        TContext
      > => {

      const mutationOptions = getRegisterTerminalsExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    