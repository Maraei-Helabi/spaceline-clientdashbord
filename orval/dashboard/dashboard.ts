/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ErrorResult,
  HttpValidationProblemDetails,
  StatsDto
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Get statistics for the dashboard.
 */
export const dashboardGet = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<StatsDto>(
      {url: `/api/v1/dashboard`, method: 'GET', signal
    },
      options);
    }
  

export const getDashboardGetQueryKey = () => {
    return [`/api/v1/dashboard`] as const;
    }

    
export const getDashboardGetQueryOptions = <TData = Awaited<ReturnType<typeof dashboardGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashboardGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDashboardGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dashboardGet>>> = ({ signal }) => dashboardGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof dashboardGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DashboardGetQueryResult = NonNullable<Awaited<ReturnType<typeof dashboardGet>>>
export type DashboardGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useDashboardGet<TData = Awaited<ReturnType<typeof dashboardGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashboardGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dashboardGet>>,
          TError,
          Awaited<ReturnType<typeof dashboardGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDashboardGet<TData = Awaited<ReturnType<typeof dashboardGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashboardGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dashboardGet>>,
          TError,
          Awaited<ReturnType<typeof dashboardGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDashboardGet<TData = Awaited<ReturnType<typeof dashboardGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashboardGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get statistics for the dashboard.
 */

export function useDashboardGet<TData = Awaited<ReturnType<typeof dashboardGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashboardGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDashboardGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



