/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApiResponseOfCheckPaymentResponse,
  PaymentConfirmationRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary check order by payment code or PaymentProvider id.
 */
export const paymentsCheckPayment = (
    query: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseOfCheckPaymentResponse>(
      {url: `/api/v1/payments/check/${query}`, method: 'GET', signal
    },
      options);
    }
  

export const getPaymentsCheckPaymentQueryKey = (query?: number,) => {
    return [`/api/v1/payments/check/${query}`] as const;
    }

    
export const getPaymentsCheckPaymentQueryOptions = <TData = Awaited<ReturnType<typeof paymentsCheckPayment>>, TError = ErrorType<unknown>>(query: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentsCheckPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPaymentsCheckPaymentQueryKey(query);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof paymentsCheckPayment>>> = ({ signal }) => paymentsCheckPayment(query, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(query), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof paymentsCheckPayment>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PaymentsCheckPaymentQueryResult = NonNullable<Awaited<ReturnType<typeof paymentsCheckPayment>>>
export type PaymentsCheckPaymentQueryError = ErrorType<unknown>


export function usePaymentsCheckPayment<TData = Awaited<ReturnType<typeof paymentsCheckPayment>>, TError = ErrorType<unknown>>(
 query: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentsCheckPayment>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentsCheckPayment>>,
          TError,
          Awaited<ReturnType<typeof paymentsCheckPayment>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePaymentsCheckPayment<TData = Awaited<ReturnType<typeof paymentsCheckPayment>>, TError = ErrorType<unknown>>(
 query: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentsCheckPayment>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof paymentsCheckPayment>>,
          TError,
          Awaited<ReturnType<typeof paymentsCheckPayment>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePaymentsCheckPayment<TData = Awaited<ReturnType<typeof paymentsCheckPayment>>, TError = ErrorType<unknown>>(
 query: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentsCheckPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary check order by payment code or PaymentProvider id.
 */

export function usePaymentsCheckPayment<TData = Awaited<ReturnType<typeof paymentsCheckPayment>>, TError = ErrorType<unknown>>(
 query: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof paymentsCheckPayment>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPaymentsCheckPaymentQueryOptions(query,options)

  const _query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  _query.queryKey = queryOptions.queryKey ;

  return _query;
}



/**
 * @summary confirm payment.
 */
export const paymentsConfirmPayment = (
    paymentConfirmationRequest: BodyType<PaymentConfirmationRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/payments/confirm`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: paymentConfirmationRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getPaymentsConfirmPaymentMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentsConfirmPayment>>, TError,{data: BodyType<PaymentConfirmationRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof paymentsConfirmPayment>>, TError,{data: BodyType<PaymentConfirmationRequest>}, TContext> => {

const mutationKey = ['paymentsConfirmPayment'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof paymentsConfirmPayment>>, {data: BodyType<PaymentConfirmationRequest>}> = (props) => {
          const {data} = props ?? {};

          return  paymentsConfirmPayment(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PaymentsConfirmPaymentMutationResult = NonNullable<Awaited<ReturnType<typeof paymentsConfirmPayment>>>
    export type PaymentsConfirmPaymentMutationBody = BodyType<PaymentConfirmationRequest>
    export type PaymentsConfirmPaymentMutationError = ErrorType<unknown>

    /**
 * @summary confirm payment.
 */
export const usePaymentsConfirmPayment = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentsConfirmPayment>>, TError,{data: BodyType<PaymentConfirmationRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof paymentsConfirmPayment>>,
        TError,
        {data: BodyType<PaymentConfirmationRequest>},
        TContext
      > => {

      const mutationOptions = getPaymentsConfirmPaymentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    