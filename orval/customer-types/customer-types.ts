/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateCustomerTypeRequest,
  CustomerTypeDto,
  CustomerTypesGetDapperParams,
  ErrorResult,
  ExportCustomerTypeRequest,
  HttpValidationProblemDetails,
  PaginationResponseOfCustomerTypeDto,
  SearchCustomerTypeRequest,
  UpdateCustomerTypeRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search CustomerTypes using available filters.
 */
export const customerTypesSearch = (
    searchCustomerTypeRequest: BodyType<SearchCustomerTypeRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfCustomerTypeDto>(
      {url: `/api/v1/customertypes/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchCustomerTypeRequest, signal
    },
      options);
    }
  


export const getCustomerTypesSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customerTypesSearch>>, TError,{data: BodyType<SearchCustomerTypeRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof customerTypesSearch>>, TError,{data: BodyType<SearchCustomerTypeRequest>}, TContext> => {

const mutationKey = ['customerTypesSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof customerTypesSearch>>, {data: BodyType<SearchCustomerTypeRequest>}> = (props) => {
          const {data} = props ?? {};

          return  customerTypesSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CustomerTypesSearchMutationResult = NonNullable<Awaited<ReturnType<typeof customerTypesSearch>>>
    export type CustomerTypesSearchMutationBody = BodyType<SearchCustomerTypeRequest>
    export type CustomerTypesSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search CustomerTypes using available filters.
 */
export const useCustomerTypesSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customerTypesSearch>>, TError,{data: BodyType<SearchCustomerTypeRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof customerTypesSearch>>,
        TError,
        {data: BodyType<SearchCustomerTypeRequest>},
        TContext
      > => {

      const mutationOptions = getCustomerTypesSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get CustomerType details.
 */
export const customerTypesGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CustomerTypeDto>(
      {url: `/api/v1/customertypes/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getCustomerTypesGetQueryKey = (id?: number,) => {
    return [`/api/v1/customertypes/${id}`] as const;
    }

    
export const getCustomerTypesGetQueryOptions = <TData = Awaited<ReturnType<typeof customerTypesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customerTypesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerTypesGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof customerTypesGet>>> = ({ signal }) => customerTypesGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof customerTypesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CustomerTypesGetQueryResult = NonNullable<Awaited<ReturnType<typeof customerTypesGet>>>
export type CustomerTypesGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useCustomerTypesGet<TData = Awaited<ReturnType<typeof customerTypesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof customerTypesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof customerTypesGet>>,
          TError,
          Awaited<ReturnType<typeof customerTypesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCustomerTypesGet<TData = Awaited<ReturnType<typeof customerTypesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customerTypesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof customerTypesGet>>,
          TError,
          Awaited<ReturnType<typeof customerTypesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCustomerTypesGet<TData = Awaited<ReturnType<typeof customerTypesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customerTypesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get CustomerType details.
 */

export function useCustomerTypesGet<TData = Awaited<ReturnType<typeof customerTypesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customerTypesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCustomerTypesGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a CustomerType.
 */
export const customerTypesUpdate = (
    id: number,
    updateCustomerTypeRequest: BodyType<UpdateCustomerTypeRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/customertypes/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCustomerTypeRequest
    },
      options);
    }
  


export const getCustomerTypesUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customerTypesUpdate>>, TError,{id: number;data: BodyType<UpdateCustomerTypeRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof customerTypesUpdate>>, TError,{id: number;data: BodyType<UpdateCustomerTypeRequest>}, TContext> => {

const mutationKey = ['customerTypesUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof customerTypesUpdate>>, {id: number;data: BodyType<UpdateCustomerTypeRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  customerTypesUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CustomerTypesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof customerTypesUpdate>>>
    export type CustomerTypesUpdateMutationBody = BodyType<UpdateCustomerTypeRequest>
    export type CustomerTypesUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a CustomerType.
 */
export const useCustomerTypesUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customerTypesUpdate>>, TError,{id: number;data: BodyType<UpdateCustomerTypeRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof customerTypesUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateCustomerTypeRequest>},
        TContext
      > => {

      const mutationOptions = getCustomerTypesUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a CustomerType.
 */
export const customerTypesDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/customertypes/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getCustomerTypesDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customerTypesDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof customerTypesDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['customerTypesDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof customerTypesDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  customerTypesDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CustomerTypesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof customerTypesDelete>>>
    
    export type CustomerTypesDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a CustomerType.
 */
export const useCustomerTypesDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customerTypesDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof customerTypesDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getCustomerTypesDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get CustomerType details via dapper.
 */
export const customerTypesGetDapper = (
    params?: CustomerTypesGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CustomerTypeDto>(
      {url: `/api/v1/customertypes/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCustomerTypesGetDapperQueryKey = (params?: CustomerTypesGetDapperParams,) => {
    return [`/api/v1/customertypes/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getCustomerTypesGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof customerTypesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: CustomerTypesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customerTypesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerTypesGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof customerTypesGetDapper>>> = ({ signal }) => customerTypesGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof customerTypesGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CustomerTypesGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof customerTypesGetDapper>>>
export type CustomerTypesGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useCustomerTypesGetDapper<TData = Awaited<ReturnType<typeof customerTypesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  CustomerTypesGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof customerTypesGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof customerTypesGetDapper>>,
          TError,
          Awaited<ReturnType<typeof customerTypesGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCustomerTypesGetDapper<TData = Awaited<ReturnType<typeof customerTypesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: CustomerTypesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customerTypesGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof customerTypesGetDapper>>,
          TError,
          Awaited<ReturnType<typeof customerTypesGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCustomerTypesGetDapper<TData = Awaited<ReturnType<typeof customerTypesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: CustomerTypesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customerTypesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get CustomerType details via dapper.
 */

export function useCustomerTypesGetDapper<TData = Awaited<ReturnType<typeof customerTypesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: CustomerTypesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customerTypesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCustomerTypesGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new CustomerType.
 */
export const customerTypesCreate = (
    createCustomerTypeRequest: BodyType<CreateCustomerTypeRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/customertypes`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCustomerTypeRequest, signal
    },
      options);
    }
  


export const getCustomerTypesCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customerTypesCreate>>, TError,{data: BodyType<CreateCustomerTypeRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof customerTypesCreate>>, TError,{data: BodyType<CreateCustomerTypeRequest>}, TContext> => {

const mutationKey = ['customerTypesCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof customerTypesCreate>>, {data: BodyType<CreateCustomerTypeRequest>}> = (props) => {
          const {data} = props ?? {};

          return  customerTypesCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CustomerTypesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof customerTypesCreate>>>
    export type CustomerTypesCreateMutationBody = BodyType<CreateCustomerTypeRequest>
    export type CustomerTypesCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new CustomerType.
 */
export const useCustomerTypesCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customerTypesCreate>>, TError,{data: BodyType<CreateCustomerTypeRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof customerTypesCreate>>,
        TError,
        {data: BodyType<CreateCustomerTypeRequest>},
        TContext
      > => {

      const mutationOptions = getCustomerTypesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a CustomerTypes.
 */
export const customerTypesExport = (
    exportCustomerTypeRequest: BodyType<ExportCustomerTypeRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/customertypes/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportCustomerTypeRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getCustomerTypesExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customerTypesExport>>, TError,{data: BodyType<ExportCustomerTypeRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof customerTypesExport>>, TError,{data: BodyType<ExportCustomerTypeRequest>}, TContext> => {

const mutationKey = ['customerTypesExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof customerTypesExport>>, {data: BodyType<ExportCustomerTypeRequest>}> = (props) => {
          const {data} = props ?? {};

          return  customerTypesExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CustomerTypesExportMutationResult = NonNullable<Awaited<ReturnType<typeof customerTypesExport>>>
    export type CustomerTypesExportMutationBody = BodyType<ExportCustomerTypeRequest>
    export type CustomerTypesExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a CustomerTypes.
 */
export const useCustomerTypesExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customerTypesExport>>, TError,{data: BodyType<ExportCustomerTypeRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof customerTypesExport>>,
        TError,
        {data: BodyType<ExportCustomerTypeRequest>},
        TContext
      > => {

      const mutationOptions = getCustomerTypesExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    