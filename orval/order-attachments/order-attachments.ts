/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateOrderAttachmentRequest,
  ErrorResult,
  ExportOrderAttachmentRequest,
  HttpValidationProblemDetails,
  OrderAttachmentDto,
  OrderAttachmentsGetDapperParams,
  PaginationResponseOfOrderAttachmentDto,
  SearchOrderAttachmentRequest,
  UpdateOrderAttachmentRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search OrderAttachment using available filters.
 */
export const orderAttachmentsSearch = (
    searchOrderAttachmentRequest: BodyType<SearchOrderAttachmentRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfOrderAttachmentDto>(
      {url: `/api/v1/orderattachments/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchOrderAttachmentRequest, signal
    },
      options);
    }
  


export const getOrderAttachmentsSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof orderAttachmentsSearch>>, TError,{data: BodyType<SearchOrderAttachmentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof orderAttachmentsSearch>>, TError,{data: BodyType<SearchOrderAttachmentRequest>}, TContext> => {

const mutationKey = ['orderAttachmentsSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof orderAttachmentsSearch>>, {data: BodyType<SearchOrderAttachmentRequest>}> = (props) => {
          const {data} = props ?? {};

          return  orderAttachmentsSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrderAttachmentsSearchMutationResult = NonNullable<Awaited<ReturnType<typeof orderAttachmentsSearch>>>
    export type OrderAttachmentsSearchMutationBody = BodyType<SearchOrderAttachmentRequest>
    export type OrderAttachmentsSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search OrderAttachment using available filters.
 */
export const useOrderAttachmentsSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof orderAttachmentsSearch>>, TError,{data: BodyType<SearchOrderAttachmentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof orderAttachmentsSearch>>,
        TError,
        {data: BodyType<SearchOrderAttachmentRequest>},
        TContext
      > => {

      const mutationOptions = getOrderAttachmentsSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get OrderAttachments details.
 */
export const orderAttachmentsGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OrderAttachmentDto>(
      {url: `/api/v1/orderattachments/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getOrderAttachmentsGetQueryKey = (id?: number,) => {
    return [`/api/v1/orderattachments/${id}`] as const;
    }

    
export const getOrderAttachmentsGetQueryOptions = <TData = Awaited<ReturnType<typeof orderAttachmentsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof orderAttachmentsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrderAttachmentsGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof orderAttachmentsGet>>> = ({ signal }) => orderAttachmentsGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof orderAttachmentsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type OrderAttachmentsGetQueryResult = NonNullable<Awaited<ReturnType<typeof orderAttachmentsGet>>>
export type OrderAttachmentsGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useOrderAttachmentsGet<TData = Awaited<ReturnType<typeof orderAttachmentsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof orderAttachmentsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof orderAttachmentsGet>>,
          TError,
          Awaited<ReturnType<typeof orderAttachmentsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOrderAttachmentsGet<TData = Awaited<ReturnType<typeof orderAttachmentsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof orderAttachmentsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof orderAttachmentsGet>>,
          TError,
          Awaited<ReturnType<typeof orderAttachmentsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOrderAttachmentsGet<TData = Awaited<ReturnType<typeof orderAttachmentsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof orderAttachmentsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get OrderAttachments details.
 */

export function useOrderAttachmentsGet<TData = Awaited<ReturnType<typeof orderAttachmentsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof orderAttachmentsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getOrderAttachmentsGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a OrderAttachment.
 */
export const orderAttachmentsUpdate = (
    id: number,
    updateOrderAttachmentRequest: BodyType<UpdateOrderAttachmentRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/orderattachments/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateOrderAttachmentRequest
    },
      options);
    }
  


export const getOrderAttachmentsUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof orderAttachmentsUpdate>>, TError,{id: number;data: BodyType<UpdateOrderAttachmentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof orderAttachmentsUpdate>>, TError,{id: number;data: BodyType<UpdateOrderAttachmentRequest>}, TContext> => {

const mutationKey = ['orderAttachmentsUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof orderAttachmentsUpdate>>, {id: number;data: BodyType<UpdateOrderAttachmentRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  orderAttachmentsUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrderAttachmentsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof orderAttachmentsUpdate>>>
    export type OrderAttachmentsUpdateMutationBody = BodyType<UpdateOrderAttachmentRequest>
    export type OrderAttachmentsUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a OrderAttachment.
 */
export const useOrderAttachmentsUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof orderAttachmentsUpdate>>, TError,{id: number;data: BodyType<UpdateOrderAttachmentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof orderAttachmentsUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateOrderAttachmentRequest>},
        TContext
      > => {

      const mutationOptions = getOrderAttachmentsUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a OrderAttachment.
 */
export const orderAttachmentsDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/orderattachments/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getOrderAttachmentsDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof orderAttachmentsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof orderAttachmentsDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['orderAttachmentsDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof orderAttachmentsDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  orderAttachmentsDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrderAttachmentsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof orderAttachmentsDelete>>>
    
    export type OrderAttachmentsDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a OrderAttachment.
 */
export const useOrderAttachmentsDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof orderAttachmentsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof orderAttachmentsDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getOrderAttachmentsDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get OrderAttachment via dapper.
 */
export const orderAttachmentsGetDapper = (
    params?: OrderAttachmentsGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OrderAttachmentDto>(
      {url: `/api/v1/orderattachments/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getOrderAttachmentsGetDapperQueryKey = (params?: OrderAttachmentsGetDapperParams,) => {
    return [`/api/v1/orderattachments/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getOrderAttachmentsGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof orderAttachmentsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: OrderAttachmentsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof orderAttachmentsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrderAttachmentsGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof orderAttachmentsGetDapper>>> = ({ signal }) => orderAttachmentsGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof orderAttachmentsGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type OrderAttachmentsGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof orderAttachmentsGetDapper>>>
export type OrderAttachmentsGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useOrderAttachmentsGetDapper<TData = Awaited<ReturnType<typeof orderAttachmentsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  OrderAttachmentsGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof orderAttachmentsGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof orderAttachmentsGetDapper>>,
          TError,
          Awaited<ReturnType<typeof orderAttachmentsGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOrderAttachmentsGetDapper<TData = Awaited<ReturnType<typeof orderAttachmentsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: OrderAttachmentsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof orderAttachmentsGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof orderAttachmentsGetDapper>>,
          TError,
          Awaited<ReturnType<typeof orderAttachmentsGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOrderAttachmentsGetDapper<TData = Awaited<ReturnType<typeof orderAttachmentsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: OrderAttachmentsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof orderAttachmentsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get OrderAttachment via dapper.
 */

export function useOrderAttachmentsGetDapper<TData = Awaited<ReturnType<typeof orderAttachmentsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: OrderAttachmentsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof orderAttachmentsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getOrderAttachmentsGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new OrderAttachment.
 */
export const orderAttachmentsCreate = (
    createOrderAttachmentRequest: BodyType<CreateOrderAttachmentRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/orderattachments`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createOrderAttachmentRequest, signal
    },
      options);
    }
  


export const getOrderAttachmentsCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof orderAttachmentsCreate>>, TError,{data: BodyType<CreateOrderAttachmentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof orderAttachmentsCreate>>, TError,{data: BodyType<CreateOrderAttachmentRequest>}, TContext> => {

const mutationKey = ['orderAttachmentsCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof orderAttachmentsCreate>>, {data: BodyType<CreateOrderAttachmentRequest>}> = (props) => {
          const {data} = props ?? {};

          return  orderAttachmentsCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrderAttachmentsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof orderAttachmentsCreate>>>
    export type OrderAttachmentsCreateMutationBody = BodyType<CreateOrderAttachmentRequest>
    export type OrderAttachmentsCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new OrderAttachment.
 */
export const useOrderAttachmentsCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof orderAttachmentsCreate>>, TError,{data: BodyType<CreateOrderAttachmentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof orderAttachmentsCreate>>,
        TError,
        {data: BodyType<CreateOrderAttachmentRequest>},
        TContext
      > => {

      const mutationOptions = getOrderAttachmentsCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a OrderAttachment.
 */
export const orderAttachmentsExport = (
    exportOrderAttachmentRequest: BodyType<ExportOrderAttachmentRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/orderattachments/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportOrderAttachmentRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getOrderAttachmentsExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof orderAttachmentsExport>>, TError,{data: BodyType<ExportOrderAttachmentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof orderAttachmentsExport>>, TError,{data: BodyType<ExportOrderAttachmentRequest>}, TContext> => {

const mutationKey = ['orderAttachmentsExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof orderAttachmentsExport>>, {data: BodyType<ExportOrderAttachmentRequest>}> = (props) => {
          const {data} = props ?? {};

          return  orderAttachmentsExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrderAttachmentsExportMutationResult = NonNullable<Awaited<ReturnType<typeof orderAttachmentsExport>>>
    export type OrderAttachmentsExportMutationBody = BodyType<ExportOrderAttachmentRequest>
    export type OrderAttachmentsExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a OrderAttachment.
 */
export const useOrderAttachmentsExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof orderAttachmentsExport>>, TError,{data: BodyType<ExportOrderAttachmentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof orderAttachmentsExport>>,
        TError,
        {data: BodyType<ExportOrderAttachmentRequest>},
        TContext
      > => {

      const mutationOptions = getOrderAttachmentsExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    