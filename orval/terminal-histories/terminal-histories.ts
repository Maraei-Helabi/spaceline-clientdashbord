/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ErrorResult,
  HttpValidationProblemDetails,
  PaginationResponseOfTerminalHistoryDto,
  SearchTerminalHistoryRequest,
  TerminalHistoryDto
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search Terminal Histories using available filters.
 */
export const terminalHistoriesSearch = (
    searchTerminalHistoryRequest: BodyType<SearchTerminalHistoryRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfTerminalHistoryDto>(
      {url: `/api/v1/terminalhistories/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchTerminalHistoryRequest, signal
    },
      options);
    }
  


export const getTerminalHistoriesSearchMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof terminalHistoriesSearch>>, TError,{data: BodyType<SearchTerminalHistoryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof terminalHistoriesSearch>>, TError,{data: BodyType<SearchTerminalHistoryRequest>}, TContext> => {

const mutationKey = ['terminalHistoriesSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof terminalHistoriesSearch>>, {data: BodyType<SearchTerminalHistoryRequest>}> = (props) => {
          const {data} = props ?? {};

          return  terminalHistoriesSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TerminalHistoriesSearchMutationResult = NonNullable<Awaited<ReturnType<typeof terminalHistoriesSearch>>>
    export type TerminalHistoriesSearchMutationBody = BodyType<SearchTerminalHistoryRequest>
    export type TerminalHistoriesSearchMutationError = ErrorType<unknown>

    /**
 * @summary Search Terminal Histories using available filters.
 */
export const useTerminalHistoriesSearch = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof terminalHistoriesSearch>>, TError,{data: BodyType<SearchTerminalHistoryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof terminalHistoriesSearch>>,
        TError,
        {data: BodyType<SearchTerminalHistoryRequest>},
        TContext
      > => {

      const mutationOptions = getTerminalHistoriesSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Terminal details.
 */
export const terminalHistoriesGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TerminalHistoryDto>(
      {url: `/api/v1/terminalhistories/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getTerminalHistoriesGetQueryKey = (id?: number,) => {
    return [`/api/v1/terminalhistories/${id}`] as const;
    }

    
export const getTerminalHistoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof terminalHistoriesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof terminalHistoriesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTerminalHistoriesGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof terminalHistoriesGet>>> = ({ signal }) => terminalHistoriesGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof terminalHistoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TerminalHistoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof terminalHistoriesGet>>>
export type TerminalHistoriesGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useTerminalHistoriesGet<TData = Awaited<ReturnType<typeof terminalHistoriesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof terminalHistoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof terminalHistoriesGet>>,
          TError,
          Awaited<ReturnType<typeof terminalHistoriesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTerminalHistoriesGet<TData = Awaited<ReturnType<typeof terminalHistoriesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof terminalHistoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof terminalHistoriesGet>>,
          TError,
          Awaited<ReturnType<typeof terminalHistoriesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTerminalHistoriesGet<TData = Awaited<ReturnType<typeof terminalHistoriesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof terminalHistoriesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Terminal details.
 */

export function useTerminalHistoriesGet<TData = Awaited<ReturnType<typeof terminalHistoriesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof terminalHistoriesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTerminalHistoriesGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Export a Terminal.
 */
export const terminalHistoriesExport = (
    searchTerminalHistoryRequest: BodyType<SearchTerminalHistoryRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/terminalhistories/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchTerminalHistoryRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getTerminalHistoriesExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof terminalHistoriesExport>>, TError,{data: BodyType<SearchTerminalHistoryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof terminalHistoriesExport>>, TError,{data: BodyType<SearchTerminalHistoryRequest>}, TContext> => {

const mutationKey = ['terminalHistoriesExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof terminalHistoriesExport>>, {data: BodyType<SearchTerminalHistoryRequest>}> = (props) => {
          const {data} = props ?? {};

          return  terminalHistoriesExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TerminalHistoriesExportMutationResult = NonNullable<Awaited<ReturnType<typeof terminalHistoriesExport>>>
    export type TerminalHistoriesExportMutationBody = BodyType<SearchTerminalHistoryRequest>
    export type TerminalHistoriesExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a Terminal.
 */
export const useTerminalHistoriesExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof terminalHistoriesExport>>, TError,{data: BodyType<SearchTerminalHistoryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof terminalHistoriesExport>>,
        TError,
        {data: BodyType<SearchTerminalHistoryRequest>},
        TContext
      > => {

      const mutationOptions = getTerminalHistoriesExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    