/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateProductRequest,
  ErrorResult,
  ExportProductRequest,
  HttpValidationProblemDetails,
  PaginationResponseOfProductDto,
  ProductDto,
  ProductsGetDapperParams,
  SearchProductRequest,
  UpdateProductRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search products using available filters.
 */
export const productsSearch = (
    searchProductRequest: BodyType<SearchProductRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfProductDto>(
      {url: `/api/v1/products/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchProductRequest, signal
    },
      options);
    }
  


export const getProductsSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsSearch>>, TError,{data: BodyType<SearchProductRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof productsSearch>>, TError,{data: BodyType<SearchProductRequest>}, TContext> => {

const mutationKey = ['productsSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productsSearch>>, {data: BodyType<SearchProductRequest>}> = (props) => {
          const {data} = props ?? {};

          return  productsSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProductsSearchMutationResult = NonNullable<Awaited<ReturnType<typeof productsSearch>>>
    export type ProductsSearchMutationBody = BodyType<SearchProductRequest>
    export type ProductsSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search products using available filters.
 */
export const useProductsSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsSearch>>, TError,{data: BodyType<SearchProductRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof productsSearch>>,
        TError,
        {data: BodyType<SearchProductRequest>},
        TContext
      > => {

      const mutationOptions = getProductsSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get product details.
 */
export const productsGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ProductDto>(
      {url: `/api/v1/products/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getProductsGetQueryKey = (id?: number,) => {
    return [`/api/v1/products/${id}`] as const;
    }

    
export const getProductsGetQueryOptions = <TData = Awaited<ReturnType<typeof productsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof productsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProductsGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof productsGet>>> = ({ signal }) => productsGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof productsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProductsGetQueryResult = NonNullable<Awaited<ReturnType<typeof productsGet>>>
export type ProductsGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useProductsGet<TData = Awaited<ReturnType<typeof productsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof productsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof productsGet>>,
          TError,
          Awaited<ReturnType<typeof productsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProductsGet<TData = Awaited<ReturnType<typeof productsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof productsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof productsGet>>,
          TError,
          Awaited<ReturnType<typeof productsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProductsGet<TData = Awaited<ReturnType<typeof productsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof productsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get product details.
 */

export function useProductsGet<TData = Awaited<ReturnType<typeof productsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof productsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProductsGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a product.
 */
export const productsUpdate = (
    id: number,
    updateProductRequest: BodyType<UpdateProductRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/products/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateProductRequest
    },
      options);
    }
  


export const getProductsUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsUpdate>>, TError,{id: number;data: BodyType<UpdateProductRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof productsUpdate>>, TError,{id: number;data: BodyType<UpdateProductRequest>}, TContext> => {

const mutationKey = ['productsUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productsUpdate>>, {id: number;data: BodyType<UpdateProductRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  productsUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProductsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof productsUpdate>>>
    export type ProductsUpdateMutationBody = BodyType<UpdateProductRequest>
    export type ProductsUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a product.
 */
export const useProductsUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsUpdate>>, TError,{id: number;data: BodyType<UpdateProductRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof productsUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateProductRequest>},
        TContext
      > => {

      const mutationOptions = getProductsUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a product.
 */
export const productsDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/products/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getProductsDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof productsDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['productsDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productsDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  productsDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProductsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof productsDelete>>>
    
    export type ProductsDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a product.
 */
export const useProductsDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof productsDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getProductsDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get product details via dapper.
 */
export const productsGetDapper = (
    params?: ProductsGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ProductDto>(
      {url: `/api/v1/products/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getProductsGetDapperQueryKey = (params?: ProductsGetDapperParams,) => {
    return [`/api/v1/products/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getProductsGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof productsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: ProductsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof productsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProductsGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof productsGetDapper>>> = ({ signal }) => productsGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof productsGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProductsGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof productsGetDapper>>>
export type ProductsGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useProductsGetDapper<TData = Awaited<ReturnType<typeof productsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  ProductsGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof productsGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof productsGetDapper>>,
          TError,
          Awaited<ReturnType<typeof productsGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProductsGetDapper<TData = Awaited<ReturnType<typeof productsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: ProductsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof productsGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof productsGetDapper>>,
          TError,
          Awaited<ReturnType<typeof productsGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProductsGetDapper<TData = Awaited<ReturnType<typeof productsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: ProductsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof productsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get product details via dapper.
 */

export function useProductsGetDapper<TData = Awaited<ReturnType<typeof productsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: ProductsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof productsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProductsGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new product.
 */
export const productsCreate = (
    createProductRequest: BodyType<CreateProductRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/products`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createProductRequest, signal
    },
      options);
    }
  


export const getProductsCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsCreate>>, TError,{data: BodyType<CreateProductRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof productsCreate>>, TError,{data: BodyType<CreateProductRequest>}, TContext> => {

const mutationKey = ['productsCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productsCreate>>, {data: BodyType<CreateProductRequest>}> = (props) => {
          const {data} = props ?? {};

          return  productsCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProductsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof productsCreate>>>
    export type ProductsCreateMutationBody = BodyType<CreateProductRequest>
    export type ProductsCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new product.
 */
export const useProductsCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsCreate>>, TError,{data: BodyType<CreateProductRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof productsCreate>>,
        TError,
        {data: BodyType<CreateProductRequest>},
        TContext
      > => {

      const mutationOptions = getProductsCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a products.
 */
export const productsExport = (
    exportProductRequest: BodyType<ExportProductRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/products/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportProductRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getProductsExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsExport>>, TError,{data: BodyType<ExportProductRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof productsExport>>, TError,{data: BodyType<ExportProductRequest>}, TContext> => {

const mutationKey = ['productsExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof productsExport>>, {data: BodyType<ExportProductRequest>}> = (props) => {
          const {data} = props ?? {};

          return  productsExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProductsExportMutationResult = NonNullable<Awaited<ReturnType<typeof productsExport>>>
    export type ProductsExportMutationBody = BodyType<ExportProductRequest>
    export type ProductsExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a products.
 */
export const useProductsExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof productsExport>>, TError,{data: BodyType<ExportProductRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof productsExport>>,
        TError,
        {data: BodyType<ExportProductRequest>},
        TContext
      > => {

      const mutationOptions = getProductsExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    