/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AgentDto,
  AgentsGetDapperParams,
  CreateAgentRequest,
  ErrorResult,
  ExportAgentRequest,
  HttpValidationProblemDetails,
  PaginationResponseOfAgentDto,
  SearchAgentRequest,
  UpdateAgentRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search Agent using available filters.
 */
export const agentsSearch = (
    searchAgentRequest: BodyType<SearchAgentRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfAgentDto>(
      {url: `/api/v1/agents/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchAgentRequest, signal
    },
      options);
    }
  


export const getAgentsSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof agentsSearch>>, TError,{data: BodyType<SearchAgentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof agentsSearch>>, TError,{data: BodyType<SearchAgentRequest>}, TContext> => {

const mutationKey = ['agentsSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof agentsSearch>>, {data: BodyType<SearchAgentRequest>}> = (props) => {
          const {data} = props ?? {};

          return  agentsSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AgentsSearchMutationResult = NonNullable<Awaited<ReturnType<typeof agentsSearch>>>
    export type AgentsSearchMutationBody = BodyType<SearchAgentRequest>
    export type AgentsSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search Agent using available filters.
 */
export const useAgentsSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof agentsSearch>>, TError,{data: BodyType<SearchAgentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof agentsSearch>>,
        TError,
        {data: BodyType<SearchAgentRequest>},
        TContext
      > => {

      const mutationOptions = getAgentsSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get product details.
 */
export const agentsGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<AgentDto>(
      {url: `/api/v1/agents/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getAgentsGetQueryKey = (id?: number,) => {
    return [`/api/v1/agents/${id}`] as const;
    }

    
export const getAgentsGetQueryOptions = <TData = Awaited<ReturnType<typeof agentsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof agentsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAgentsGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof agentsGet>>> = ({ signal }) => agentsGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof agentsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AgentsGetQueryResult = NonNullable<Awaited<ReturnType<typeof agentsGet>>>
export type AgentsGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useAgentsGet<TData = Awaited<ReturnType<typeof agentsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof agentsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof agentsGet>>,
          TError,
          Awaited<ReturnType<typeof agentsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAgentsGet<TData = Awaited<ReturnType<typeof agentsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof agentsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof agentsGet>>,
          TError,
          Awaited<ReturnType<typeof agentsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAgentsGet<TData = Awaited<ReturnType<typeof agentsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof agentsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get product details.
 */

export function useAgentsGet<TData = Awaited<ReturnType<typeof agentsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof agentsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAgentsGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a Agent.
 */
export const agentsUpdate = (
    id: number,
    updateAgentRequest: BodyType<UpdateAgentRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/agents/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateAgentRequest
    },
      options);
    }
  


export const getAgentsUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof agentsUpdate>>, TError,{id: number;data: BodyType<UpdateAgentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof agentsUpdate>>, TError,{id: number;data: BodyType<UpdateAgentRequest>}, TContext> => {

const mutationKey = ['agentsUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof agentsUpdate>>, {id: number;data: BodyType<UpdateAgentRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  agentsUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AgentsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof agentsUpdate>>>
    export type AgentsUpdateMutationBody = BodyType<UpdateAgentRequest>
    export type AgentsUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a Agent.
 */
export const useAgentsUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof agentsUpdate>>, TError,{id: number;data: BodyType<UpdateAgentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof agentsUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateAgentRequest>},
        TContext
      > => {

      const mutationOptions = getAgentsUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a Agent.
 */
export const agentsDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/agents/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getAgentsDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof agentsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof agentsDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['agentsDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof agentsDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  agentsDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AgentsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof agentsDelete>>>
    
    export type AgentsDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a Agent.
 */
export const useAgentsDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof agentsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof agentsDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getAgentsDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Agent via dapper.
 */
export const agentsGetDapper = (
    params?: AgentsGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<AgentDto>(
      {url: `/api/v1/agents/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getAgentsGetDapperQueryKey = (params?: AgentsGetDapperParams,) => {
    return [`/api/v1/agents/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getAgentsGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof agentsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: AgentsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof agentsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAgentsGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof agentsGetDapper>>> = ({ signal }) => agentsGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof agentsGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AgentsGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof agentsGetDapper>>>
export type AgentsGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useAgentsGetDapper<TData = Awaited<ReturnType<typeof agentsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  AgentsGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof agentsGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof agentsGetDapper>>,
          TError,
          Awaited<ReturnType<typeof agentsGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAgentsGetDapper<TData = Awaited<ReturnType<typeof agentsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: AgentsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof agentsGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof agentsGetDapper>>,
          TError,
          Awaited<ReturnType<typeof agentsGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAgentsGetDapper<TData = Awaited<ReturnType<typeof agentsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: AgentsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof agentsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Agent via dapper.
 */

export function useAgentsGetDapper<TData = Awaited<ReturnType<typeof agentsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: AgentsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof agentsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAgentsGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new Agent.
 */
export const agentsCreate = (
    createAgentRequest: BodyType<CreateAgentRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/agents`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createAgentRequest, signal
    },
      options);
    }
  


export const getAgentsCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof agentsCreate>>, TError,{data: BodyType<CreateAgentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof agentsCreate>>, TError,{data: BodyType<CreateAgentRequest>}, TContext> => {

const mutationKey = ['agentsCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof agentsCreate>>, {data: BodyType<CreateAgentRequest>}> = (props) => {
          const {data} = props ?? {};

          return  agentsCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AgentsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof agentsCreate>>>
    export type AgentsCreateMutationBody = BodyType<CreateAgentRequest>
    export type AgentsCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new Agent.
 */
export const useAgentsCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof agentsCreate>>, TError,{data: BodyType<CreateAgentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof agentsCreate>>,
        TError,
        {data: BodyType<CreateAgentRequest>},
        TContext
      > => {

      const mutationOptions = getAgentsCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a Agent.
 */
export const agentsExport = (
    exportAgentRequest: BodyType<ExportAgentRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/agents/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportAgentRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getAgentsExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof agentsExport>>, TError,{data: BodyType<ExportAgentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof agentsExport>>, TError,{data: BodyType<ExportAgentRequest>}, TContext> => {

const mutationKey = ['agentsExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof agentsExport>>, {data: BodyType<ExportAgentRequest>}> = (props) => {
          const {data} = props ?? {};

          return  agentsExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AgentsExportMutationResult = NonNullable<Awaited<ReturnType<typeof agentsExport>>>
    export type AgentsExportMutationBody = BodyType<ExportAgentRequest>
    export type AgentsExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a Agent.
 */
export const useAgentsExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof agentsExport>>, TError,{data: BodyType<ExportAgentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof agentsExport>>,
        TError,
        {data: BodyType<ExportAgentRequest>},
        TContext
      > => {

      const mutationOptions = getAgentsExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    