/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateSubscriptionHistoryRequest,
  ErrorResult,
  ExportSubscriptionHistoryRequest,
  HttpValidationProblemDetails,
  PaginationResponseOfSubscriptionHistoryDto,
  SearchSubscriptionHistoryRequest,
  SubscriptionHistoriesGetDapperParams,
  SubscriptionHistoryDto,
  UpdateSubscriptionHistoryRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search SubscriptionHistory using available filters.
 */
export const subscriptionHistoriesSearch = (
    searchSubscriptionHistoryRequest: BodyType<SearchSubscriptionHistoryRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfSubscriptionHistoryDto>(
      {url: `/api/v1/subscriptionhistories/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchSubscriptionHistoryRequest, signal
    },
      options);
    }
  


export const getSubscriptionHistoriesSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionHistoriesSearch>>, TError,{data: BodyType<SearchSubscriptionHistoryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionHistoriesSearch>>, TError,{data: BodyType<SearchSubscriptionHistoryRequest>}, TContext> => {

const mutationKey = ['subscriptionHistoriesSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionHistoriesSearch>>, {data: BodyType<SearchSubscriptionHistoryRequest>}> = (props) => {
          const {data} = props ?? {};

          return  subscriptionHistoriesSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionHistoriesSearchMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionHistoriesSearch>>>
    export type SubscriptionHistoriesSearchMutationBody = BodyType<SearchSubscriptionHistoryRequest>
    export type SubscriptionHistoriesSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search SubscriptionHistory using available filters.
 */
export const useSubscriptionHistoriesSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionHistoriesSearch>>, TError,{data: BodyType<SearchSubscriptionHistoryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionHistoriesSearch>>,
        TError,
        {data: BodyType<SearchSubscriptionHistoryRequest>},
        TContext
      > => {

      const mutationOptions = getSubscriptionHistoriesSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get SubscriptionHistory via dapper.
 */
export const subscriptionHistoriesGetDapper = (
    params?: SubscriptionHistoriesGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SubscriptionHistoryDto>(
      {url: `/api/v1/subscriptionhistories/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSubscriptionHistoriesGetDapperQueryKey = (params?: SubscriptionHistoriesGetDapperParams,) => {
    return [`/api/v1/subscriptionhistories/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getSubscriptionHistoriesGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof subscriptionHistoriesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: SubscriptionHistoriesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionHistoriesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSubscriptionHistoriesGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof subscriptionHistoriesGetDapper>>> = ({ signal }) => subscriptionHistoriesGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof subscriptionHistoriesGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SubscriptionHistoriesGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof subscriptionHistoriesGetDapper>>>
export type SubscriptionHistoriesGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useSubscriptionHistoriesGetDapper<TData = Awaited<ReturnType<typeof subscriptionHistoriesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  SubscriptionHistoriesGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionHistoriesGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof subscriptionHistoriesGetDapper>>,
          TError,
          Awaited<ReturnType<typeof subscriptionHistoriesGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSubscriptionHistoriesGetDapper<TData = Awaited<ReturnType<typeof subscriptionHistoriesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: SubscriptionHistoriesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionHistoriesGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof subscriptionHistoriesGetDapper>>,
          TError,
          Awaited<ReturnType<typeof subscriptionHistoriesGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSubscriptionHistoriesGetDapper<TData = Awaited<ReturnType<typeof subscriptionHistoriesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: SubscriptionHistoriesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionHistoriesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get SubscriptionHistory via dapper.
 */

export function useSubscriptionHistoriesGetDapper<TData = Awaited<ReturnType<typeof subscriptionHistoriesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: SubscriptionHistoriesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof subscriptionHistoriesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSubscriptionHistoriesGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new SubscriptionHistory.
 */
export const subscriptionHistoriesCreate = (
    createSubscriptionHistoryRequest: BodyType<CreateSubscriptionHistoryRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/subscriptionhistories`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createSubscriptionHistoryRequest, signal
    },
      options);
    }
  


export const getSubscriptionHistoriesCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionHistoriesCreate>>, TError,{data: BodyType<CreateSubscriptionHistoryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionHistoriesCreate>>, TError,{data: BodyType<CreateSubscriptionHistoryRequest>}, TContext> => {

const mutationKey = ['subscriptionHistoriesCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionHistoriesCreate>>, {data: BodyType<CreateSubscriptionHistoryRequest>}> = (props) => {
          const {data} = props ?? {};

          return  subscriptionHistoriesCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionHistoriesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionHistoriesCreate>>>
    export type SubscriptionHistoriesCreateMutationBody = BodyType<CreateSubscriptionHistoryRequest>
    export type SubscriptionHistoriesCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new SubscriptionHistory.
 */
export const useSubscriptionHistoriesCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionHistoriesCreate>>, TError,{data: BodyType<CreateSubscriptionHistoryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionHistoriesCreate>>,
        TError,
        {data: BodyType<CreateSubscriptionHistoryRequest>},
        TContext
      > => {

      const mutationOptions = getSubscriptionHistoriesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Update a SubscriptionHistory.
 */
export const subscriptionHistoriesUpdate = (
    id: number,
    updateSubscriptionHistoryRequest: BodyType<UpdateSubscriptionHistoryRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/subscriptionhistories/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateSubscriptionHistoryRequest
    },
      options);
    }
  


export const getSubscriptionHistoriesUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionHistoriesUpdate>>, TError,{id: number;data: BodyType<UpdateSubscriptionHistoryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionHistoriesUpdate>>, TError,{id: number;data: BodyType<UpdateSubscriptionHistoryRequest>}, TContext> => {

const mutationKey = ['subscriptionHistoriesUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionHistoriesUpdate>>, {id: number;data: BodyType<UpdateSubscriptionHistoryRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  subscriptionHistoriesUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionHistoriesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionHistoriesUpdate>>>
    export type SubscriptionHistoriesUpdateMutationBody = BodyType<UpdateSubscriptionHistoryRequest>
    export type SubscriptionHistoriesUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a SubscriptionHistory.
 */
export const useSubscriptionHistoriesUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionHistoriesUpdate>>, TError,{id: number;data: BodyType<UpdateSubscriptionHistoryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionHistoriesUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateSubscriptionHistoryRequest>},
        TContext
      > => {

      const mutationOptions = getSubscriptionHistoriesUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a SubscriptionHistory.
 */
export const subscriptionHistoriesDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/subscriptionhistories/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getSubscriptionHistoriesDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionHistoriesDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionHistoriesDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['subscriptionHistoriesDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionHistoriesDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  subscriptionHistoriesDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionHistoriesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionHistoriesDelete>>>
    
    export type SubscriptionHistoriesDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a SubscriptionHistory.
 */
export const useSubscriptionHistoriesDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionHistoriesDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionHistoriesDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getSubscriptionHistoriesDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a SubscriptionHistory.
 */
export const subscriptionHistoriesExport = (
    exportSubscriptionHistoryRequest: BodyType<ExportSubscriptionHistoryRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/subscriptionhistories/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportSubscriptionHistoryRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getSubscriptionHistoriesExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionHistoriesExport>>, TError,{data: BodyType<ExportSubscriptionHistoryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof subscriptionHistoriesExport>>, TError,{data: BodyType<ExportSubscriptionHistoryRequest>}, TContext> => {

const mutationKey = ['subscriptionHistoriesExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof subscriptionHistoriesExport>>, {data: BodyType<ExportSubscriptionHistoryRequest>}> = (props) => {
          const {data} = props ?? {};

          return  subscriptionHistoriesExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubscriptionHistoriesExportMutationResult = NonNullable<Awaited<ReturnType<typeof subscriptionHistoriesExport>>>
    export type SubscriptionHistoriesExportMutationBody = BodyType<ExportSubscriptionHistoryRequest>
    export type SubscriptionHistoriesExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a SubscriptionHistory.
 */
export const useSubscriptionHistoriesExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof subscriptionHistoriesExport>>, TError,{data: BodyType<ExportSubscriptionHistoryRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof subscriptionHistoriesExport>>,
        TError,
        {data: BodyType<ExportSubscriptionHistoryRequest>},
        TContext
      > => {

      const mutationOptions = getSubscriptionHistoriesExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    