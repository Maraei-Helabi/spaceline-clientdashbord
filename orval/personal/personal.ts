/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApiResponseOfObject,
  AuditDto,
  ChangePasswordRequest,
  ErrorResult,
  HttpValidationProblemDetails,
  UpdateProfileRequest,
  UserDto
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Get profile details of currently logged in user.
 */
export const personalGetProfile = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserDto>(
      {url: `/api/personal/profile`, method: 'GET', signal
    },
      options);
    }
  

export const getPersonalGetProfileQueryKey = () => {
    return [`/api/personal/profile`] as const;
    }

    
export const getPersonalGetProfileQueryOptions = <TData = Awaited<ReturnType<typeof personalGetProfile>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof personalGetProfile>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPersonalGetProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof personalGetProfile>>> = ({ signal }) => personalGetProfile(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof personalGetProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PersonalGetProfileQueryResult = NonNullable<Awaited<ReturnType<typeof personalGetProfile>>>
export type PersonalGetProfileQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function usePersonalGetProfile<TData = Awaited<ReturnType<typeof personalGetProfile>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof personalGetProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof personalGetProfile>>,
          TError,
          Awaited<ReturnType<typeof personalGetProfile>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePersonalGetProfile<TData = Awaited<ReturnType<typeof personalGetProfile>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof personalGetProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof personalGetProfile>>,
          TError,
          Awaited<ReturnType<typeof personalGetProfile>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePersonalGetProfile<TData = Awaited<ReturnType<typeof personalGetProfile>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof personalGetProfile>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get profile details of currently logged in user.
 */

export function usePersonalGetProfile<TData = Awaited<ReturnType<typeof personalGetProfile>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof personalGetProfile>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPersonalGetProfileQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update profile details of currently logged in user.
 */
export const personalUpdateProfile = (
    updateProfileRequest: BodyType<UpdateProfileRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<null>(
      {url: `/api/personal/profile`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateProfileRequest
    },
      options);
    }
  


export const getPersonalUpdateProfileMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof personalUpdateProfile>>, TError,{data: BodyType<UpdateProfileRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof personalUpdateProfile>>, TError,{data: BodyType<UpdateProfileRequest>}, TContext> => {

const mutationKey = ['personalUpdateProfile'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof personalUpdateProfile>>, {data: BodyType<UpdateProfileRequest>}> = (props) => {
          const {data} = props ?? {};

          return  personalUpdateProfile(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PersonalUpdateProfileMutationResult = NonNullable<Awaited<ReturnType<typeof personalUpdateProfile>>>
    export type PersonalUpdateProfileMutationBody = BodyType<UpdateProfileRequest>
    export type PersonalUpdateProfileMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update profile details of currently logged in user.
 */
export const usePersonalUpdateProfile = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof personalUpdateProfile>>, TError,{data: BodyType<UpdateProfileRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof personalUpdateProfile>>,
        TError,
        {data: BodyType<UpdateProfileRequest>},
        TContext
      > => {

      const mutationOptions = getPersonalUpdateProfileMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Change password of currently logged-in user.
 */
export const personalChangePassword = (
    changePasswordRequest: BodyType<ChangePasswordRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<ApiResponseOfObject>(
      {url: `/api/personal/change-password`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: changePasswordRequest
    },
      options);
    }
  


export const getPersonalChangePasswordMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof personalChangePassword>>, TError,{data: BodyType<ChangePasswordRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof personalChangePassword>>, TError,{data: BodyType<ChangePasswordRequest>}, TContext> => {

const mutationKey = ['personalChangePassword'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof personalChangePassword>>, {data: BodyType<ChangePasswordRequest>}> = (props) => {
          const {data} = props ?? {};

          return  personalChangePassword(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PersonalChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof personalChangePassword>>>
    export type PersonalChangePasswordMutationBody = BodyType<ChangePasswordRequest>
    export type PersonalChangePasswordMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Change password of currently logged-in user.
 */
export const usePersonalChangePassword = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof personalChangePassword>>, TError,{data: BodyType<ChangePasswordRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof personalChangePassword>>,
        TError,
        {data: BodyType<ChangePasswordRequest>},
        TContext
      > => {

      const mutationOptions = getPersonalChangePasswordMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get permissions of currently logged in user.
 */
export const personalGetPermissions = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string[]>(
      {url: `/api/personal/permissions`, method: 'GET', signal
    },
      options);
    }
  

export const getPersonalGetPermissionsQueryKey = () => {
    return [`/api/personal/permissions`] as const;
    }

    
export const getPersonalGetPermissionsQueryOptions = <TData = Awaited<ReturnType<typeof personalGetPermissions>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof personalGetPermissions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPersonalGetPermissionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof personalGetPermissions>>> = ({ signal }) => personalGetPermissions(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof personalGetPermissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PersonalGetPermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof personalGetPermissions>>>
export type PersonalGetPermissionsQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function usePersonalGetPermissions<TData = Awaited<ReturnType<typeof personalGetPermissions>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof personalGetPermissions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof personalGetPermissions>>,
          TError,
          Awaited<ReturnType<typeof personalGetPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePersonalGetPermissions<TData = Awaited<ReturnType<typeof personalGetPermissions>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof personalGetPermissions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof personalGetPermissions>>,
          TError,
          Awaited<ReturnType<typeof personalGetPermissions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePersonalGetPermissions<TData = Awaited<ReturnType<typeof personalGetPermissions>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof personalGetPermissions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get permissions of currently logged in user.
 */

export function usePersonalGetPermissions<TData = Awaited<ReturnType<typeof personalGetPermissions>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof personalGetPermissions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPersonalGetPermissionsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get audit logs of currently logged in user.
 */
export const personalGetLogs = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<AuditDto[]>(
      {url: `/api/personal/logs`, method: 'GET', signal
    },
      options);
    }
  

export const getPersonalGetLogsQueryKey = () => {
    return [`/api/personal/logs`] as const;
    }

    
export const getPersonalGetLogsQueryOptions = <TData = Awaited<ReturnType<typeof personalGetLogs>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof personalGetLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPersonalGetLogsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof personalGetLogs>>> = ({ signal }) => personalGetLogs(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof personalGetLogs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PersonalGetLogsQueryResult = NonNullable<Awaited<ReturnType<typeof personalGetLogs>>>
export type PersonalGetLogsQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function usePersonalGetLogs<TData = Awaited<ReturnType<typeof personalGetLogs>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof personalGetLogs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof personalGetLogs>>,
          TError,
          Awaited<ReturnType<typeof personalGetLogs>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePersonalGetLogs<TData = Awaited<ReturnType<typeof personalGetLogs>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof personalGetLogs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof personalGetLogs>>,
          TError,
          Awaited<ReturnType<typeof personalGetLogs>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePersonalGetLogs<TData = Awaited<ReturnType<typeof personalGetLogs>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof personalGetLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get audit logs of currently logged in user.
 */

export function usePersonalGetLogs<TData = Awaited<ReturnType<typeof personalGetLogs>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof personalGetLogs>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPersonalGetLogsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



