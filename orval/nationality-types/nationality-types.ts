/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateNationalityTypeRequest,
  ErrorResult,
  ExportNationalityTypeRequest,
  HttpValidationProblemDetails,
  NationalityTypeDto,
  NationalityTypesGetDapperParams,
  PaginationResponseOfNationalityTypeDto,
  SearchNationalityTypeRequest,
  UpdateNationalityTypeRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search NationalityTypes using available filters.
 */
export const nationalityTypesSearch = (
    searchNationalityTypeRequest: BodyType<SearchNationalityTypeRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfNationalityTypeDto>(
      {url: `/api/v1/nationalitytypes/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchNationalityTypeRequest, signal
    },
      options);
    }
  


export const getNationalityTypesSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof nationalityTypesSearch>>, TError,{data: BodyType<SearchNationalityTypeRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof nationalityTypesSearch>>, TError,{data: BodyType<SearchNationalityTypeRequest>}, TContext> => {

const mutationKey = ['nationalityTypesSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof nationalityTypesSearch>>, {data: BodyType<SearchNationalityTypeRequest>}> = (props) => {
          const {data} = props ?? {};

          return  nationalityTypesSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type NationalityTypesSearchMutationResult = NonNullable<Awaited<ReturnType<typeof nationalityTypesSearch>>>
    export type NationalityTypesSearchMutationBody = BodyType<SearchNationalityTypeRequest>
    export type NationalityTypesSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search NationalityTypes using available filters.
 */
export const useNationalityTypesSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof nationalityTypesSearch>>, TError,{data: BodyType<SearchNationalityTypeRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof nationalityTypesSearch>>,
        TError,
        {data: BodyType<SearchNationalityTypeRequest>},
        TContext
      > => {

      const mutationOptions = getNationalityTypesSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get NationalityType details.
 */
export const nationalityTypesGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<NationalityTypeDto>(
      {url: `/api/v1/nationalitytypes/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getNationalityTypesGetQueryKey = (id?: number,) => {
    return [`/api/v1/nationalitytypes/${id}`] as const;
    }

    
export const getNationalityTypesGetQueryOptions = <TData = Awaited<ReturnType<typeof nationalityTypesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nationalityTypesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNationalityTypesGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof nationalityTypesGet>>> = ({ signal }) => nationalityTypesGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof nationalityTypesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type NationalityTypesGetQueryResult = NonNullable<Awaited<ReturnType<typeof nationalityTypesGet>>>
export type NationalityTypesGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useNationalityTypesGet<TData = Awaited<ReturnType<typeof nationalityTypesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof nationalityTypesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof nationalityTypesGet>>,
          TError,
          Awaited<ReturnType<typeof nationalityTypesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useNationalityTypesGet<TData = Awaited<ReturnType<typeof nationalityTypesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nationalityTypesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof nationalityTypesGet>>,
          TError,
          Awaited<ReturnType<typeof nationalityTypesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useNationalityTypesGet<TData = Awaited<ReturnType<typeof nationalityTypesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nationalityTypesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get NationalityType details.
 */

export function useNationalityTypesGet<TData = Awaited<ReturnType<typeof nationalityTypesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nationalityTypesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getNationalityTypesGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a NationalityType.
 */
export const nationalityTypesUpdate = (
    id: number,
    updateNationalityTypeRequest: BodyType<UpdateNationalityTypeRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/nationalitytypes/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateNationalityTypeRequest
    },
      options);
    }
  


export const getNationalityTypesUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof nationalityTypesUpdate>>, TError,{id: number;data: BodyType<UpdateNationalityTypeRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof nationalityTypesUpdate>>, TError,{id: number;data: BodyType<UpdateNationalityTypeRequest>}, TContext> => {

const mutationKey = ['nationalityTypesUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof nationalityTypesUpdate>>, {id: number;data: BodyType<UpdateNationalityTypeRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  nationalityTypesUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type NationalityTypesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof nationalityTypesUpdate>>>
    export type NationalityTypesUpdateMutationBody = BodyType<UpdateNationalityTypeRequest>
    export type NationalityTypesUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a NationalityType.
 */
export const useNationalityTypesUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof nationalityTypesUpdate>>, TError,{id: number;data: BodyType<UpdateNationalityTypeRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof nationalityTypesUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateNationalityTypeRequest>},
        TContext
      > => {

      const mutationOptions = getNationalityTypesUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a NationalityType.
 */
export const nationalityTypesDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/nationalitytypes/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getNationalityTypesDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof nationalityTypesDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof nationalityTypesDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['nationalityTypesDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof nationalityTypesDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  nationalityTypesDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type NationalityTypesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof nationalityTypesDelete>>>
    
    export type NationalityTypesDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a NationalityType.
 */
export const useNationalityTypesDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof nationalityTypesDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof nationalityTypesDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getNationalityTypesDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get NationalityType details via dapper.
 */
export const nationalityTypesGetDapper = (
    params?: NationalityTypesGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<NationalityTypeDto>(
      {url: `/api/v1/nationalitytypes/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getNationalityTypesGetDapperQueryKey = (params?: NationalityTypesGetDapperParams,) => {
    return [`/api/v1/nationalitytypes/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getNationalityTypesGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof nationalityTypesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: NationalityTypesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nationalityTypesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getNationalityTypesGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof nationalityTypesGetDapper>>> = ({ signal }) => nationalityTypesGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof nationalityTypesGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type NationalityTypesGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof nationalityTypesGetDapper>>>
export type NationalityTypesGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useNationalityTypesGetDapper<TData = Awaited<ReturnType<typeof nationalityTypesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  NationalityTypesGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof nationalityTypesGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof nationalityTypesGetDapper>>,
          TError,
          Awaited<ReturnType<typeof nationalityTypesGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useNationalityTypesGetDapper<TData = Awaited<ReturnType<typeof nationalityTypesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: NationalityTypesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nationalityTypesGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof nationalityTypesGetDapper>>,
          TError,
          Awaited<ReturnType<typeof nationalityTypesGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useNationalityTypesGetDapper<TData = Awaited<ReturnType<typeof nationalityTypesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: NationalityTypesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nationalityTypesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get NationalityType details via dapper.
 */

export function useNationalityTypesGetDapper<TData = Awaited<ReturnType<typeof nationalityTypesGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: NationalityTypesGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof nationalityTypesGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getNationalityTypesGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new NationalityType.
 */
export const nationalityTypesCreate = (
    createNationalityTypeRequest: BodyType<CreateNationalityTypeRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/nationalitytypes`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createNationalityTypeRequest, signal
    },
      options);
    }
  


export const getNationalityTypesCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof nationalityTypesCreate>>, TError,{data: BodyType<CreateNationalityTypeRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof nationalityTypesCreate>>, TError,{data: BodyType<CreateNationalityTypeRequest>}, TContext> => {

const mutationKey = ['nationalityTypesCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof nationalityTypesCreate>>, {data: BodyType<CreateNationalityTypeRequest>}> = (props) => {
          const {data} = props ?? {};

          return  nationalityTypesCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type NationalityTypesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof nationalityTypesCreate>>>
    export type NationalityTypesCreateMutationBody = BodyType<CreateNationalityTypeRequest>
    export type NationalityTypesCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new NationalityType.
 */
export const useNationalityTypesCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof nationalityTypesCreate>>, TError,{data: BodyType<CreateNationalityTypeRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof nationalityTypesCreate>>,
        TError,
        {data: BodyType<CreateNationalityTypeRequest>},
        TContext
      > => {

      const mutationOptions = getNationalityTypesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a NationalityTypes.
 */
export const nationalityTypesExport = (
    exportNationalityTypeRequest: BodyType<ExportNationalityTypeRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/nationalitytypes/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportNationalityTypeRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getNationalityTypesExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof nationalityTypesExport>>, TError,{data: BodyType<ExportNationalityTypeRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof nationalityTypesExport>>, TError,{data: BodyType<ExportNationalityTypeRequest>}, TContext> => {

const mutationKey = ['nationalityTypesExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof nationalityTypesExport>>, {data: BodyType<ExportNationalityTypeRequest>}> = (props) => {
          const {data} = props ?? {};

          return  nationalityTypesExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type NationalityTypesExportMutationResult = NonNullable<Awaited<ReturnType<typeof nationalityTypesExport>>>
    export type NationalityTypesExportMutationBody = BodyType<ExportNationalityTypeRequest>
    export type NationalityTypesExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a NationalityTypes.
 */
export const useNationalityTypesExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof nationalityTypesExport>>, TError,{data: BodyType<ExportNationalityTypeRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof nationalityTypesExport>>,
        TError,
        {data: BodyType<ExportNationalityTypeRequest>},
        TContext
      > => {

      const mutationOptions = getNationalityTypesExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    