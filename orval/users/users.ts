/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApiResponseOfString,
  CreateUserRequest,
  CreateUserRequest2,
  ErrorResult,
  ExportUserRequest,
  ForgotPasswordRequest,
  HttpValidationProblemDetails,
  Permissions,
  ResetPasswordRequest,
  SearchUserRequest,
  ToggleUserStatusRequest,
  UpdateUserRequest,
  UserDetailsDto,
  UserDto,
  UserRoleDto,
  UserRolesRequest,
  UsersConfirmEmailParams,
  UsersConfirmPhoneNumberParams,
  UsersGetDapperParams,
  UsersUpdateUserRoleParams
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search users directly using available filters.
 */
export const usersSearchUsersDirectly = (
    searchUserRequest: BodyType<SearchUserRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/users/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchUserRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getUsersSearchUsersDirectlyMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersSearchUsersDirectly>>, TError,{data: BodyType<SearchUserRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof usersSearchUsersDirectly>>, TError,{data: BodyType<SearchUserRequest>}, TContext> => {

const mutationKey = ['usersSearchUsersDirectly'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersSearchUsersDirectly>>, {data: BodyType<SearchUserRequest>}> = (props) => {
          const {data} = props ?? {};

          return  usersSearchUsersDirectly(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersSearchUsersDirectlyMutationResult = NonNullable<Awaited<ReturnType<typeof usersSearchUsersDirectly>>>
    export type UsersSearchUsersDirectlyMutationBody = BodyType<SearchUserRequest>
    export type UsersSearchUsersDirectlyMutationError = ErrorType<unknown>

    /**
 * @summary Search users directly using available filters.
 */
export const useUsersSearchUsersDirectly = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersSearchUsersDirectly>>, TError,{data: BodyType<SearchUserRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof usersSearchUsersDirectly>>,
        TError,
        {data: BodyType<SearchUserRequest>},
        TContext
      > => {

      const mutationOptions = getUsersSearchUsersDirectlyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get User details.
 */
export const usersGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserDto>(
      {url: `/api/v1/users/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getUsersGetQueryKey = (id?: number,) => {
    return [`/api/v1/users/${id}`] as const;
    }

    
export const getUsersGetQueryOptions = <TData = Awaited<ReturnType<typeof usersGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGet>>> = ({ signal }) => usersGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersGetQueryResult = NonNullable<Awaited<ReturnType<typeof usersGet>>>
export type UsersGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useUsersGet<TData = Awaited<ReturnType<typeof usersGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersGet>>,
          TError,
          Awaited<ReturnType<typeof usersGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersGet<TData = Awaited<ReturnType<typeof usersGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersGet>>,
          TError,
          Awaited<ReturnType<typeof usersGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersGet<TData = Awaited<ReturnType<typeof usersGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User details.
 */

export function useUsersGet<TData = Awaited<ReturnType<typeof usersGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a User.
 */
export const usersUpdate = (
    id: number,
    updateUserRequest: BodyType<UpdateUserRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/users/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateUserRequest
    },
      options);
    }
  


export const getUsersUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersUpdate>>, TError,{id: number;data: BodyType<UpdateUserRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof usersUpdate>>, TError,{id: number;data: BodyType<UpdateUserRequest>}, TContext> => {

const mutationKey = ['usersUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersUpdate>>, {id: number;data: BodyType<UpdateUserRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  usersUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof usersUpdate>>>
    export type UsersUpdateMutationBody = BodyType<UpdateUserRequest>
    export type UsersUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a User.
 */
export const useUsersUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersUpdate>>, TError,{id: number;data: BodyType<UpdateUserRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof usersUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateUserRequest>},
        TContext
      > => {

      const mutationOptions = getUsersUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a User.
 */
export const usersDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/users/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getUsersDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof usersDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['usersDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  usersDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof usersDelete>>>
    
    export type UsersDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a User.
 */
export const useUsersDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof usersDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getUsersDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get User Permissions via dapper.
 */
export const usersGetUserPermissionsRequest = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string[]>(
      {url: `/api/v1/users/getpermissions`, method: 'GET', signal
    },
      options);
    }
  

export const getUsersGetUserPermissionsRequestQueryKey = () => {
    return [`/api/v1/users/getpermissions`] as const;
    }

    
export const getUsersGetUserPermissionsRequestQueryOptions = <TData = Awaited<ReturnType<typeof usersGetUserPermissionsRequest>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetUserPermissionsRequest>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersGetUserPermissionsRequestQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGetUserPermissionsRequest>>> = ({ signal }) => usersGetUserPermissionsRequest(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersGetUserPermissionsRequest>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersGetUserPermissionsRequestQueryResult = NonNullable<Awaited<ReturnType<typeof usersGetUserPermissionsRequest>>>
export type UsersGetUserPermissionsRequestQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useUsersGetUserPermissionsRequest<TData = Awaited<ReturnType<typeof usersGetUserPermissionsRequest>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetUserPermissionsRequest>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersGetUserPermissionsRequest>>,
          TError,
          Awaited<ReturnType<typeof usersGetUserPermissionsRequest>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersGetUserPermissionsRequest<TData = Awaited<ReturnType<typeof usersGetUserPermissionsRequest>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetUserPermissionsRequest>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersGetUserPermissionsRequest>>,
          TError,
          Awaited<ReturnType<typeof usersGetUserPermissionsRequest>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersGetUserPermissionsRequest<TData = Awaited<ReturnType<typeof usersGetUserPermissionsRequest>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetUserPermissionsRequest>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User Permissions via dapper.
 */

export function useUsersGetUserPermissionsRequest<TData = Awaited<ReturnType<typeof usersGetUserPermissionsRequest>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetUserPermissionsRequest>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersGetUserPermissionsRequestQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get User Permissions
 */
export const usersGetRolePermissionsRequest = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Permissions[]>(
      {url: `/api/v1/users/getrolepermissions`, method: 'GET', signal
    },
      options);
    }
  

export const getUsersGetRolePermissionsRequestQueryKey = () => {
    return [`/api/v1/users/getrolepermissions`] as const;
    }

    
export const getUsersGetRolePermissionsRequestQueryOptions = <TData = Awaited<ReturnType<typeof usersGetRolePermissionsRequest>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetRolePermissionsRequest>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersGetRolePermissionsRequestQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGetRolePermissionsRequest>>> = ({ signal }) => usersGetRolePermissionsRequest(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersGetRolePermissionsRequest>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersGetRolePermissionsRequestQueryResult = NonNullable<Awaited<ReturnType<typeof usersGetRolePermissionsRequest>>>
export type UsersGetRolePermissionsRequestQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useUsersGetRolePermissionsRequest<TData = Awaited<ReturnType<typeof usersGetRolePermissionsRequest>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetRolePermissionsRequest>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersGetRolePermissionsRequest>>,
          TError,
          Awaited<ReturnType<typeof usersGetRolePermissionsRequest>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersGetRolePermissionsRequest<TData = Awaited<ReturnType<typeof usersGetRolePermissionsRequest>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetRolePermissionsRequest>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersGetRolePermissionsRequest>>,
          TError,
          Awaited<ReturnType<typeof usersGetRolePermissionsRequest>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersGetRolePermissionsRequest<TData = Awaited<ReturnType<typeof usersGetRolePermissionsRequest>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetRolePermissionsRequest>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User Permissions
 */

export function useUsersGetRolePermissionsRequest<TData = Awaited<ReturnType<typeof usersGetRolePermissionsRequest>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetRolePermissionsRequest>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersGetRolePermissionsRequestQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get User via dapper.
 */
export const usersGetDapper = (
    params?: UsersGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserDto>(
      {url: `/api/v1/users/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getUsersGetDapperQueryKey = (params?: UsersGetDapperParams,) => {
    return [`/api/v1/users/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getUsersGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof usersGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: UsersGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGetDapper>>> = ({ signal }) => usersGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof usersGetDapper>>>
export type UsersGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useUsersGetDapper<TData = Awaited<ReturnType<typeof usersGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  UsersGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersGetDapper>>,
          TError,
          Awaited<ReturnType<typeof usersGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersGetDapper<TData = Awaited<ReturnType<typeof usersGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: UsersGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersGetDapper>>,
          TError,
          Awaited<ReturnType<typeof usersGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersGetDapper<TData = Awaited<ReturnType<typeof usersGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: UsersGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User via dapper.
 */

export function useUsersGetDapper<TData = Awaited<ReturnType<typeof usersGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: UsersGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new User.
 */
export const usersCreate = (
    createUserRequest: BodyType<CreateUserRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createUserRequest, signal
    },
      options);
    }
  


export const getUsersCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersCreate>>, TError,{data: BodyType<CreateUserRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof usersCreate>>, TError,{data: BodyType<CreateUserRequest>}, TContext> => {

const mutationKey = ['usersCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersCreate>>, {data: BodyType<CreateUserRequest>}> = (props) => {
          const {data} = props ?? {};

          return  usersCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersCreateMutationResult = NonNullable<Awaited<ReturnType<typeof usersCreate>>>
    export type UsersCreateMutationBody = BodyType<CreateUserRequest>
    export type UsersCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new User.
 */
export const useUsersCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersCreate>>, TError,{data: BodyType<CreateUserRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof usersCreate>>,
        TError,
        {data: BodyType<CreateUserRequest>},
        TContext
      > => {

      const mutationOptions = getUsersCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const usersUpdateUserRole = (
    identityUserId: string,
    params?: UsersUpdateUserRoleParams,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<ApiResponseOfString>(
      {url: `/api/v1/users/updateuserrole/${identityUserId}`, method: 'PUT',
        params
    },
      options);
    }
  


export const getUsersUpdateUserRoleMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersUpdateUserRole>>, TError,{identityUserId: string;params?: UsersUpdateUserRoleParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof usersUpdateUserRole>>, TError,{identityUserId: string;params?: UsersUpdateUserRoleParams}, TContext> => {

const mutationKey = ['usersUpdateUserRole'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersUpdateUserRole>>, {identityUserId: string;params?: UsersUpdateUserRoleParams}> = (props) => {
          const {identityUserId,params} = props ?? {};

          return  usersUpdateUserRole(identityUserId,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersUpdateUserRoleMutationResult = NonNullable<Awaited<ReturnType<typeof usersUpdateUserRole>>>
    
    export type UsersUpdateUserRoleMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    export const useUsersUpdateUserRole = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersUpdateUserRole>>, TError,{identityUserId: string;params?: UsersUpdateUserRoleParams}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof usersUpdateUserRole>>,
        TError,
        {identityUserId: string;params?: UsersUpdateUserRoleParams},
        TContext
      > => {

      const mutationOptions = getUsersUpdateUserRoleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a User.
 */
export const usersExport = (
    exportUserRequest: BodyType<ExportUserRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/users/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportUserRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getUsersExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersExport>>, TError,{data: BodyType<ExportUserRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof usersExport>>, TError,{data: BodyType<ExportUserRequest>}, TContext> => {

const mutationKey = ['usersExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersExport>>, {data: BodyType<ExportUserRequest>}> = (props) => {
          const {data} = props ?? {};

          return  usersExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersExportMutationResult = NonNullable<Awaited<ReturnType<typeof usersExport>>>
    export type UsersExportMutationBody = BodyType<ExportUserRequest>
    export type UsersExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a User.
 */
export const useUsersExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersExport>>, TError,{data: BodyType<ExportUserRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof usersExport>>,
        TError,
        {data: BodyType<ExportUserRequest>},
        TContext
      > => {

      const mutationOptions = getUsersExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get list of all users.
 */
export const usersGetList = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserDetailsDto[]>(
      {url: `/api/users`, method: 'GET', signal
    },
      options);
    }
  

export const getUsersGetListQueryKey = () => {
    return [`/api/users`] as const;
    }

    
export const getUsersGetListQueryOptions = <TData = Awaited<ReturnType<typeof usersGetList>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersGetListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGetList>>> = ({ signal }) => usersGetList(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersGetList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersGetListQueryResult = NonNullable<Awaited<ReturnType<typeof usersGetList>>>
export type UsersGetListQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useUsersGetList<TData = Awaited<ReturnType<typeof usersGetList>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersGetList>>,
          TError,
          Awaited<ReturnType<typeof usersGetList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersGetList<TData = Awaited<ReturnType<typeof usersGetList>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersGetList>>,
          TError,
          Awaited<ReturnType<typeof usersGetList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersGetList<TData = Awaited<ReturnType<typeof usersGetList>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get list of all users.
 */

export function useUsersGetList<TData = Awaited<ReturnType<typeof usersGetList>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersGetListQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Creates a new user.
 */
export const usersCreate2 = (
    createUserRequest2: BodyType<CreateUserRequest2>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createUserRequest2, signal
    },
      options);
    }
  


export const getUsersCreate2MutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersCreate2>>, TError,{data: BodyType<CreateUserRequest2>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof usersCreate2>>, TError,{data: BodyType<CreateUserRequest2>}, TContext> => {

const mutationKey = ['usersCreate2'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersCreate2>>, {data: BodyType<CreateUserRequest2>}> = (props) => {
          const {data} = props ?? {};

          return  usersCreate2(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersCreate2MutationResult = NonNullable<Awaited<ReturnType<typeof usersCreate2>>>
    export type UsersCreate2MutationBody = BodyType<CreateUserRequest2>
    export type UsersCreate2MutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Creates a new user.
 */
export const useUsersCreate2 = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersCreate2>>, TError,{data: BodyType<CreateUserRequest2>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof usersCreate2>>,
        TError,
        {data: BodyType<CreateUserRequest2>},
        TContext
      > => {

      const mutationOptions = getUsersCreate2MutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get a user's details.
 */
export const usersGetById = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserDetailsDto>(
      {url: `/api/users/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getUsersGetByIdQueryKey = (id?: string,) => {
    return [`/api/users/${id}`] as const;
    }

    
export const getUsersGetByIdQueryOptions = <TData = Awaited<ReturnType<typeof usersGetById>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersGetByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGetById>>> = ({ signal }) => usersGetById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersGetById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersGetByIdQueryResult = NonNullable<Awaited<ReturnType<typeof usersGetById>>>
export type UsersGetByIdQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useUsersGetById<TData = Awaited<ReturnType<typeof usersGetById>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersGetById>>,
          TError,
          Awaited<ReturnType<typeof usersGetById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersGetById<TData = Awaited<ReturnType<typeof usersGetById>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersGetById>>,
          TError,
          Awaited<ReturnType<typeof usersGetById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersGetById<TData = Awaited<ReturnType<typeof usersGetById>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a user's details.
 */

export function useUsersGetById<TData = Awaited<ReturnType<typeof usersGetById>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersGetByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get a user's roles.
 */
export const usersGetRoles = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserRoleDto[]>(
      {url: `/api/users/${id}/roles`, method: 'GET', signal
    },
      options);
    }
  

export const getUsersGetRolesQueryKey = (id?: string,) => {
    return [`/api/users/${id}/roles`] as const;
    }

    
export const getUsersGetRolesQueryOptions = <TData = Awaited<ReturnType<typeof usersGetRoles>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetRoles>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersGetRolesQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGetRoles>>> = ({ signal }) => usersGetRoles(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersGetRoles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersGetRolesQueryResult = NonNullable<Awaited<ReturnType<typeof usersGetRoles>>>
export type UsersGetRolesQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useUsersGetRoles<TData = Awaited<ReturnType<typeof usersGetRoles>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetRoles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersGetRoles>>,
          TError,
          Awaited<ReturnType<typeof usersGetRoles>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersGetRoles<TData = Awaited<ReturnType<typeof usersGetRoles>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetRoles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersGetRoles>>,
          TError,
          Awaited<ReturnType<typeof usersGetRoles>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersGetRoles<TData = Awaited<ReturnType<typeof usersGetRoles>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetRoles>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a user's roles.
 */

export function useUsersGetRoles<TData = Awaited<ReturnType<typeof usersGetRoles>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetRoles>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersGetRolesQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a user's assigned roles.
 */
export const usersAssignRoles = (
    id: string,
    userRolesRequest: BodyType<UserRolesRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/users/${id}/roles`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userRolesRequest, signal
    },
      options);
    }
  


export const getUsersAssignRolesMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersAssignRoles>>, TError,{id: string;data: BodyType<UserRolesRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof usersAssignRoles>>, TError,{id: string;data: BodyType<UserRolesRequest>}, TContext> => {

const mutationKey = ['usersAssignRoles'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersAssignRoles>>, {id: string;data: BodyType<UserRolesRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  usersAssignRoles(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersAssignRolesMutationResult = NonNullable<Awaited<ReturnType<typeof usersAssignRoles>>>
    export type UsersAssignRolesMutationBody = BodyType<UserRolesRequest>
    export type UsersAssignRolesMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a user's assigned roles.
 */
export const useUsersAssignRoles = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersAssignRoles>>, TError,{id: string;data: BodyType<UserRolesRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof usersAssignRoles>>,
        TError,
        {id: string;data: BodyType<UserRolesRequest>},
        TContext
      > => {

      const mutationOptions = getUsersAssignRolesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Anonymous user creates a user.
 */
export const usersSelfRegister = (
    createUserRequest2: BodyType<CreateUserRequest2>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/users/self-register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createUserRequest2, signal
    },
      options);
    }
  


export const getUsersSelfRegisterMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersSelfRegister>>, TError,{data: BodyType<CreateUserRequest2>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof usersSelfRegister>>, TError,{data: BodyType<CreateUserRequest2>}, TContext> => {

const mutationKey = ['usersSelfRegister'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersSelfRegister>>, {data: BodyType<CreateUserRequest2>}> = (props) => {
          const {data} = props ?? {};

          return  usersSelfRegister(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersSelfRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof usersSelfRegister>>>
    export type UsersSelfRegisterMutationBody = BodyType<CreateUserRequest2>
    export type UsersSelfRegisterMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Anonymous user creates a user.
 */
export const useUsersSelfRegister = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersSelfRegister>>, TError,{data: BodyType<CreateUserRequest2>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof usersSelfRegister>>,
        TError,
        {data: BodyType<CreateUserRequest2>},
        TContext
      > => {

      const mutationOptions = getUsersSelfRegisterMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Toggle a user's active status.
 */
export const usersToggleStatus = (
    id: string,
    toggleUserStatusRequest: BodyType<ToggleUserStatusRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<null>(
      {url: `/api/users/${id}/toggle-status`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: toggleUserStatusRequest, signal
    },
      options);
    }
  


export const getUsersToggleStatusMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersToggleStatus>>, TError,{id: string;data: BodyType<ToggleUserStatusRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof usersToggleStatus>>, TError,{id: string;data: BodyType<ToggleUserStatusRequest>}, TContext> => {

const mutationKey = ['usersToggleStatus'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersToggleStatus>>, {id: string;data: BodyType<ToggleUserStatusRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  usersToggleStatus(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersToggleStatusMutationResult = NonNullable<Awaited<ReturnType<typeof usersToggleStatus>>>
    export type UsersToggleStatusMutationBody = BodyType<ToggleUserStatusRequest>
    export type UsersToggleStatusMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Toggle a user's active status.
 */
export const useUsersToggleStatus = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersToggleStatus>>, TError,{id: string;data: BodyType<ToggleUserStatusRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof usersToggleStatus>>,
        TError,
        {id: string;data: BodyType<ToggleUserStatusRequest>},
        TContext
      > => {

      const mutationOptions = getUsersToggleStatusMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Confirm email address for a user.
 */
export const usersConfirmEmail = (
    params?: UsersConfirmEmailParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/users/confirm-email`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getUsersConfirmEmailQueryKey = (params?: UsersConfirmEmailParams,) => {
    return [`/api/users/confirm-email`, ...(params ? [params]: [])] as const;
    }

    
export const getUsersConfirmEmailQueryOptions = <TData = Awaited<ReturnType<typeof usersConfirmEmail>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: UsersConfirmEmailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersConfirmEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersConfirmEmailQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersConfirmEmail>>> = ({ signal }) => usersConfirmEmail(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersConfirmEmail>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersConfirmEmailQueryResult = NonNullable<Awaited<ReturnType<typeof usersConfirmEmail>>>
export type UsersConfirmEmailQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useUsersConfirmEmail<TData = Awaited<ReturnType<typeof usersConfirmEmail>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  UsersConfirmEmailParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersConfirmEmail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersConfirmEmail>>,
          TError,
          Awaited<ReturnType<typeof usersConfirmEmail>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersConfirmEmail<TData = Awaited<ReturnType<typeof usersConfirmEmail>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: UsersConfirmEmailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersConfirmEmail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersConfirmEmail>>,
          TError,
          Awaited<ReturnType<typeof usersConfirmEmail>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersConfirmEmail<TData = Awaited<ReturnType<typeof usersConfirmEmail>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: UsersConfirmEmailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersConfirmEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Confirm email address for a user.
 */

export function useUsersConfirmEmail<TData = Awaited<ReturnType<typeof usersConfirmEmail>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: UsersConfirmEmailParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersConfirmEmail>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersConfirmEmailQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Confirm phone number for a user.
 */
export const usersConfirmPhoneNumber = (
    params?: UsersConfirmPhoneNumberParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/users/confirm-phone-number`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getUsersConfirmPhoneNumberQueryKey = (params?: UsersConfirmPhoneNumberParams,) => {
    return [`/api/users/confirm-phone-number`, ...(params ? [params]: [])] as const;
    }

    
export const getUsersConfirmPhoneNumberQueryOptions = <TData = Awaited<ReturnType<typeof usersConfirmPhoneNumber>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: UsersConfirmPhoneNumberParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersConfirmPhoneNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersConfirmPhoneNumberQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersConfirmPhoneNumber>>> = ({ signal }) => usersConfirmPhoneNumber(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersConfirmPhoneNumber>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersConfirmPhoneNumberQueryResult = NonNullable<Awaited<ReturnType<typeof usersConfirmPhoneNumber>>>
export type UsersConfirmPhoneNumberQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useUsersConfirmPhoneNumber<TData = Awaited<ReturnType<typeof usersConfirmPhoneNumber>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  UsersConfirmPhoneNumberParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersConfirmPhoneNumber>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersConfirmPhoneNumber>>,
          TError,
          Awaited<ReturnType<typeof usersConfirmPhoneNumber>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersConfirmPhoneNumber<TData = Awaited<ReturnType<typeof usersConfirmPhoneNumber>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: UsersConfirmPhoneNumberParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersConfirmPhoneNumber>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersConfirmPhoneNumber>>,
          TError,
          Awaited<ReturnType<typeof usersConfirmPhoneNumber>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersConfirmPhoneNumber<TData = Awaited<ReturnType<typeof usersConfirmPhoneNumber>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: UsersConfirmPhoneNumberParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersConfirmPhoneNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Confirm phone number for a user.
 */

export function useUsersConfirmPhoneNumber<TData = Awaited<ReturnType<typeof usersConfirmPhoneNumber>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: UsersConfirmPhoneNumberParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersConfirmPhoneNumber>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersConfirmPhoneNumberQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Request a password reset email for a user.
 */
export const usersForgotPassword = (
    forgotPasswordRequest: BodyType<ForgotPasswordRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/users/forgot-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: forgotPasswordRequest, signal
    },
      options);
    }
  


export const getUsersForgotPasswordMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersForgotPassword>>, TError,{data: BodyType<ForgotPasswordRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof usersForgotPassword>>, TError,{data: BodyType<ForgotPasswordRequest>}, TContext> => {

const mutationKey = ['usersForgotPassword'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersForgotPassword>>, {data: BodyType<ForgotPasswordRequest>}> = (props) => {
          const {data} = props ?? {};

          return  usersForgotPassword(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersForgotPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof usersForgotPassword>>>
    export type UsersForgotPasswordMutationBody = BodyType<ForgotPasswordRequest>
    export type UsersForgotPasswordMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Request a password reset email for a user.
 */
export const useUsersForgotPassword = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersForgotPassword>>, TError,{data: BodyType<ForgotPasswordRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof usersForgotPassword>>,
        TError,
        {data: BodyType<ForgotPasswordRequest>},
        TContext
      > => {

      const mutationOptions = getUsersForgotPasswordMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Reset a user's password.
 */
export const usersResetPassword = (
    resetPasswordRequest: BodyType<ResetPasswordRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/users/reset-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: resetPasswordRequest, signal
    },
      options);
    }
  


export const getUsersResetPasswordMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersResetPassword>>, TError,{data: BodyType<ResetPasswordRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof usersResetPassword>>, TError,{data: BodyType<ResetPasswordRequest>}, TContext> => {

const mutationKey = ['usersResetPassword'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersResetPassword>>, {data: BodyType<ResetPasswordRequest>}> = (props) => {
          const {data} = props ?? {};

          return  usersResetPassword(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersResetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof usersResetPassword>>>
    export type UsersResetPasswordMutationBody = BodyType<ResetPasswordRequest>
    export type UsersResetPasswordMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Reset a user's password.
 */
export const useUsersResetPassword = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersResetPassword>>, TError,{data: BodyType<ResetPasswordRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof usersResetPassword>>,
        TError,
        {data: BodyType<ResetPasswordRequest>},
        TContext
      > => {

      const mutationOptions = getUsersResetPasswordMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    