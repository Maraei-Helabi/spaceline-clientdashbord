/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AddressResponsePaginatedServiceResponse,
  AddressResponseServiceResponse,
  ApiResponseOfString,
  CheckAddressCapacityRequest,
  CheckAddressCapacityResponse,
  CreateStarlinkAddressRequest,
  ErrorResult,
  ExportStarlinkAddressRequest,
  HttpValidationProblemDetails,
  SearchStarlinkAddressRequest,
  UpdateStarlinkAddressRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search StarlinkAddresses using available filters.
 */
export const starlinkAddressesSearch = (
    searchStarlinkAddressRequest: BodyType<SearchStarlinkAddressRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<AddressResponsePaginatedServiceResponse>(
      {url: `/api/v1/starlinkaddresses/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchStarlinkAddressRequest, signal
    },
      options);
    }
  


export const getStarlinkAddressesSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof starlinkAddressesSearch>>, TError,{data: BodyType<SearchStarlinkAddressRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof starlinkAddressesSearch>>, TError,{data: BodyType<SearchStarlinkAddressRequest>}, TContext> => {

const mutationKey = ['starlinkAddressesSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof starlinkAddressesSearch>>, {data: BodyType<SearchStarlinkAddressRequest>}> = (props) => {
          const {data} = props ?? {};

          return  starlinkAddressesSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type StarlinkAddressesSearchMutationResult = NonNullable<Awaited<ReturnType<typeof starlinkAddressesSearch>>>
    export type StarlinkAddressesSearchMutationBody = BodyType<SearchStarlinkAddressRequest>
    export type StarlinkAddressesSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search StarlinkAddresses using available filters.
 */
export const useStarlinkAddressesSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof starlinkAddressesSearch>>, TError,{data: BodyType<SearchStarlinkAddressRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof starlinkAddressesSearch>>,
        TError,
        {data: BodyType<SearchStarlinkAddressRequest>},
        TContext
      > => {

      const mutationOptions = getStarlinkAddressesSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get StarlinkAddress details.
 */
export const starlinkAddressesGet = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<AddressResponseServiceResponse>(
      {url: `/api/v1/starlinkaddresses/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getStarlinkAddressesGetQueryKey = (id?: string,) => {
    return [`/api/v1/starlinkaddresses/${id}`] as const;
    }

    
export const getStarlinkAddressesGetQueryOptions = <TData = Awaited<ReturnType<typeof starlinkAddressesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof starlinkAddressesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStarlinkAddressesGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof starlinkAddressesGet>>> = ({ signal }) => starlinkAddressesGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof starlinkAddressesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type StarlinkAddressesGetQueryResult = NonNullable<Awaited<ReturnType<typeof starlinkAddressesGet>>>
export type StarlinkAddressesGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useStarlinkAddressesGet<TData = Awaited<ReturnType<typeof starlinkAddressesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof starlinkAddressesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof starlinkAddressesGet>>,
          TError,
          Awaited<ReturnType<typeof starlinkAddressesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStarlinkAddressesGet<TData = Awaited<ReturnType<typeof starlinkAddressesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof starlinkAddressesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof starlinkAddressesGet>>,
          TError,
          Awaited<ReturnType<typeof starlinkAddressesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useStarlinkAddressesGet<TData = Awaited<ReturnType<typeof starlinkAddressesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof starlinkAddressesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get StarlinkAddress details.
 */

export function useStarlinkAddressesGet<TData = Awaited<ReturnType<typeof starlinkAddressesGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof starlinkAddressesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getStarlinkAddressesGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const starlinkAddressesUpdate = (
    id: string,
    updateStarlinkAddressRequest: BodyType<UpdateStarlinkAddressRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<boolean>(
      {url: `/api/v1/starlinkaddresses/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateStarlinkAddressRequest
    },
      options);
    }
  


export const getStarlinkAddressesUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof starlinkAddressesUpdate>>, TError,{id: string;data: BodyType<UpdateStarlinkAddressRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof starlinkAddressesUpdate>>, TError,{id: string;data: BodyType<UpdateStarlinkAddressRequest>}, TContext> => {

const mutationKey = ['starlinkAddressesUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof starlinkAddressesUpdate>>, {id: string;data: BodyType<UpdateStarlinkAddressRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  starlinkAddressesUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type StarlinkAddressesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof starlinkAddressesUpdate>>>
    export type StarlinkAddressesUpdateMutationBody = BodyType<UpdateStarlinkAddressRequest>
    export type StarlinkAddressesUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    export const useStarlinkAddressesUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof starlinkAddressesUpdate>>, TError,{id: string;data: BodyType<UpdateStarlinkAddressRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof starlinkAddressesUpdate>>,
        TError,
        {id: string;data: BodyType<UpdateStarlinkAddressRequest>},
        TContext
      > => {

      const mutationOptions = getStarlinkAddressesUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Create a new StarlinkAddress.
 */
export const starlinkAddressesCreate = (
    createStarlinkAddressRequest: BodyType<CreateStarlinkAddressRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseOfString>(
      {url: `/api/v1/starlinkaddresses`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createStarlinkAddressRequest, signal
    },
      options);
    }
  


export const getStarlinkAddressesCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof starlinkAddressesCreate>>, TError,{data: BodyType<CreateStarlinkAddressRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof starlinkAddressesCreate>>, TError,{data: BodyType<CreateStarlinkAddressRequest>}, TContext> => {

const mutationKey = ['starlinkAddressesCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof starlinkAddressesCreate>>, {data: BodyType<CreateStarlinkAddressRequest>}> = (props) => {
          const {data} = props ?? {};

          return  starlinkAddressesCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type StarlinkAddressesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof starlinkAddressesCreate>>>
    export type StarlinkAddressesCreateMutationBody = BodyType<CreateStarlinkAddressRequest>
    export type StarlinkAddressesCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new StarlinkAddress.
 */
export const useStarlinkAddressesCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof starlinkAddressesCreate>>, TError,{data: BodyType<CreateStarlinkAddressRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof starlinkAddressesCreate>>,
        TError,
        {data: BodyType<CreateStarlinkAddressRequest>},
        TContext
      > => {

      const mutationOptions = getStarlinkAddressesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Check Starlink network capacity for a specific address.
 */
export const starlinkAddressesCheckCapacity = (
    checkAddressCapacityRequest: BodyType<CheckAddressCapacityRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CheckAddressCapacityResponse>(
      {url: `/api/v1/starlinkaddresses/check-capacity`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: checkAddressCapacityRequest, signal
    },
      options);
    }
  


export const getStarlinkAddressesCheckCapacityMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof starlinkAddressesCheckCapacity>>, TError,{data: BodyType<CheckAddressCapacityRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof starlinkAddressesCheckCapacity>>, TError,{data: BodyType<CheckAddressCapacityRequest>}, TContext> => {

const mutationKey = ['starlinkAddressesCheckCapacity'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof starlinkAddressesCheckCapacity>>, {data: BodyType<CheckAddressCapacityRequest>}> = (props) => {
          const {data} = props ?? {};

          return  starlinkAddressesCheckCapacity(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type StarlinkAddressesCheckCapacityMutationResult = NonNullable<Awaited<ReturnType<typeof starlinkAddressesCheckCapacity>>>
    export type StarlinkAddressesCheckCapacityMutationBody = BodyType<CheckAddressCapacityRequest>
    export type StarlinkAddressesCheckCapacityMutationError = ErrorType<unknown>

    /**
 * @summary Check Starlink network capacity for a specific address.
 */
export const useStarlinkAddressesCheckCapacity = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof starlinkAddressesCheckCapacity>>, TError,{data: BodyType<CheckAddressCapacityRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof starlinkAddressesCheckCapacity>>,
        TError,
        {data: BodyType<CheckAddressCapacityRequest>},
        TContext
      > => {

      const mutationOptions = getStarlinkAddressesCheckCapacityMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a StarlinkAddresses.
 */
export const starlinkAddressesExport = (
    exportStarlinkAddressRequest: BodyType<ExportStarlinkAddressRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/starlinkaddresses/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportStarlinkAddressRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getStarlinkAddressesExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof starlinkAddressesExport>>, TError,{data: BodyType<ExportStarlinkAddressRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof starlinkAddressesExport>>, TError,{data: BodyType<ExportStarlinkAddressRequest>}, TContext> => {

const mutationKey = ['starlinkAddressesExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof starlinkAddressesExport>>, {data: BodyType<ExportStarlinkAddressRequest>}> = (props) => {
          const {data} = props ?? {};

          return  starlinkAddressesExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type StarlinkAddressesExportMutationResult = NonNullable<Awaited<ReturnType<typeof starlinkAddressesExport>>>
    export type StarlinkAddressesExportMutationBody = BodyType<ExportStarlinkAddressRequest>
    export type StarlinkAddressesExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a StarlinkAddresses.
 */
export const useStarlinkAddressesExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof starlinkAddressesExport>>, TError,{data: BodyType<ExportStarlinkAddressRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof starlinkAddressesExport>>,
        TError,
        {data: BodyType<ExportStarlinkAddressRequest>},
        TContext
      > => {

      const mutationOptions = getStarlinkAddressesExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    