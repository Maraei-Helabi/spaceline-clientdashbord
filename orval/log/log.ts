/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  ErrorResult,
  HttpValidationProblemDetails,
  PaginationResponseOfAuditDto,
  SearchLogsRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Get logs details of users.
 */
export const logGetProfile = (
    searchLogsRequest: BodyType<SearchLogsRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfAuditDto>(
      {url: `/api/log/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchLogsRequest, signal
    },
      options);
    }
  


export const getLogGetProfileMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logGetProfile>>, TError,{data: BodyType<SearchLogsRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof logGetProfile>>, TError,{data: BodyType<SearchLogsRequest>}, TContext> => {

const mutationKey = ['logGetProfile'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof logGetProfile>>, {data: BodyType<SearchLogsRequest>}> = (props) => {
          const {data} = props ?? {};

          return  logGetProfile(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LogGetProfileMutationResult = NonNullable<Awaited<ReturnType<typeof logGetProfile>>>
    export type LogGetProfileMutationBody = BodyType<SearchLogsRequest>
    export type LogGetProfileMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Get logs details of users.
 */
export const useLogGetProfile = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logGetProfile>>, TError,{data: BodyType<SearchLogsRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof logGetProfile>>,
        TError,
        {data: BodyType<SearchLogsRequest>},
        TContext
      > => {

      const mutationOptions = getLogGetProfileMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    