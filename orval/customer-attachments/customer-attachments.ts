/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * .NET 7 WebAPI - Clean Architecture
 * Clean Architecture Template for .NET 7 WebApi built with Multitenancy Support.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateCustomerAttachmentRequest,
  CustomerAttachmentDto,
  CustomerAttachmentsGetDapperParams,
  ErrorResult,
  ExportCustomerAttachmentRequest,
  HttpValidationProblemDetails,
  PaginationResponseOfCustomerAttachmentDto,
  SearchCustomerAttachmentRequest,
  UpdateCustomerAttachmentRequest
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType , BodyType } from '.././mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Search CustomerAttachmentAttachments using available filters.
 */
export const customerAttachmentsSearch = (
    searchCustomerAttachmentRequest: BodyType<SearchCustomerAttachmentRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PaginationResponseOfCustomerAttachmentDto>(
      {url: `/api/v1/customerattachments/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchCustomerAttachmentRequest, signal
    },
      options);
    }
  


export const getCustomerAttachmentsSearchMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customerAttachmentsSearch>>, TError,{data: BodyType<SearchCustomerAttachmentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof customerAttachmentsSearch>>, TError,{data: BodyType<SearchCustomerAttachmentRequest>}, TContext> => {

const mutationKey = ['customerAttachmentsSearch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof customerAttachmentsSearch>>, {data: BodyType<SearchCustomerAttachmentRequest>}> = (props) => {
          const {data} = props ?? {};

          return  customerAttachmentsSearch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CustomerAttachmentsSearchMutationResult = NonNullable<Awaited<ReturnType<typeof customerAttachmentsSearch>>>
    export type CustomerAttachmentsSearchMutationBody = BodyType<SearchCustomerAttachmentRequest>
    export type CustomerAttachmentsSearchMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Search CustomerAttachmentAttachments using available filters.
 */
export const useCustomerAttachmentsSearch = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customerAttachmentsSearch>>, TError,{data: BodyType<SearchCustomerAttachmentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof customerAttachmentsSearch>>,
        TError,
        {data: BodyType<SearchCustomerAttachmentRequest>},
        TContext
      > => {

      const mutationOptions = getCustomerAttachmentsSearchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get CustomerAttachment details.
 */
export const customerAttachmentsGet = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CustomerAttachmentDto>(
      {url: `/api/v1/customerattachments/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getCustomerAttachmentsGetQueryKey = (id?: number,) => {
    return [`/api/v1/customerattachments/${id}`] as const;
    }

    
export const getCustomerAttachmentsGetQueryOptions = <TData = Awaited<ReturnType<typeof customerAttachmentsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customerAttachmentsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerAttachmentsGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof customerAttachmentsGet>>> = ({ signal }) => customerAttachmentsGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof customerAttachmentsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CustomerAttachmentsGetQueryResult = NonNullable<Awaited<ReturnType<typeof customerAttachmentsGet>>>
export type CustomerAttachmentsGetQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useCustomerAttachmentsGet<TData = Awaited<ReturnType<typeof customerAttachmentsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof customerAttachmentsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof customerAttachmentsGet>>,
          TError,
          Awaited<ReturnType<typeof customerAttachmentsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCustomerAttachmentsGet<TData = Awaited<ReturnType<typeof customerAttachmentsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customerAttachmentsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof customerAttachmentsGet>>,
          TError,
          Awaited<ReturnType<typeof customerAttachmentsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCustomerAttachmentsGet<TData = Awaited<ReturnType<typeof customerAttachmentsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customerAttachmentsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get CustomerAttachment details.
 */

export function useCustomerAttachmentsGet<TData = Awaited<ReturnType<typeof customerAttachmentsGet>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customerAttachmentsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCustomerAttachmentsGetQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a CustomerAttachment.
 */
export const customerAttachmentsUpdate = (
    id: number,
    updateCustomerAttachmentRequest: BodyType<UpdateCustomerAttachmentRequest>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/customerattachments/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCustomerAttachmentRequest
    },
      options);
    }
  


export const getCustomerAttachmentsUpdateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customerAttachmentsUpdate>>, TError,{id: number;data: BodyType<UpdateCustomerAttachmentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof customerAttachmentsUpdate>>, TError,{id: number;data: BodyType<UpdateCustomerAttachmentRequest>}, TContext> => {

const mutationKey = ['customerAttachmentsUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof customerAttachmentsUpdate>>, {id: number;data: BodyType<UpdateCustomerAttachmentRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  customerAttachmentsUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CustomerAttachmentsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof customerAttachmentsUpdate>>>
    export type CustomerAttachmentsUpdateMutationBody = BodyType<UpdateCustomerAttachmentRequest>
    export type CustomerAttachmentsUpdateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Update a CustomerAttachment.
 */
export const useCustomerAttachmentsUpdate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customerAttachmentsUpdate>>, TError,{id: number;data: BodyType<UpdateCustomerAttachmentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof customerAttachmentsUpdate>>,
        TError,
        {id: number;data: BodyType<UpdateCustomerAttachmentRequest>},
        TContext
      > => {

      const mutationOptions = getCustomerAttachmentsUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a CustomerAttachment.
 */
export const customerAttachmentsDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/customerattachments/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getCustomerAttachmentsDeleteMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customerAttachmentsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof customerAttachmentsDelete>>, TError,{id: number}, TContext> => {

const mutationKey = ['customerAttachmentsDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof customerAttachmentsDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  customerAttachmentsDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CustomerAttachmentsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof customerAttachmentsDelete>>>
    
    export type CustomerAttachmentsDeleteMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Delete a CustomerAttachment.
 */
export const useCustomerAttachmentsDelete = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customerAttachmentsDelete>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof customerAttachmentsDelete>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getCustomerAttachmentsDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get CustomerAttachment details via dapper.
 */
export const customerAttachmentsGetDapper = (
    params?: CustomerAttachmentsGetDapperParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CustomerAttachmentDto>(
      {url: `/api/v1/customerattachments/getviadapper`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getCustomerAttachmentsGetDapperQueryKey = (params?: CustomerAttachmentsGetDapperParams,) => {
    return [`/api/v1/customerattachments/getviadapper`, ...(params ? [params]: [])] as const;
    }

    
export const getCustomerAttachmentsGetDapperQueryOptions = <TData = Awaited<ReturnType<typeof customerAttachmentsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(params?: CustomerAttachmentsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customerAttachmentsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCustomerAttachmentsGetDapperQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof customerAttachmentsGetDapper>>> = ({ signal }) => customerAttachmentsGetDapper(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof customerAttachmentsGetDapper>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CustomerAttachmentsGetDapperQueryResult = NonNullable<Awaited<ReturnType<typeof customerAttachmentsGetDapper>>>
export type CustomerAttachmentsGetDapperQueryError = ErrorType<HttpValidationProblemDetails | ErrorResult>


export function useCustomerAttachmentsGetDapper<TData = Awaited<ReturnType<typeof customerAttachmentsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params: undefined |  CustomerAttachmentsGetDapperParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof customerAttachmentsGetDapper>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof customerAttachmentsGetDapper>>,
          TError,
          Awaited<ReturnType<typeof customerAttachmentsGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCustomerAttachmentsGetDapper<TData = Awaited<ReturnType<typeof customerAttachmentsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: CustomerAttachmentsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customerAttachmentsGetDapper>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof customerAttachmentsGetDapper>>,
          TError,
          Awaited<ReturnType<typeof customerAttachmentsGetDapper>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCustomerAttachmentsGetDapper<TData = Awaited<ReturnType<typeof customerAttachmentsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: CustomerAttachmentsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customerAttachmentsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get CustomerAttachment details via dapper.
 */

export function useCustomerAttachmentsGetDapper<TData = Awaited<ReturnType<typeof customerAttachmentsGetDapper>>, TError = ErrorType<HttpValidationProblemDetails | ErrorResult>>(
 params?: CustomerAttachmentsGetDapperParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof customerAttachmentsGetDapper>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCustomerAttachmentsGetDapperQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new CustomerAttachment.
 */
export const customerAttachmentsCreate = (
    createCustomerAttachmentRequest: BodyType<CreateCustomerAttachmentRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<number>(
      {url: `/api/v1/customerattachments`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCustomerAttachmentRequest, signal
    },
      options);
    }
  


export const getCustomerAttachmentsCreateMutationOptions = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customerAttachmentsCreate>>, TError,{data: BodyType<CreateCustomerAttachmentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof customerAttachmentsCreate>>, TError,{data: BodyType<CreateCustomerAttachmentRequest>}, TContext> => {

const mutationKey = ['customerAttachmentsCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof customerAttachmentsCreate>>, {data: BodyType<CreateCustomerAttachmentRequest>}> = (props) => {
          const {data} = props ?? {};

          return  customerAttachmentsCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CustomerAttachmentsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof customerAttachmentsCreate>>>
    export type CustomerAttachmentsCreateMutationBody = BodyType<CreateCustomerAttachmentRequest>
    export type CustomerAttachmentsCreateMutationError = ErrorType<HttpValidationProblemDetails | ErrorResult>

    /**
 * @summary Create a new CustomerAttachment.
 */
export const useCustomerAttachmentsCreate = <TError = ErrorType<HttpValidationProblemDetails | ErrorResult>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customerAttachmentsCreate>>, TError,{data: BodyType<CreateCustomerAttachmentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof customerAttachmentsCreate>>,
        TError,
        {data: BodyType<CreateCustomerAttachmentRequest>},
        TContext
      > => {

      const mutationOptions = getCustomerAttachmentsCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Export a CustomerAttachmentAttachments.
 */
export const customerAttachmentsExport = (
    exportCustomerAttachmentRequest: BodyType<ExportCustomerAttachmentRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Blob>(
      {url: `/api/v1/customerattachments/export`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: exportCustomerAttachmentRequest,
        responseType: 'blob', signal
    },
      options);
    }
  


export const getCustomerAttachmentsExportMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customerAttachmentsExport>>, TError,{data: BodyType<ExportCustomerAttachmentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof customerAttachmentsExport>>, TError,{data: BodyType<ExportCustomerAttachmentRequest>}, TContext> => {

const mutationKey = ['customerAttachmentsExport'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof customerAttachmentsExport>>, {data: BodyType<ExportCustomerAttachmentRequest>}> = (props) => {
          const {data} = props ?? {};

          return  customerAttachmentsExport(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CustomerAttachmentsExportMutationResult = NonNullable<Awaited<ReturnType<typeof customerAttachmentsExport>>>
    export type CustomerAttachmentsExportMutationBody = BodyType<ExportCustomerAttachmentRequest>
    export type CustomerAttachmentsExportMutationError = ErrorType<unknown>

    /**
 * @summary Export a CustomerAttachmentAttachments.
 */
export const useCustomerAttachmentsExport = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof customerAttachmentsExport>>, TError,{data: BodyType<ExportCustomerAttachmentRequest>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof customerAttachmentsExport>>,
        TError,
        {data: BodyType<ExportCustomerAttachmentRequest>},
        TContext
      > => {

      const mutationOptions = getCustomerAttachmentsExportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    